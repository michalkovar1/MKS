
lecture10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003e50  08003e50  00004e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003efc  08003efc  00004efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f04  08003f04  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f04  08003f04  00004f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f08  08003f08  00004f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000204  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  2000026c  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd01  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4a  00000000  00000000  00011d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  000139e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  00014658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024358  00000000  00000000  0001500f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e048  00000000  00000000  00039367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc1e3  00000000  00000000  000473af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123592  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c1c  00000000  00000000  001235d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  001271f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e38 	.word	0x08003e38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08003e38 	.word	0x08003e38

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffd1 	bl	8000580 <ITM_SendChar>
	return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
			{ '1', '2', '3', 'A' },
			{ '4', '5', '6', 'B' },
			{ '7', '8', '9', 'C' },
			{ '*', '0', '#', 'D' },
	};
	if (key == 0) {
 80005f0:	4b47      	ldr	r3, [pc, #284]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d13b      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if (HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin) == GPIO_PIN_RESET) key = keyboard[row][0];
 80005fa:	2108      	movs	r1, #8
 80005fc:	4845      	ldr	r0, [pc, #276]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80005fe:	f001 f86f 	bl	80016e0 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d107      	bne.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x30>
 8000608:	4b43      	ldr	r3, [pc, #268]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b43      	ldr	r3, [pc, #268]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000610:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000616:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin) == GPIO_PIN_RESET) key = keyboard[row][1];
 8000618:	2140      	movs	r1, #64	@ 0x40
 800061a:	483e      	ldr	r0, [pc, #248]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800061c:	f001 f860 	bl	80016e0 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000626:	4b3c      	ldr	r3, [pc, #240]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	4a3c      	ldr	r2, [pc, #240]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	785a      	ldrb	r2, [r3, #1]
 8000632:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000634:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin) == GPIO_PIN_RESET) key = keyboard[row][2];
 8000636:	2120      	movs	r1, #32
 8000638:	4836      	ldr	r0, [pc, #216]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800063a:	f001 f851 	bl	80016e0 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d107      	bne.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000644:	4b34      	ldr	r3, [pc, #208]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4a34      	ldr	r2, [pc, #208]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	789a      	ldrb	r2, [r3, #2]
 8000650:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000652:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(Col4_GPIO_Port, Col4_Pin) == GPIO_PIN_RESET) key = keyboard[row][3];
 8000654:	2110      	movs	r1, #16
 8000656:	482f      	ldr	r0, [pc, #188]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000658:	f001 f842 	bl	80016e0 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d107      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4a2d      	ldr	r2, [pc, #180]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	78da      	ldrb	r2, [r3, #3]
 800066e:	4b28      	ldr	r3, [pc, #160]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000670:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2102      	movs	r1, #2
 8000676:	482a      	ldr	r0, [pc, #168]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000678:	f001 f84a 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000682:	4828      	ldr	r0, [pc, #160]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000684:	f001 f844 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2180      	movs	r1, #128	@ 0x80
 800068c:	4825      	ldr	r0, [pc, #148]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800068e:	f001 f83f 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000698:	4822      	ldr	r0, [pc, #136]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800069a:	f001 f839 	bl	8001710 <HAL_GPIO_WritePin>
	switch (row) {
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d830      	bhi.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x120>
 80006a6:	a201      	add	r2, pc, #4	@ (adr r2, 80006ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006d1 	.word	0x080006d1
 80006b4:	080006e3 	.word	0x080006e3
 80006b8:	080006f7 	.word	0x080006f7
		case 0: row = 1; HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); break;
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006c8:	4816      	ldr	r0, [pc, #88]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006ca:	f001 f821 	bl	8001710 <HAL_GPIO_WritePin>
 80006ce:	e01b      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x120>
		case 1: row = 2; HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); break;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	4812      	ldr	r0, [pc, #72]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006dc:	f001 f818 	bl	8001710 <HAL_GPIO_WritePin>
 80006e0:	e012      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x120>
		case 2: row = 3; HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); break;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006e4:	2203      	movs	r2, #3
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ee:	480d      	ldr	r0, [pc, #52]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006f0:	f001 f80e 	bl	8001710 <HAL_GPIO_WritePin>
 80006f4:	e008      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0x120>
		case 3: row = 0; HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); break;
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	2200      	movs	r2, #0
 80006fe:	2102      	movs	r1, #2
 8000700:	4807      	ldr	r0, [pc, #28]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000702:	f001 f805 	bl	8001710 <HAL_GPIO_WritePin>
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000114 	.word	0x20000114
 8000714:	40021000 	.word	0x40021000
 8000718:	20000115 	.word	0x20000115
 800071c:	08003ea0 	.word	0x08003ea0
 8000720:	40021800 	.word	0x40021800
 8000724:	40021400 	.word	0x40021400

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc83 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f889 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f000 f969 	bl	8000a0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800073a:	f000 f93d 	bl	80009b8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800073e:	f000 f8ed 	bl	800091c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000742:	4839      	ldr	r0, [pc, #228]	@ (8000828 <main+0x100>)
 8000744:	f001 fd00 	bl	8002148 <HAL_TIM_Base_Start_IT>

  const char password[5]=  { '7', '9', '3', '2', '#' };
 8000748:	4a38      	ldr	r2, [pc, #224]	@ (800082c <main+0x104>)
 800074a:	463b      	mov	r3, r7
 800074c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000750:	6018      	str	r0, [r3, #0]
 8000752:	3304      	adds	r3, #4
 8000754:	7019      	strb	r1, [r3, #0]
  uint8_t passwordlen=5;
 8000756:	2305      	movs	r3, #5
 8000758:	73fb      	strb	r3, [r7, #15]
  uint8_t pw_i = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	75fb      	strb	r3, [r7, #23]
  uint32_t last_time=0;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
	  /*printf("Tick\n");

	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  HAL_Delay(250);*/

	  uint32_t timeout = HAL_GetTick();
 8000762:	f000 fccf 	bl	8001104 <HAL_GetTick>
 8000766:	60b8      	str	r0, [r7, #8]
	  if ((timeout-last_time) > time && pw_i>0){
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000772:	4293      	cmp	r3, r2
 8000774:	d907      	bls.n	8000786 <main+0x5e>
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <main+0x5e>
		  pw_i=0;
 800077c:	2300      	movs	r3, #0
 800077e:	75fb      	strb	r3, [r7, #23]
		  printf("long time \n");
 8000780:	482b      	ldr	r0, [pc, #172]	@ (8000830 <main+0x108>)
 8000782:	f002 fcf5 	bl	8003170 <puts>
	  }

	  if(key != 0){
 8000786:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <main+0x10c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <main+0x6c>
		  last_time=timeout;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	613b      	str	r3, [r7, #16]
	  }

	  if (key != 0 && key == password[pw_i]) {
 8000794:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <main+0x10c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d028      	beq.n	80007f0 <main+0xc8>
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	3318      	adds	r3, #24
 80007a2:	443b      	add	r3, r7
 80007a4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <main+0x10c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d11e      	bne.n	80007f0 <main+0xc8>
		  printf("correct symbol '%c'\n", key);
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <main+0x10c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4619      	mov	r1, r3
 80007ba:	481f      	ldr	r0, [pc, #124]	@ (8000838 <main+0x110>)
 80007bc:	f002 fc70 	bl	80030a0 <iprintf>
		  HAL_Delay(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c4:	f000 fcaa 	bl	800111c <HAL_Delay>
		  key = 0;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <main+0x10c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
		  pw_i++;
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
 80007d0:	3301      	adds	r3, #1
 80007d2:	75fb      	strb	r3, [r7, #23]

		  if (pw_i == passwordlen){
 80007d4:	7dfa      	ldrb	r2, [r7, #23]
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d124      	bne.n	8000826 <main+0xfe>
			  printf("correct password \n");
 80007dc:	4817      	ldr	r0, [pc, #92]	@ (800083c <main+0x114>)
 80007de:	f002 fcc7 	bl	8003170 <puts>
			  pw_i = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	75fb      	strb	r3, [r7, #23]
			  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007e6:	2101      	movs	r1, #1
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <main+0x118>)
 80007ea:	f000 ffaa 	bl	8001742 <HAL_GPIO_TogglePin>
		  if (pw_i == passwordlen){
 80007ee:	e01a      	b.n	8000826 <main+0xfe>
		  }
	  }


	  else if (key != 0 && key != password[pw_i]) {
 80007f0:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <main+0x10c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0b3      	beq.n	8000762 <main+0x3a>
 80007fa:	7dfb      	ldrb	r3, [r7, #23]
 80007fc:	3318      	adds	r3, #24
 80007fe:	443b      	add	r3, r7
 8000800:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <main+0x10c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	429a      	cmp	r2, r3
 800080c:	d0a9      	beq.n	8000762 <main+0x3a>
		  printf("wrong password \n");
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <main+0x11c>)
 8000810:	f002 fcae 	bl	8003170 <puts>
		  HAL_Delay(500);
 8000814:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000818:	f000 fc80 	bl	800111c <HAL_Delay>
		  key = 0;
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <main+0x10c>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		  pw_i =0;
 8000822:	2300      	movs	r3, #0
 8000824:	75fb      	strb	r3, [r7, #23]
  {
 8000826:	e79c      	b.n	8000762 <main+0x3a>
 8000828:	20000084 	.word	0x20000084
 800082c:	08003e98 	.word	0x08003e98
 8000830:	08003e50 	.word	0x08003e50
 8000834:	20000114 	.word	0x20000114
 8000838:	08003e5c 	.word	0x08003e5c
 800083c:	08003e74 	.word	0x08003e74
 8000840:	40020400 	.word	0x40020400
 8000844:	08003e88 	.word	0x08003e88

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	@ 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	@ 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fd6a 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a27      	ldr	r2, [pc, #156]	@ (8000914 <SystemClock_Config+0xcc>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <SystemClock_Config+0xcc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <SystemClock_Config+0xd0>)
 8000892:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <SystemClock_Config+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008bc:	23a8      	movs	r3, #168	@ 0xa8
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 ff53 	bl	8001778 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f9f6 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2105      	movs	r1, #5
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f9b4 	bl	8001c68 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000906:	f000 f9df 	bl	8000cc8 <Error_Handler>
  }
}
 800090a:	bf00      	nop
 800090c:	3750      	adds	r7, #80	@ 0x50
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_TIM3_Init+0x94>)
 800093a:	4a1e      	ldr	r2, [pc, #120]	@ (80009b4 <MX_TIM3_Init+0x98>)
 800093c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_TIM3_Init+0x94>)
 8000940:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_TIM3_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_TIM3_Init+0x94>)
 800094e:	2263      	movs	r2, #99	@ 0x63
 8000950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_TIM3_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_TIM3_Init+0x94>)
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800095e:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <MX_TIM3_Init+0x94>)
 8000960:	f001 fba2 	bl	80020a8 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800096a:	f000 f9ad 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_TIM3_Init+0x94>)
 800097c:	f001 fd44 	bl	8002408 <HAL_TIM_ConfigClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f99f 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	@ (80009b0 <MX_TIM3_Init+0x94>)
 8000998:	f001 ff6c 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009a2:	f000 f991 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000084 	.word	0x20000084
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <MX_USART3_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009f0:	f001 ffd0 	bl	8002994 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f965 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000cc 	.word	0x200000cc
 8000a08:	40004800 	.word	0x40004800

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	@ 0x38
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
 8000a26:	4ba1      	ldr	r3, [pc, #644]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4aa0      	ldr	r2, [pc, #640]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b9e      	ldr	r3, [pc, #632]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	623b      	str	r3, [r7, #32]
 8000a3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
 8000a42:	4b9a      	ldr	r3, [pc, #616]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a99      	ldr	r2, [pc, #612]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b97      	ldr	r3, [pc, #604]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b93      	ldr	r3, [pc, #588]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a92      	ldr	r2, [pc, #584]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a64:	f043 0320 	orr.w	r3, r3, #32
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b90      	ldr	r3, [pc, #576]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0320 	and.w	r3, r3, #32
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a8b      	ldr	r2, [pc, #556]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b89      	ldr	r3, [pc, #548]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b85      	ldr	r3, [pc, #532]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a84      	ldr	r2, [pc, #528]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b82      	ldr	r3, [pc, #520]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a7d      	ldr	r2, [pc, #500]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b7b      	ldr	r3, [pc, #492]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b77      	ldr	r3, [pc, #476]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a76      	ldr	r2, [pc, #472]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b74      	ldr	r3, [pc, #464]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b70      	ldr	r3, [pc, #448]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a6f      	ldr	r2, [pc, #444]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b6d      	ldr	r3, [pc, #436]	@ (8000cac <MX_GPIO_Init+0x2a0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Row3_Pin|Row4_Pin|Row2_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000b08:	4869      	ldr	r0, [pc, #420]	@ (8000cb0 <MX_GPIO_Init+0x2a4>)
 8000b0a:	f000 fe01 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b14:	4867      	ldr	r0, [pc, #412]	@ (8000cb4 <MX_GPIO_Init+0x2a8>)
 8000b16:	f000 fdfb 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Row1_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2142      	movs	r1, #66	@ 0x42
 8000b1e:	4866      	ldr	r0, [pc, #408]	@ (8000cb8 <MX_GPIO_Init+0x2ac>)
 8000b20:	f000 fdf6 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Col1_Pin Col4_Pin Col3_Pin Col2_Pin */
  GPIO_InitStruct.Pin = Col1_Pin|Col4_Pin|Col3_Pin|Col2_Pin;
 8000b24:	2378      	movs	r3, #120	@ 0x78
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4861      	ldr	r0, [pc, #388]	@ (8000cbc <MX_GPIO_Init+0x2b0>)
 8000b38:	f000 fc26 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	485b      	ldr	r0, [pc, #364]	@ (8000cc0 <MX_GPIO_Init+0x2b4>)
 8000b54:	f000 fc18 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : Row3_Pin Row4_Pin Row2_Pin */
  GPIO_InitStruct.Pin = Row3_Pin|Row4_Pin|Row2_Pin;
 8000b58:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b5e:	2311      	movs	r3, #17
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	484f      	ldr	r0, [pc, #316]	@ (8000cb0 <MX_GPIO_Init+0x2a4>)
 8000b72:	f000 fc09 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b76:	2332      	movs	r3, #50	@ 0x32
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	484b      	ldr	r0, [pc, #300]	@ (8000cc0 <MX_GPIO_Init+0x2b4>)
 8000b92:	f000 fbf9 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b96:	2386      	movs	r3, #134	@ 0x86
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4844      	ldr	r0, [pc, #272]	@ (8000cc4 <MX_GPIO_Init+0x2b8>)
 8000bb2:	f000 fbe9 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bb6:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4839      	ldr	r0, [pc, #228]	@ (8000cb4 <MX_GPIO_Init+0x2a8>)
 8000bd0:	f000 fbda 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : Row1_Pin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bd8:	2311      	movs	r3, #17
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4833      	ldr	r0, [pc, #204]	@ (8000cb8 <MX_GPIO_Init+0x2ac>)
 8000bec:	f000 fbcc 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4829      	ldr	r0, [pc, #164]	@ (8000cb4 <MX_GPIO_Init+0x2a8>)
 8000c0e:	f000 fbbb 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c12:	2340      	movs	r3, #64	@ 0x40
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4823      	ldr	r0, [pc, #140]	@ (8000cb8 <MX_GPIO_Init+0x2ac>)
 8000c2a:	f000 fbad 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c2e:	2380      	movs	r3, #128	@ 0x80
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481d      	ldr	r0, [pc, #116]	@ (8000cb8 <MX_GPIO_Init+0x2ac>)
 8000c42:	f000 fba1 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c46:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c58:	230a      	movs	r3, #10
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4818      	ldr	r0, [pc, #96]	@ (8000cc4 <MX_GPIO_Init+0x2b8>)
 8000c64:	f000 fb90 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <MX_GPIO_Init+0x2b8>)
 8000c7e:	f000 fb83 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c82:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <MX_GPIO_Init+0x2ac>)
 8000ca0:	f000 fb72 	bl	8001388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3738      	adds	r7, #56	@ 0x38
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40021400 	.word	0x40021400
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40021800 	.word	0x40021800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <HAL_TIM_Base_MspInit+0x48>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d115      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_TIM_Base_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d70 <HAL_TIM_Base_MspInit+0x4c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_TIM_Base_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	201d      	movs	r0, #29
 8000d58:	f000 fadf 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d5c:	201d      	movs	r0, #29
 8000d5e:	f000 faf8 	bl	8001352 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <HAL_UART_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_UART_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de0:	2307      	movs	r3, #7
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0x8c>)
 8000dec:	f000 facc 	bl	8001388 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f93f 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM3_IRQHandler+0x10>)
 8000e6a:	f001 f9dd 	bl	8002228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000084 	.word	0x20000084

08000e78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
  }

  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e009      	b.n	8000ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fb7e 	bl	80005ce <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf1      	blt.n	8000ec4 <_write+0x12>
  }
  return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	@ (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f002 fa22 	bl	80033cc <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20030000 	.word	0x20030000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	20000118 	.word	0x20000118
 8000fbc:	20000270 	.word	0x20000270

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 f9e1 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fb87 	bl	8000728 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800101c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001028:	08003f0c 	.word	0x08003f0c
  ldr r2, =_sbss
 800102c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001030:	2000026c 	.word	0x2000026c

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	@ (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f94f 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fe32 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f967 	bl	800136e <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f92f 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000011c 	.word	0x2000011c

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000011c 	.word	0x2000011c

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff3e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff31 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e177      	b.n	8001694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8166 	bne.w	800168e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d005      	beq.n	80013da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d130      	bne.n	800143c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80c0 	beq.w	800168e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a65      	ldr	r2, [pc, #404]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b63      	ldr	r3, [pc, #396]	@ (80016ac <HAL_GPIO_Init+0x324>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a61      	ldr	r2, [pc, #388]	@ (80016b0 <HAL_GPIO_Init+0x328>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a58      	ldr	r2, [pc, #352]	@ (80016b4 <HAL_GPIO_Init+0x32c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d037      	beq.n	80015c6 <HAL_GPIO_Init+0x23e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a57      	ldr	r2, [pc, #348]	@ (80016b8 <HAL_GPIO_Init+0x330>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d031      	beq.n	80015c2 <HAL_GPIO_Init+0x23a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a56      	ldr	r2, [pc, #344]	@ (80016bc <HAL_GPIO_Init+0x334>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x236>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a55      	ldr	r2, [pc, #340]	@ (80016c0 <HAL_GPIO_Init+0x338>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x232>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a54      	ldr	r2, [pc, #336]	@ (80016c4 <HAL_GPIO_Init+0x33c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x22e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a53      	ldr	r2, [pc, #332]	@ (80016c8 <HAL_GPIO_Init+0x340>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x22a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	@ (80016cc <HAL_GPIO_Init+0x344>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x226>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	@ (80016d0 <HAL_GPIO_Init+0x348>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x222>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a50      	ldr	r2, [pc, #320]	@ (80016d4 <HAL_GPIO_Init+0x34c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x21e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	@ (80016d8 <HAL_GPIO_Init+0x350>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x21a>
 800159e:	2309      	movs	r3, #9
 80015a0:	e012      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015a2:	230a      	movs	r3, #10
 80015a4:	e010      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015aa:	2307      	movs	r3, #7
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x240>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	@ (80016b0 <HAL_GPIO_Init+0x328>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e6:	4b3d      	ldr	r3, [pc, #244]	@ (80016dc <HAL_GPIO_Init+0x354>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800160a:	4a34      	ldr	r2, [pc, #208]	@ (80016dc <HAL_GPIO_Init+0x354>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001610:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <HAL_GPIO_Init+0x354>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001634:	4a29      	ldr	r2, [pc, #164]	@ (80016dc <HAL_GPIO_Init+0x354>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800163a:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_GPIO_Init+0x354>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800165e:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_GPIO_Init+0x354>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_GPIO_Init+0x354>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001688:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <HAL_GPIO_Init+0x354>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae84 	bls.w	80013a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40022400 	.word	0x40022400
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001742:	b480      	push	{r7}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4013      	ands	r3, r2
 800175a:	041a      	lsls	r2, r3, #16
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43d9      	mvns	r1, r3
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	400b      	ands	r3, r1
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	619a      	str	r2, [r3, #24]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e267      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d075      	beq.n	8001882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001796:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d00c      	beq.n	80017bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a2:	4b85      	ldr	r3, [pc, #532]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d112      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ae:	4b82      	ldr	r3, [pc, #520]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017ba:	d10b      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	4b7e      	ldr	r3, [pc, #504]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d05b      	beq.n	8001880 <HAL_RCC_OscConfig+0x108>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d157      	bne.n	8001880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e242      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0x74>
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a75      	ldr	r2, [pc, #468]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e01d      	b.n	8001828 <HAL_RCC_OscConfig+0xb0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x98>
 80017f6:	4b70      	ldr	r3, [pc, #448]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6f      	ldr	r2, [pc, #444]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b6d      	ldr	r3, [pc, #436]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6c      	ldr	r2, [pc, #432]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xb0>
 8001810:	4b69      	ldr	r3, [pc, #420]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a68      	ldr	r2, [pc, #416]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a65      	ldr	r2, [pc, #404]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d013      	beq.n	8001858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fc68 	bl	8001104 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fc64 	bl	8001104 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	@ 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e207      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b5b      	ldr	r3, [pc, #364]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xc0>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fc54 	bl	8001104 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fc50 	bl	8001104 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	@ 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e1f3      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	4b51      	ldr	r3, [pc, #324]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0xe8>
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d063      	beq.n	8001956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800188e:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189a:	4b47      	ldr	r3, [pc, #284]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d11c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a6:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x152>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1c7      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4937      	ldr	r1, [pc, #220]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	e03a      	b.n	8001956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e8:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <HAL_RCC_OscConfig+0x244>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff fc09 	bl	8001104 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fc05 	bl	8001104 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1a8      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4925      	ldr	r1, [pc, #148]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <HAL_RCC_OscConfig+0x244>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fbe8 	bl	8001104 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff fbe4 	bl	8001104 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e187      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d036      	beq.n	80019d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d016      	beq.n	8001998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_RCC_OscConfig+0x248>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fbc8 	bl	8001104 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fbc4 	bl	8001104 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e167      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RCC_OscConfig+0x240>)
 800198c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x200>
 8001996:	e01b      	b.n	80019d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_OscConfig+0x248>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fbb1 	bl	8001104 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	e00e      	b.n	80019c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff fbad 	bl	8001104 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d907      	bls.n	80019c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e150      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
 80019b8:	40023800 	.word	0x40023800
 80019bc:	42470000 	.word	0x42470000
 80019c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 80019c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ea      	bne.n	80019a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8097 	beq.w	8001b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b81      	ldr	r3, [pc, #516]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10f      	bne.n	8001a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b7d      	ldr	r3, [pc, #500]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a7c      	ldr	r2, [pc, #496]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b7a      	ldr	r3, [pc, #488]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b77      	ldr	r3, [pc, #476]	@ (8001bec <HAL_RCC_OscConfig+0x474>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1a:	4b74      	ldr	r3, [pc, #464]	@ (8001bec <HAL_RCC_OscConfig+0x474>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a73      	ldr	r2, [pc, #460]	@ (8001bec <HAL_RCC_OscConfig+0x474>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb6d 	bl	8001104 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2e:	f7ff fb69 	bl	8001104 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e10c      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	4b6a      	ldr	r3, [pc, #424]	@ (8001bec <HAL_RCC_OscConfig+0x474>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2ea>
 8001a54:	4b64      	ldr	r3, [pc, #400]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	4a63      	ldr	r2, [pc, #396]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x324>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x30c>
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a76:	4b5c      	ldr	r3, [pc, #368]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x324>
 8001a84:	4b58      	ldr	r3, [pc, #352]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a88:	4a57      	ldr	r2, [pc, #348]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a90:	4b55      	ldr	r3, [pc, #340]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a94:	4a54      	ldr	r2, [pc, #336]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	f023 0304 	bic.w	r3, r3, #4
 8001a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d015      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fb2e 	bl	8001104 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff fb2a 	bl	8001104 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0cb      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	4b49      	ldr	r3, [pc, #292]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0ee      	beq.n	8001aac <HAL_RCC_OscConfig+0x334>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb18 	bl	8001104 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fb14 	bl	8001104 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0b5      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aee:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ee      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	4a38      	ldr	r2, [pc, #224]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a1 	beq.w	8001c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b16:	4b34      	ldr	r3, [pc, #208]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d05c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d141      	bne.n	8001bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_RCC_OscConfig+0x478>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fae8 	bl	8001104 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff fae4 	bl	8001104 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e087      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	491b      	ldr	r1, [pc, #108]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <HAL_RCC_OscConfig+0x478>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff fabd 	bl	8001104 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff fab9 	bl	8001104 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e05c      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x416>
 8001bac:	e054      	b.n	8001c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_RCC_OscConfig+0x478>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff faa6 	bl	8001104 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff faa2 	bl	8001104 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e045      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x444>
 8001bda:	e03d      	b.n	8001c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e038      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x4ec>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d028      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d121      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d11a      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c24:	4013      	ands	r3, r2
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d111      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0cc      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b68      	ldr	r3, [pc, #416]	@ (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d90c      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b65      	ldr	r3, [pc, #404]	@ (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b63      	ldr	r3, [pc, #396]	@ (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0b8      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cbc:	4b59      	ldr	r3, [pc, #356]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a58      	ldr	r2, [pc, #352]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd4:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a52      	ldr	r2, [pc, #328]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b50      	ldr	r3, [pc, #320]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	494d      	ldr	r1, [pc, #308]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d044      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b47      	ldr	r3, [pc, #284]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d119      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e07f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d107      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	4b3f      	ldr	r3, [pc, #252]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e067      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 0203 	bic.w	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4934      	ldr	r1, [pc, #208]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f9d4 	bl	8001104 <HAL_GetTick>
 8001d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d60:	f7ff f9d0 	bl	8001104 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e04f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	4b2b      	ldr	r3, [pc, #172]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 020c 	and.w	r2, r3, #12
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1eb      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d88:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d20c      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b22      	ldr	r3, [pc, #136]	@ (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e032      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4916      	ldr	r1, [pc, #88]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	490e      	ldr	r1, [pc, #56]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dee:	f000 f821 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	490a      	ldr	r1, [pc, #40]	@ (8001e28 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	5ccb      	ldrb	r3, [r1, r3]
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a09      	ldr	r2, [pc, #36]	@ (8001e2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f934 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00
 8001e24:	40023800 	.word	0x40023800
 8001e28:	08003eb0 	.word	0x08003eb0
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000004 	.word	0x20000004

08001e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e38:	b094      	sub	sp, #80	@ 0x50
 8001e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e4c:	4b79      	ldr	r3, [pc, #484]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d00d      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x40>
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	f200 80e1 	bhi.w	8002020 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x34>
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e66:	e0db      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e68:	4b73      	ldr	r3, [pc, #460]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e6c:	e0db      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e6e:	4b73      	ldr	r3, [pc, #460]	@ (800203c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e72:	e0d8      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e74:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	2200      	movs	r2, #0
 8001e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ea2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	0159      	lsls	r1, r3, #5
 8001eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb8:	0150      	lsls	r0, r2, #5
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	1a51      	subs	r1, r2, r1
 8001ec2:	6139      	str	r1, [r7, #16]
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ed8:	4659      	mov	r1, fp
 8001eda:	018b      	lsls	r3, r1, #6
 8001edc:	4651      	mov	r1, sl
 8001ede:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	018a      	lsls	r2, r1, #6
 8001ee6:	4651      	mov	r1, sl
 8001ee8:	ebb2 0801 	subs.w	r8, r2, r1
 8001eec:	4659      	mov	r1, fp
 8001eee:	eb63 0901 	sbc.w	r9, r3, r1
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f06:	4690      	mov	r8, r2
 8001f08:	4699      	mov	r9, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	eb18 0303 	adds.w	r3, r8, r3
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	462b      	mov	r3, r5
 8001f14:	eb49 0303 	adc.w	r3, r9, r3
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f26:	4629      	mov	r1, r5
 8001f28:	024b      	lsls	r3, r1, #9
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f30:	4621      	mov	r1, r4
 8001f32:	024a      	lsls	r2, r1, #9
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f44:	f7fe f9a4 	bl	8000290 <__aeabi_uldivmod>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f50:	e058      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f52:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	464b      	mov	r3, r9
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0159      	lsls	r1, r3, #5
 8001f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f7e:	0150      	lsls	r0, r2, #5
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4641      	mov	r1, r8
 8001f86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fa0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fa4:	ebb2 040a 	subs.w	r4, r2, sl
 8001fa8:	eb63 050b 	sbc.w	r5, r3, fp
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	00eb      	lsls	r3, r5, #3
 8001fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fba:	00e2      	lsls	r2, r4, #3
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	461d      	mov	r5, r3
 8001fc0:	4643      	mov	r3, r8
 8001fc2:	18e3      	adds	r3, r4, r3
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	eb45 0303 	adc.w	r3, r5, r3
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fda:	4629      	mov	r1, r5
 8001fdc:	028b      	lsls	r3, r1, #10
 8001fde:	4621      	mov	r1, r4
 8001fe0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	028a      	lsls	r2, r1, #10
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	61fa      	str	r2, [r7, #28]
 8001ff4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff8:	f7fe f94a 	bl	8000290 <__aeabi_uldivmod>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4613      	mov	r3, r2
 8002002:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x200>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	3301      	adds	r3, #1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002018:	fbb2 f3f3 	udiv	r3, r2, r3
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800201e:	e002      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x204>)
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002028:	4618      	mov	r0, r3
 800202a:	3750      	adds	r7, #80	@ 0x50
 800202c:	46bd      	mov	sp, r7
 800202e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	00f42400 	.word	0x00f42400
 800203c:	007a1200 	.word	0x007a1200

08002040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <HAL_RCC_GetHCLKFreq+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000

08002058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800205c:	f7ff fff0 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0a9b      	lsrs	r3, r3, #10
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	@ (800207c <HAL_RCC_GetPCLK1Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08003ec0 	.word	0x08003ec0

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002084:	f7ff ffdc 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4903      	ldr	r1, [pc, #12]	@ (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08003ec0 	.word	0x08003ec0

080020a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e041      	b.n	800213e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fe28 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f000 fa7e 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d001      	beq.n	8002160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e04e      	b.n	80021fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a23      	ldr	r2, [pc, #140]	@ (800220c <HAL_TIM_Base_Start_IT+0xc4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d022      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218a:	d01d      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1f      	ldr	r2, [pc, #124]	@ (8002210 <HAL_TIM_Base_Start_IT+0xc8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d018      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1e      	ldr	r2, [pc, #120]	@ (8002214 <HAL_TIM_Base_Start_IT+0xcc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_TIM_Base_Start_IT+0xd0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00e      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_TIM_Base_Start_IT+0xd4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <HAL_TIM_Base_Start_IT+0xd8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x80>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a18      	ldr	r2, [pc, #96]	@ (8002224 <HAL_TIM_Base_Start_IT+0xdc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d010      	beq.n	80021fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ea:	e007      	b.n	80021fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40010000 	.word	0x40010000
 8002210:	40000400 	.word	0x40000400
 8002214:	40000800 	.word	0x40000800
 8002218:	40000c00 	.word	0x40000c00
 800221c:	40010400 	.word	0x40010400
 8002220:	40014000 	.word	0x40014000
 8002224:	40001800 	.word	0x40001800

08002228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01b      	beq.n	800228c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0202 	mvn.w	r2, #2
 800225c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f999 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f98b 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f99c 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0204 	mvn.w	r2, #4
 80022a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f973 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f965 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f976 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d020      	beq.n	8002324 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0208 	mvn.w	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2204      	movs	r2, #4
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f94d 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f93f 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f950 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d020      	beq.n	8002370 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2208      	movs	r2, #8
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f927 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f919 	bl	8002596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f92a 	bl	80025be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0201 	mvn.w	r2, #1
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe f92a 	bl	80005e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fae4 	bl	8002980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8fb 	bl	80025d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0220 	mvn.w	r2, #32
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fab6 	bl	800296c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_TIM_ConfigClockSource+0x1c>
 8002420:	2302      	movs	r3, #2
 8002422:	e0b4      	b.n	800258e <HAL_TIM_ConfigClockSource+0x186>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800244a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800245c:	d03e      	beq.n	80024dc <HAL_TIM_ConfigClockSource+0xd4>
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002462:	f200 8087 	bhi.w	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800246a:	f000 8086 	beq.w	800257a <HAL_TIM_ConfigClockSource+0x172>
 800246e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002472:	d87f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b70      	cmp	r3, #112	@ 0x70
 8002476:	d01a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0xa6>
 8002478:	2b70      	cmp	r3, #112	@ 0x70
 800247a:	d87b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800247c:	2b60      	cmp	r3, #96	@ 0x60
 800247e:	d050      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x11a>
 8002480:	2b60      	cmp	r3, #96	@ 0x60
 8002482:	d877      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002484:	2b50      	cmp	r3, #80	@ 0x50
 8002486:	d03c      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0xfa>
 8002488:	2b50      	cmp	r3, #80	@ 0x50
 800248a:	d873      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800248c:	2b40      	cmp	r3, #64	@ 0x40
 800248e:	d058      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x13a>
 8002490:	2b40      	cmp	r3, #64	@ 0x40
 8002492:	d86f      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b30      	cmp	r3, #48	@ 0x30
 8002496:	d064      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 8002498:	2b30      	cmp	r3, #48	@ 0x30
 800249a:	d86b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b20      	cmp	r3, #32
 800249e:	d060      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d867      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d05a      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	e062      	b.n	8002574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024be:	f000 f9b9 	bl	8002834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
      break;
 80024da:	e04f      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ec:	f000 f9a2 	bl	8002834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024fe:	609a      	str	r2, [r3, #8]
      break;
 8002500:	e03c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	461a      	mov	r2, r3
 8002510:	f000 f916 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2150      	movs	r1, #80	@ 0x50
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f96f 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002520:	e02c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800252e:	461a      	mov	r2, r3
 8002530:	f000 f935 	bl	800279e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2160      	movs	r1, #96	@ 0x60
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f95f 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002540:	e01c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800254e:	461a      	mov	r2, r3
 8002550:	f000 f8f6 	bl	8002740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2140      	movs	r1, #64	@ 0x40
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f94f 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002560:	e00c      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f000 f946 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002572:	e003      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e000      	b.n	800257c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <TIM_Base_SetConfig+0x12c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <TIM_Base_SetConfig+0x40>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002606:	d00f      	beq.n	8002628 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a43      	ldr	r2, [pc, #268]	@ (8002718 <TIM_Base_SetConfig+0x130>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00b      	beq.n	8002628 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a42      	ldr	r2, [pc, #264]	@ (800271c <TIM_Base_SetConfig+0x134>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a41      	ldr	r2, [pc, #260]	@ (8002720 <TIM_Base_SetConfig+0x138>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0x40>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a40      	ldr	r2, [pc, #256]	@ (8002724 <TIM_Base_SetConfig+0x13c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800262e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a35      	ldr	r2, [pc, #212]	@ (8002714 <TIM_Base_SetConfig+0x12c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d02b      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002648:	d027      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a32      	ldr	r2, [pc, #200]	@ (8002718 <TIM_Base_SetConfig+0x130>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d023      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a31      	ldr	r2, [pc, #196]	@ (800271c <TIM_Base_SetConfig+0x134>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a30      	ldr	r2, [pc, #192]	@ (8002720 <TIM_Base_SetConfig+0x138>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01b      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2f      	ldr	r2, [pc, #188]	@ (8002724 <TIM_Base_SetConfig+0x13c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2e      	ldr	r2, [pc, #184]	@ (8002728 <TIM_Base_SetConfig+0x140>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2d      	ldr	r2, [pc, #180]	@ (800272c <TIM_Base_SetConfig+0x144>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00f      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2c      	ldr	r2, [pc, #176]	@ (8002730 <TIM_Base_SetConfig+0x148>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00b      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <TIM_Base_SetConfig+0x14c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <TIM_Base_SetConfig+0x150>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a29      	ldr	r2, [pc, #164]	@ (800273c <TIM_Base_SetConfig+0x154>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d108      	bne.n	80026ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a10      	ldr	r2, [pc, #64]	@ (8002714 <TIM_Base_SetConfig+0x12c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <TIM_Base_SetConfig+0xf8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <TIM_Base_SetConfig+0x13c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d103      	bne.n	80026e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f023 0201 	bic.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	611a      	str	r2, [r3, #16]
  }
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010000 	.word	0x40010000
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40000c00 	.word	0x40000c00
 8002724:	40010400 	.word	0x40010400
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400
 8002730:	40014800 	.word	0x40014800
 8002734:	40001800 	.word	0x40001800
 8002738:	40001c00 	.word	0x40001c00
 800273c:	40002000 	.word	0x40002000

08002740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 0201 	bic.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800276a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f023 030a 	bic.w	r3, r3, #10
 800277c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	621a      	str	r2, [r3, #32]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0210 	bic.w	r2, r3, #16
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	031b      	lsls	r3, r3, #12
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	f043 0307 	orr.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800284e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	431a      	orrs	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	609a      	str	r2, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e05a      	b.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a21      	ldr	r2, [pc, #132]	@ (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028d8:	d01d      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a18      	ldr	r2, [pc, #96]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a17      	ldr	r2, [pc, #92]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10c      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800291c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4313      	orrs	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40010400 	.word	0x40010400
 8002964:	40014000 	.word	0x40014000
 8002968:	40001800 	.word	0x40001800

0800296c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e042      	b.n	8002a2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f9da 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	@ 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f82b 	bl	8002a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b0c0      	sub	sp, #256	@ 0x100
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	68d9      	ldr	r1, [r3, #12]
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	ea40 0301 	orr.w	r3, r0, r1
 8002a5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a8c:	f021 010c 	bic.w	r1, r1, #12
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aae:	6999      	ldr	r1, [r3, #24]
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	ea40 0301 	orr.w	r3, r0, r1
 8002aba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b8f      	ldr	r3, [pc, #572]	@ (8002d00 <UART_SetConfig+0x2cc>)
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d005      	beq.n	8002ad4 <UART_SetConfig+0xa0>
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b8d      	ldr	r3, [pc, #564]	@ (8002d04 <UART_SetConfig+0x2d0>)
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d104      	bne.n	8002ade <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad4:	f7ff fad4 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8002ad8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002adc:	e003      	b.n	8002ae6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ade:	f7ff fabb 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 8002ae2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002af0:	f040 810c 	bne.w	8002d0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af8:	2200      	movs	r2, #0
 8002afa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002afe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b06:	4622      	mov	r2, r4
 8002b08:	462b      	mov	r3, r5
 8002b0a:	1891      	adds	r1, r2, r2
 8002b0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b0e:	415b      	adcs	r3, r3
 8002b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b16:	4621      	mov	r1, r4
 8002b18:	eb12 0801 	adds.w	r8, r2, r1
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	eb43 0901 	adc.w	r9, r3, r1
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b36:	4690      	mov	r8, r2
 8002b38:	4699      	mov	r9, r3
 8002b3a:	4623      	mov	r3, r4
 8002b3c:	eb18 0303 	adds.w	r3, r8, r3
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b44:	462b      	mov	r3, r5
 8002b46:	eb49 0303 	adc.w	r3, r9, r3
 8002b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b62:	460b      	mov	r3, r1
 8002b64:	18db      	adds	r3, r3, r3
 8002b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b68:	4613      	mov	r3, r2
 8002b6a:	eb42 0303 	adc.w	r3, r2, r3
 8002b6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b78:	f7fd fb8a 	bl	8000290 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4b61      	ldr	r3, [pc, #388]	@ (8002d08 <UART_SetConfig+0x2d4>)
 8002b82:	fba3 2302 	umull	r2, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	011c      	lsls	r4, r3, #4
 8002b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b9c:	4642      	mov	r2, r8
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	1891      	adds	r1, r2, r2
 8002ba2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ba4:	415b      	adcs	r3, r3
 8002ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bac:	4641      	mov	r1, r8
 8002bae:	eb12 0a01 	adds.w	sl, r2, r1
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bcc:	4692      	mov	sl, r2
 8002bce:	469b      	mov	fp, r3
 8002bd0:	4643      	mov	r3, r8
 8002bd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8002be0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002bf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	18db      	adds	r3, r3, r3
 8002bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bfe:	4613      	mov	r3, r2
 8002c00:	eb42 0303 	adc.w	r3, r2, r3
 8002c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c0e:	f7fd fb3f 	bl	8000290 <__aeabi_uldivmod>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <UART_SetConfig+0x2d4>)
 8002c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2264      	movs	r2, #100	@ 0x64
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	1acb      	subs	r3, r1, r3
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c2e:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <UART_SetConfig+0x2d4>)
 8002c30:	fba3 2302 	umull	r2, r3, r3, r2
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c3c:	441c      	add	r4, r3
 8002c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	1891      	adds	r1, r2, r2
 8002c56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c58:	415b      	adcs	r3, r3
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c60:	4641      	mov	r1, r8
 8002c62:	1851      	adds	r1, r2, r1
 8002c64:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c66:	4649      	mov	r1, r9
 8002c68:	414b      	adcs	r3, r1
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c78:	4659      	mov	r1, fp
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c82:	4651      	mov	r1, sl
 8002c84:	00ca      	lsls	r2, r1, #3
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	189b      	adds	r3, r3, r2
 8002c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c94:	464b      	mov	r3, r9
 8002c96:	460a      	mov	r2, r1
 8002c98:	eb42 0303 	adc.w	r3, r2, r3
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	18db      	adds	r3, r3, r3
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cba:	4613      	mov	r3, r2
 8002cbc:	eb42 0303 	adc.w	r3, r2, r3
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cca:	f7fd fae1 	bl	8000290 <__aeabi_uldivmod>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <UART_SetConfig+0x2d4>)
 8002cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	2164      	movs	r1, #100	@ 0x64
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	3332      	adds	r3, #50	@ 0x32
 8002ce6:	4a08      	ldr	r2, [pc, #32]	@ (8002d08 <UART_SetConfig+0x2d4>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	f003 0207 	and.w	r2, r3, #7
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4422      	add	r2, r4
 8002cfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cfc:	e106      	b.n	8002f0c <UART_SetConfig+0x4d8>
 8002cfe:	bf00      	nop
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40011400 	.word	0x40011400
 8002d08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d1e:	4642      	mov	r2, r8
 8002d20:	464b      	mov	r3, r9
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	6239      	str	r1, [r7, #32]
 8002d26:	415b      	adcs	r3, r3
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d2e:	4641      	mov	r1, r8
 8002d30:	1854      	adds	r4, r2, r1
 8002d32:	4649      	mov	r1, r9
 8002d34:	eb43 0501 	adc.w	r5, r3, r1
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	00eb      	lsls	r3, r5, #3
 8002d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d46:	00e2      	lsls	r2, r4, #3
 8002d48:	4614      	mov	r4, r2
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	4643      	mov	r3, r8
 8002d4e:	18e3      	adds	r3, r4, r3
 8002d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d54:	464b      	mov	r3, r9
 8002d56:	eb45 0303 	adc.w	r3, r5, r3
 8002d5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	008b      	lsls	r3, r1, #2
 8002d7e:	4621      	mov	r1, r4
 8002d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d84:	4621      	mov	r1, r4
 8002d86:	008a      	lsls	r2, r1, #2
 8002d88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d8c:	f7fd fa80 	bl	8000290 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4b60      	ldr	r3, [pc, #384]	@ (8002f18 <UART_SetConfig+0x4e4>)
 8002d96:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	011c      	lsls	r4, r3, #4
 8002d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002da8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002db0:	4642      	mov	r2, r8
 8002db2:	464b      	mov	r3, r9
 8002db4:	1891      	adds	r1, r2, r2
 8002db6:	61b9      	str	r1, [r7, #24]
 8002db8:	415b      	adcs	r3, r3
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	1851      	adds	r1, r2, r1
 8002dc4:	6139      	str	r1, [r7, #16]
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	414b      	adcs	r3, r1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd8:	4659      	mov	r1, fp
 8002dda:	00cb      	lsls	r3, r1, #3
 8002ddc:	4651      	mov	r1, sl
 8002dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de2:	4651      	mov	r1, sl
 8002de4:	00ca      	lsls	r2, r1, #3
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	4642      	mov	r2, r8
 8002dee:	189b      	adds	r3, r3, r2
 8002df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002df4:	464b      	mov	r3, r9
 8002df6:	460a      	mov	r2, r1
 8002df8:	eb42 0303 	adc.w	r3, r2, r3
 8002dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e18:	4649      	mov	r1, r9
 8002e1a:	008b      	lsls	r3, r1, #2
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e22:	4641      	mov	r1, r8
 8002e24:	008a      	lsls	r2, r1, #2
 8002e26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e2a:	f7fd fa31 	bl	8000290 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	4b38      	ldr	r3, [pc, #224]	@ (8002f18 <UART_SetConfig+0x4e4>)
 8002e36:	fba3 2301 	umull	r2, r3, r3, r1
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	2264      	movs	r2, #100	@ 0x64
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	1acb      	subs	r3, r1, r3
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	3332      	adds	r3, #50	@ 0x32
 8002e48:	4a33      	ldr	r2, [pc, #204]	@ (8002f18 <UART_SetConfig+0x4e4>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e54:	441c      	add	r4, r3
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e64:	4642      	mov	r2, r8
 8002e66:	464b      	mov	r3, r9
 8002e68:	1891      	adds	r1, r2, r2
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	415b      	adcs	r3, r3
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e74:	4641      	mov	r1, r8
 8002e76:	1851      	adds	r1, r2, r1
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	414b      	adcs	r3, r1
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	00cb      	lsls	r3, r1, #3
 8002e90:	4651      	mov	r1, sl
 8002e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e96:	4651      	mov	r1, sl
 8002e98:	00ca      	lsls	r2, r1, #3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	eb42 0303 	adc.w	r3, r2, r3
 8002eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eba:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ec8:	4649      	mov	r1, r9
 8002eca:	008b      	lsls	r3, r1, #2
 8002ecc:	4641      	mov	r1, r8
 8002ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	008a      	lsls	r2, r1, #2
 8002ed6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002eda:	f7fd f9d9 	bl	8000290 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <UART_SetConfig+0x4e4>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	@ 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	3332      	adds	r3, #50	@ 0x32
 8002ef6:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <UART_SetConfig+0x4e4>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4422      	add	r2, r4
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f12:	46bd      	mov	sp, r7
 8002f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f18:	51eb851f 	.word	0x51eb851f

08002f1c <std>:
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	4604      	mov	r4, r0
 8002f22:	e9c0 3300 	strd	r3, r3, [r0]
 8002f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f2a:	6083      	str	r3, [r0, #8]
 8002f2c:	8181      	strh	r1, [r0, #12]
 8002f2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f30:	81c2      	strh	r2, [r0, #14]
 8002f32:	6183      	str	r3, [r0, #24]
 8002f34:	4619      	mov	r1, r3
 8002f36:	2208      	movs	r2, #8
 8002f38:	305c      	adds	r0, #92	@ 0x5c
 8002f3a:	f000 f9f9 	bl	8003330 <memset>
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <std+0x58>)
 8002f40:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <std+0x5c>)
 8002f44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f46:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <std+0x60>)
 8002f48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <std+0x64>)
 8002f4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f84 <std+0x68>)
 8002f50:	6224      	str	r4, [r4, #32]
 8002f52:	429c      	cmp	r4, r3
 8002f54:	d006      	beq.n	8002f64 <std+0x48>
 8002f56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f5a:	4294      	cmp	r4, r2
 8002f5c:	d002      	beq.n	8002f64 <std+0x48>
 8002f5e:	33d0      	adds	r3, #208	@ 0xd0
 8002f60:	429c      	cmp	r4, r3
 8002f62:	d105      	bne.n	8002f70 <std+0x54>
 8002f64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f6c:	f000 ba58 	b.w	8003420 <__retarget_lock_init_recursive>
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	bf00      	nop
 8002f74:	08003181 	.word	0x08003181
 8002f78:	080031a3 	.word	0x080031a3
 8002f7c:	080031db 	.word	0x080031db
 8002f80:	080031ff 	.word	0x080031ff
 8002f84:	20000120 	.word	0x20000120

08002f88 <stdio_exit_handler>:
 8002f88:	4a02      	ldr	r2, [pc, #8]	@ (8002f94 <stdio_exit_handler+0xc>)
 8002f8a:	4903      	ldr	r1, [pc, #12]	@ (8002f98 <stdio_exit_handler+0x10>)
 8002f8c:	4803      	ldr	r0, [pc, #12]	@ (8002f9c <stdio_exit_handler+0x14>)
 8002f8e:	f000 b869 	b.w	8003064 <_fwalk_sglue>
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	08003cc1 	.word	0x08003cc1
 8002f9c:	2000001c 	.word	0x2000001c

08002fa0 <cleanup_stdio>:
 8002fa0:	6841      	ldr	r1, [r0, #4]
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <cleanup_stdio+0x34>)
 8002fa4:	4299      	cmp	r1, r3
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	4604      	mov	r4, r0
 8002faa:	d001      	beq.n	8002fb0 <cleanup_stdio+0x10>
 8002fac:	f000 fe88 	bl	8003cc0 <_fflush_r>
 8002fb0:	68a1      	ldr	r1, [r4, #8]
 8002fb2:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <cleanup_stdio+0x38>)
 8002fb4:	4299      	cmp	r1, r3
 8002fb6:	d002      	beq.n	8002fbe <cleanup_stdio+0x1e>
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 fe81 	bl	8003cc0 <_fflush_r>
 8002fbe:	68e1      	ldr	r1, [r4, #12]
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <cleanup_stdio+0x3c>)
 8002fc2:	4299      	cmp	r1, r3
 8002fc4:	d004      	beq.n	8002fd0 <cleanup_stdio+0x30>
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fcc:	f000 be78 	b.w	8003cc0 <_fflush_r>
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000120 	.word	0x20000120
 8002fd8:	20000188 	.word	0x20000188
 8002fdc:	200001f0 	.word	0x200001f0

08002fe0 <global_stdio_init.part.0>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <global_stdio_init.part.0+0x30>)
 8002fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8003014 <global_stdio_init.part.0+0x34>)
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8003018 <global_stdio_init.part.0+0x38>)
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	4620      	mov	r0, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	2104      	movs	r1, #4
 8002ff0:	f7ff ff94 	bl	8002f1c <std>
 8002ff4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	2109      	movs	r1, #9
 8002ffc:	f7ff ff8e 	bl	8002f1c <std>
 8003000:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003004:	2202      	movs	r2, #2
 8003006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800300a:	2112      	movs	r1, #18
 800300c:	f7ff bf86 	b.w	8002f1c <std>
 8003010:	20000258 	.word	0x20000258
 8003014:	20000120 	.word	0x20000120
 8003018:	08002f89 	.word	0x08002f89

0800301c <__sfp_lock_acquire>:
 800301c:	4801      	ldr	r0, [pc, #4]	@ (8003024 <__sfp_lock_acquire+0x8>)
 800301e:	f000 ba00 	b.w	8003422 <__retarget_lock_acquire_recursive>
 8003022:	bf00      	nop
 8003024:	20000261 	.word	0x20000261

08003028 <__sfp_lock_release>:
 8003028:	4801      	ldr	r0, [pc, #4]	@ (8003030 <__sfp_lock_release+0x8>)
 800302a:	f000 b9fb 	b.w	8003424 <__retarget_lock_release_recursive>
 800302e:	bf00      	nop
 8003030:	20000261 	.word	0x20000261

08003034 <__sinit>:
 8003034:	b510      	push	{r4, lr}
 8003036:	4604      	mov	r4, r0
 8003038:	f7ff fff0 	bl	800301c <__sfp_lock_acquire>
 800303c:	6a23      	ldr	r3, [r4, #32]
 800303e:	b11b      	cbz	r3, 8003048 <__sinit+0x14>
 8003040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003044:	f7ff bff0 	b.w	8003028 <__sfp_lock_release>
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <__sinit+0x28>)
 800304a:	6223      	str	r3, [r4, #32]
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <__sinit+0x2c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f5      	bne.n	8003040 <__sinit+0xc>
 8003054:	f7ff ffc4 	bl	8002fe0 <global_stdio_init.part.0>
 8003058:	e7f2      	b.n	8003040 <__sinit+0xc>
 800305a:	bf00      	nop
 800305c:	08002fa1 	.word	0x08002fa1
 8003060:	20000258 	.word	0x20000258

08003064 <_fwalk_sglue>:
 8003064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003068:	4607      	mov	r7, r0
 800306a:	4688      	mov	r8, r1
 800306c:	4614      	mov	r4, r2
 800306e:	2600      	movs	r6, #0
 8003070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003074:	f1b9 0901 	subs.w	r9, r9, #1
 8003078:	d505      	bpl.n	8003086 <_fwalk_sglue+0x22>
 800307a:	6824      	ldr	r4, [r4, #0]
 800307c:	2c00      	cmp	r4, #0
 800307e:	d1f7      	bne.n	8003070 <_fwalk_sglue+0xc>
 8003080:	4630      	mov	r0, r6
 8003082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003086:	89ab      	ldrh	r3, [r5, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d907      	bls.n	800309c <_fwalk_sglue+0x38>
 800308c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003090:	3301      	adds	r3, #1
 8003092:	d003      	beq.n	800309c <_fwalk_sglue+0x38>
 8003094:	4629      	mov	r1, r5
 8003096:	4638      	mov	r0, r7
 8003098:	47c0      	blx	r8
 800309a:	4306      	orrs	r6, r0
 800309c:	3568      	adds	r5, #104	@ 0x68
 800309e:	e7e9      	b.n	8003074 <_fwalk_sglue+0x10>

080030a0 <iprintf>:
 80030a0:	b40f      	push	{r0, r1, r2, r3}
 80030a2:	b507      	push	{r0, r1, r2, lr}
 80030a4:	4906      	ldr	r1, [pc, #24]	@ (80030c0 <iprintf+0x20>)
 80030a6:	ab04      	add	r3, sp, #16
 80030a8:	6808      	ldr	r0, [r1, #0]
 80030aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ae:	6881      	ldr	r1, [r0, #8]
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	f000 fadb 	bl	800366c <_vfiprintf_r>
 80030b6:	b003      	add	sp, #12
 80030b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030bc:	b004      	add	sp, #16
 80030be:	4770      	bx	lr
 80030c0:	20000018 	.word	0x20000018

080030c4 <_puts_r>:
 80030c4:	6a03      	ldr	r3, [r0, #32]
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	6884      	ldr	r4, [r0, #8]
 80030ca:	4605      	mov	r5, r0
 80030cc:	460e      	mov	r6, r1
 80030ce:	b90b      	cbnz	r3, 80030d4 <_puts_r+0x10>
 80030d0:	f7ff ffb0 	bl	8003034 <__sinit>
 80030d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80030d6:	07db      	lsls	r3, r3, #31
 80030d8:	d405      	bmi.n	80030e6 <_puts_r+0x22>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	0598      	lsls	r0, r3, #22
 80030de:	d402      	bmi.n	80030e6 <_puts_r+0x22>
 80030e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030e2:	f000 f99e 	bl	8003422 <__retarget_lock_acquire_recursive>
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	0719      	lsls	r1, r3, #28
 80030ea:	d502      	bpl.n	80030f2 <_puts_r+0x2e>
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d135      	bne.n	800315e <_puts_r+0x9a>
 80030f2:	4621      	mov	r1, r4
 80030f4:	4628      	mov	r0, r5
 80030f6:	f000 f8c5 	bl	8003284 <__swsetup_r>
 80030fa:	b380      	cbz	r0, 800315e <_puts_r+0x9a>
 80030fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003100:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003102:	07da      	lsls	r2, r3, #31
 8003104:	d405      	bmi.n	8003112 <_puts_r+0x4e>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	059b      	lsls	r3, r3, #22
 800310a:	d402      	bmi.n	8003112 <_puts_r+0x4e>
 800310c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800310e:	f000 f989 	bl	8003424 <__retarget_lock_release_recursive>
 8003112:	4628      	mov	r0, r5
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	2b00      	cmp	r3, #0
 8003118:	da04      	bge.n	8003124 <_puts_r+0x60>
 800311a:	69a2      	ldr	r2, [r4, #24]
 800311c:	429a      	cmp	r2, r3
 800311e:	dc17      	bgt.n	8003150 <_puts_r+0x8c>
 8003120:	290a      	cmp	r1, #10
 8003122:	d015      	beq.n	8003150 <_puts_r+0x8c>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	6022      	str	r2, [r4, #0]
 800312a:	7019      	strb	r1, [r3, #0]
 800312c:	68a3      	ldr	r3, [r4, #8]
 800312e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003132:	3b01      	subs	r3, #1
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	2900      	cmp	r1, #0
 8003138:	d1ed      	bne.n	8003116 <_puts_r+0x52>
 800313a:	2b00      	cmp	r3, #0
 800313c:	da11      	bge.n	8003162 <_puts_r+0x9e>
 800313e:	4622      	mov	r2, r4
 8003140:	210a      	movs	r1, #10
 8003142:	4628      	mov	r0, r5
 8003144:	f000 f85f 	bl	8003206 <__swbuf_r>
 8003148:	3001      	adds	r0, #1
 800314a:	d0d7      	beq.n	80030fc <_puts_r+0x38>
 800314c:	250a      	movs	r5, #10
 800314e:	e7d7      	b.n	8003100 <_puts_r+0x3c>
 8003150:	4622      	mov	r2, r4
 8003152:	4628      	mov	r0, r5
 8003154:	f000 f857 	bl	8003206 <__swbuf_r>
 8003158:	3001      	adds	r0, #1
 800315a:	d1e7      	bne.n	800312c <_puts_r+0x68>
 800315c:	e7ce      	b.n	80030fc <_puts_r+0x38>
 800315e:	3e01      	subs	r6, #1
 8003160:	e7e4      	b.n	800312c <_puts_r+0x68>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	6022      	str	r2, [r4, #0]
 8003168:	220a      	movs	r2, #10
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e7ee      	b.n	800314c <_puts_r+0x88>
	...

08003170 <puts>:
 8003170:	4b02      	ldr	r3, [pc, #8]	@ (800317c <puts+0xc>)
 8003172:	4601      	mov	r1, r0
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f7ff bfa5 	b.w	80030c4 <_puts_r>
 800317a:	bf00      	nop
 800317c:	20000018 	.word	0x20000018

08003180 <__sread>:
 8003180:	b510      	push	{r4, lr}
 8003182:	460c      	mov	r4, r1
 8003184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003188:	f000 f8fc 	bl	8003384 <_read_r>
 800318c:	2800      	cmp	r0, #0
 800318e:	bfab      	itete	ge
 8003190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003192:	89a3      	ldrhlt	r3, [r4, #12]
 8003194:	181b      	addge	r3, r3, r0
 8003196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800319a:	bfac      	ite	ge
 800319c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800319e:	81a3      	strhlt	r3, [r4, #12]
 80031a0:	bd10      	pop	{r4, pc}

080031a2 <__swrite>:
 80031a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a6:	461f      	mov	r7, r3
 80031a8:	898b      	ldrh	r3, [r1, #12]
 80031aa:	05db      	lsls	r3, r3, #23
 80031ac:	4605      	mov	r5, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	4616      	mov	r6, r2
 80031b2:	d505      	bpl.n	80031c0 <__swrite+0x1e>
 80031b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b8:	2302      	movs	r3, #2
 80031ba:	2200      	movs	r2, #0
 80031bc:	f000 f8d0 	bl	8003360 <_lseek_r>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031ca:	81a3      	strh	r3, [r4, #12]
 80031cc:	4632      	mov	r2, r6
 80031ce:	463b      	mov	r3, r7
 80031d0:	4628      	mov	r0, r5
 80031d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	f000 b8e7 	b.w	80033a8 <_write_r>

080031da <__sseek>:
 80031da:	b510      	push	{r4, lr}
 80031dc:	460c      	mov	r4, r1
 80031de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e2:	f000 f8bd 	bl	8003360 <_lseek_r>
 80031e6:	1c43      	adds	r3, r0, #1
 80031e8:	89a3      	ldrh	r3, [r4, #12]
 80031ea:	bf15      	itete	ne
 80031ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80031ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80031f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031f6:	81a3      	strheq	r3, [r4, #12]
 80031f8:	bf18      	it	ne
 80031fa:	81a3      	strhne	r3, [r4, #12]
 80031fc:	bd10      	pop	{r4, pc}

080031fe <__sclose>:
 80031fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003202:	f000 b89d 	b.w	8003340 <_close_r>

08003206 <__swbuf_r>:
 8003206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003208:	460e      	mov	r6, r1
 800320a:	4614      	mov	r4, r2
 800320c:	4605      	mov	r5, r0
 800320e:	b118      	cbz	r0, 8003218 <__swbuf_r+0x12>
 8003210:	6a03      	ldr	r3, [r0, #32]
 8003212:	b90b      	cbnz	r3, 8003218 <__swbuf_r+0x12>
 8003214:	f7ff ff0e 	bl	8003034 <__sinit>
 8003218:	69a3      	ldr	r3, [r4, #24]
 800321a:	60a3      	str	r3, [r4, #8]
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	071a      	lsls	r2, r3, #28
 8003220:	d501      	bpl.n	8003226 <__swbuf_r+0x20>
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	b943      	cbnz	r3, 8003238 <__swbuf_r+0x32>
 8003226:	4621      	mov	r1, r4
 8003228:	4628      	mov	r0, r5
 800322a:	f000 f82b 	bl	8003284 <__swsetup_r>
 800322e:	b118      	cbz	r0, 8003238 <__swbuf_r+0x32>
 8003230:	f04f 37ff 	mov.w	r7, #4294967295
 8003234:	4638      	mov	r0, r7
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	6922      	ldr	r2, [r4, #16]
 800323c:	1a98      	subs	r0, r3, r2
 800323e:	6963      	ldr	r3, [r4, #20]
 8003240:	b2f6      	uxtb	r6, r6
 8003242:	4283      	cmp	r3, r0
 8003244:	4637      	mov	r7, r6
 8003246:	dc05      	bgt.n	8003254 <__swbuf_r+0x4e>
 8003248:	4621      	mov	r1, r4
 800324a:	4628      	mov	r0, r5
 800324c:	f000 fd38 	bl	8003cc0 <_fflush_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	d1ed      	bne.n	8003230 <__swbuf_r+0x2a>
 8003254:	68a3      	ldr	r3, [r4, #8]
 8003256:	3b01      	subs	r3, #1
 8003258:	60a3      	str	r3, [r4, #8]
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	6022      	str	r2, [r4, #0]
 8003260:	701e      	strb	r6, [r3, #0]
 8003262:	6962      	ldr	r2, [r4, #20]
 8003264:	1c43      	adds	r3, r0, #1
 8003266:	429a      	cmp	r2, r3
 8003268:	d004      	beq.n	8003274 <__swbuf_r+0x6e>
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	07db      	lsls	r3, r3, #31
 800326e:	d5e1      	bpl.n	8003234 <__swbuf_r+0x2e>
 8003270:	2e0a      	cmp	r6, #10
 8003272:	d1df      	bne.n	8003234 <__swbuf_r+0x2e>
 8003274:	4621      	mov	r1, r4
 8003276:	4628      	mov	r0, r5
 8003278:	f000 fd22 	bl	8003cc0 <_fflush_r>
 800327c:	2800      	cmp	r0, #0
 800327e:	d0d9      	beq.n	8003234 <__swbuf_r+0x2e>
 8003280:	e7d6      	b.n	8003230 <__swbuf_r+0x2a>
	...

08003284 <__swsetup_r>:
 8003284:	b538      	push	{r3, r4, r5, lr}
 8003286:	4b29      	ldr	r3, [pc, #164]	@ (800332c <__swsetup_r+0xa8>)
 8003288:	4605      	mov	r5, r0
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	460c      	mov	r4, r1
 800328e:	b118      	cbz	r0, 8003298 <__swsetup_r+0x14>
 8003290:	6a03      	ldr	r3, [r0, #32]
 8003292:	b90b      	cbnz	r3, 8003298 <__swsetup_r+0x14>
 8003294:	f7ff fece 	bl	8003034 <__sinit>
 8003298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800329c:	0719      	lsls	r1, r3, #28
 800329e:	d422      	bmi.n	80032e6 <__swsetup_r+0x62>
 80032a0:	06da      	lsls	r2, r3, #27
 80032a2:	d407      	bmi.n	80032b4 <__swsetup_r+0x30>
 80032a4:	2209      	movs	r2, #9
 80032a6:	602a      	str	r2, [r5, #0]
 80032a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295
 80032b2:	e033      	b.n	800331c <__swsetup_r+0x98>
 80032b4:	0758      	lsls	r0, r3, #29
 80032b6:	d512      	bpl.n	80032de <__swsetup_r+0x5a>
 80032b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032ba:	b141      	cbz	r1, 80032ce <__swsetup_r+0x4a>
 80032bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032c0:	4299      	cmp	r1, r3
 80032c2:	d002      	beq.n	80032ca <__swsetup_r+0x46>
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f8af 	bl	8003428 <_free_r>
 80032ca:	2300      	movs	r3, #0
 80032cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f043 0308 	orr.w	r3, r3, #8
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	b94b      	cbnz	r3, 80032fe <__swsetup_r+0x7a>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032f4:	d003      	beq.n	80032fe <__swsetup_r+0x7a>
 80032f6:	4621      	mov	r1, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 fd2f 	bl	8003d5c <__smakebuf_r>
 80032fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003302:	f013 0201 	ands.w	r2, r3, #1
 8003306:	d00a      	beq.n	800331e <__swsetup_r+0x9a>
 8003308:	2200      	movs	r2, #0
 800330a:	60a2      	str	r2, [r4, #8]
 800330c:	6962      	ldr	r2, [r4, #20]
 800330e:	4252      	negs	r2, r2
 8003310:	61a2      	str	r2, [r4, #24]
 8003312:	6922      	ldr	r2, [r4, #16]
 8003314:	b942      	cbnz	r2, 8003328 <__swsetup_r+0xa4>
 8003316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800331a:	d1c5      	bne.n	80032a8 <__swsetup_r+0x24>
 800331c:	bd38      	pop	{r3, r4, r5, pc}
 800331e:	0799      	lsls	r1, r3, #30
 8003320:	bf58      	it	pl
 8003322:	6962      	ldrpl	r2, [r4, #20]
 8003324:	60a2      	str	r2, [r4, #8]
 8003326:	e7f4      	b.n	8003312 <__swsetup_r+0x8e>
 8003328:	2000      	movs	r0, #0
 800332a:	e7f7      	b.n	800331c <__swsetup_r+0x98>
 800332c:	20000018 	.word	0x20000018

08003330 <memset>:
 8003330:	4402      	add	r2, r0
 8003332:	4603      	mov	r3, r0
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	f803 1b01 	strb.w	r1, [r3], #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <_close_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d06      	ldr	r5, [pc, #24]	@ (800335c <_close_r+0x1c>)
 8003344:	2300      	movs	r3, #0
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd fdcd 	bl	8000eea <_close>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_close_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_close_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	2000025c 	.word	0x2000025c

08003360 <_lseek_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4d07      	ldr	r5, [pc, #28]	@ (8003380 <_lseek_r+0x20>)
 8003364:	4604      	mov	r4, r0
 8003366:	4608      	mov	r0, r1
 8003368:	4611      	mov	r1, r2
 800336a:	2200      	movs	r2, #0
 800336c:	602a      	str	r2, [r5, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f7fd fde2 	bl	8000f38 <_lseek>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_lseek_r+0x1e>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	b103      	cbz	r3, 800337e <_lseek_r+0x1e>
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	2000025c 	.word	0x2000025c

08003384 <_read_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4d07      	ldr	r5, [pc, #28]	@ (80033a4 <_read_r+0x20>)
 8003388:	4604      	mov	r4, r0
 800338a:	4608      	mov	r0, r1
 800338c:	4611      	mov	r1, r2
 800338e:	2200      	movs	r2, #0
 8003390:	602a      	str	r2, [r5, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	f7fd fd70 	bl	8000e78 <_read>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d102      	bne.n	80033a2 <_read_r+0x1e>
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	b103      	cbz	r3, 80033a2 <_read_r+0x1e>
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
 80033a4:	2000025c 	.word	0x2000025c

080033a8 <_write_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4d07      	ldr	r5, [pc, #28]	@ (80033c8 <_write_r+0x20>)
 80033ac:	4604      	mov	r4, r0
 80033ae:	4608      	mov	r0, r1
 80033b0:	4611      	mov	r1, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	602a      	str	r2, [r5, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7fd fd7b 	bl	8000eb2 <_write>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d102      	bne.n	80033c6 <_write_r+0x1e>
 80033c0:	682b      	ldr	r3, [r5, #0]
 80033c2:	b103      	cbz	r3, 80033c6 <_write_r+0x1e>
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	2000025c 	.word	0x2000025c

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	@ (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000018 	.word	0x20000018

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	4d0d      	ldr	r5, [pc, #52]	@ (8003410 <__libc_init_array+0x38>)
 80033dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003414 <__libc_init_array+0x3c>)
 80033de:	1b64      	subs	r4, r4, r5
 80033e0:	10a4      	asrs	r4, r4, #2
 80033e2:	2600      	movs	r6, #0
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003418 <__libc_init_array+0x40>)
 80033ea:	4c0c      	ldr	r4, [pc, #48]	@ (800341c <__libc_init_array+0x44>)
 80033ec:	f000 fd24 	bl	8003e38 <_init>
 80033f0:	1b64      	subs	r4, r4, r5
 80033f2:	10a4      	asrs	r4, r4, #2
 80033f4:	2600      	movs	r6, #0
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	08003f04 	.word	0x08003f04
 8003414:	08003f04 	.word	0x08003f04
 8003418:	08003f04 	.word	0x08003f04
 800341c:	08003f08 	.word	0x08003f08

08003420 <__retarget_lock_init_recursive>:
 8003420:	4770      	bx	lr

08003422 <__retarget_lock_acquire_recursive>:
 8003422:	4770      	bx	lr

08003424 <__retarget_lock_release_recursive>:
 8003424:	4770      	bx	lr
	...

08003428 <_free_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4605      	mov	r5, r0
 800342c:	2900      	cmp	r1, #0
 800342e:	d041      	beq.n	80034b4 <_free_r+0x8c>
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f0c      	subs	r4, r1, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfb8      	it	lt
 800343a:	18e4      	addlt	r4, r4, r3
 800343c:	f000 f8e0 	bl	8003600 <__malloc_lock>
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <_free_r+0x90>)
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	b933      	cbnz	r3, 8003454 <_free_r+0x2c>
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	6014      	str	r4, [r2, #0]
 800344a:	4628      	mov	r0, r5
 800344c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003450:	f000 b8dc 	b.w	800360c <__malloc_unlock>
 8003454:	42a3      	cmp	r3, r4
 8003456:	d908      	bls.n	800346a <_free_r+0x42>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	1821      	adds	r1, r4, r0
 800345c:	428b      	cmp	r3, r1
 800345e:	bf01      	itttt	eq
 8003460:	6819      	ldreq	r1, [r3, #0]
 8003462:	685b      	ldreq	r3, [r3, #4]
 8003464:	1809      	addeq	r1, r1, r0
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	e7ed      	b.n	8003446 <_free_r+0x1e>
 800346a:	461a      	mov	r2, r3
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b10b      	cbz	r3, 8003474 <_free_r+0x4c>
 8003470:	42a3      	cmp	r3, r4
 8003472:	d9fa      	bls.n	800346a <_free_r+0x42>
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	1850      	adds	r0, r2, r1
 8003478:	42a0      	cmp	r0, r4
 800347a:	d10b      	bne.n	8003494 <_free_r+0x6c>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	4401      	add	r1, r0
 8003480:	1850      	adds	r0, r2, r1
 8003482:	4283      	cmp	r3, r0
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	d1e0      	bne.n	800344a <_free_r+0x22>
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	6053      	str	r3, [r2, #4]
 800348e:	4408      	add	r0, r1
 8003490:	6010      	str	r0, [r2, #0]
 8003492:	e7da      	b.n	800344a <_free_r+0x22>
 8003494:	d902      	bls.n	800349c <_free_r+0x74>
 8003496:	230c      	movs	r3, #12
 8003498:	602b      	str	r3, [r5, #0]
 800349a:	e7d6      	b.n	800344a <_free_r+0x22>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	1821      	adds	r1, r4, r0
 80034a0:	428b      	cmp	r3, r1
 80034a2:	bf04      	itt	eq
 80034a4:	6819      	ldreq	r1, [r3, #0]
 80034a6:	685b      	ldreq	r3, [r3, #4]
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	bf04      	itt	eq
 80034ac:	1809      	addeq	r1, r1, r0
 80034ae:	6021      	streq	r1, [r4, #0]
 80034b0:	6054      	str	r4, [r2, #4]
 80034b2:	e7ca      	b.n	800344a <_free_r+0x22>
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
 80034b6:	bf00      	nop
 80034b8:	20000268 	.word	0x20000268

080034bc <sbrk_aligned>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4e0f      	ldr	r6, [pc, #60]	@ (80034fc <sbrk_aligned+0x40>)
 80034c0:	460c      	mov	r4, r1
 80034c2:	6831      	ldr	r1, [r6, #0]
 80034c4:	4605      	mov	r5, r0
 80034c6:	b911      	cbnz	r1, 80034ce <sbrk_aligned+0x12>
 80034c8:	f000 fca6 	bl	8003e18 <_sbrk_r>
 80034cc:	6030      	str	r0, [r6, #0]
 80034ce:	4621      	mov	r1, r4
 80034d0:	4628      	mov	r0, r5
 80034d2:	f000 fca1 	bl	8003e18 <_sbrk_r>
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	d103      	bne.n	80034e2 <sbrk_aligned+0x26>
 80034da:	f04f 34ff 	mov.w	r4, #4294967295
 80034de:	4620      	mov	r0, r4
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	1cc4      	adds	r4, r0, #3
 80034e4:	f024 0403 	bic.w	r4, r4, #3
 80034e8:	42a0      	cmp	r0, r4
 80034ea:	d0f8      	beq.n	80034de <sbrk_aligned+0x22>
 80034ec:	1a21      	subs	r1, r4, r0
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 fc92 	bl	8003e18 <_sbrk_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1f2      	bne.n	80034de <sbrk_aligned+0x22>
 80034f8:	e7ef      	b.n	80034da <sbrk_aligned+0x1e>
 80034fa:	bf00      	nop
 80034fc:	20000264 	.word	0x20000264

08003500 <_malloc_r>:
 8003500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003504:	1ccd      	adds	r5, r1, #3
 8003506:	f025 0503 	bic.w	r5, r5, #3
 800350a:	3508      	adds	r5, #8
 800350c:	2d0c      	cmp	r5, #12
 800350e:	bf38      	it	cc
 8003510:	250c      	movcc	r5, #12
 8003512:	2d00      	cmp	r5, #0
 8003514:	4606      	mov	r6, r0
 8003516:	db01      	blt.n	800351c <_malloc_r+0x1c>
 8003518:	42a9      	cmp	r1, r5
 800351a:	d904      	bls.n	8003526 <_malloc_r+0x26>
 800351c:	230c      	movs	r3, #12
 800351e:	6033      	str	r3, [r6, #0]
 8003520:	2000      	movs	r0, #0
 8003522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003526:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035fc <_malloc_r+0xfc>
 800352a:	f000 f869 	bl	8003600 <__malloc_lock>
 800352e:	f8d8 3000 	ldr.w	r3, [r8]
 8003532:	461c      	mov	r4, r3
 8003534:	bb44      	cbnz	r4, 8003588 <_malloc_r+0x88>
 8003536:	4629      	mov	r1, r5
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff ffbf 	bl	80034bc <sbrk_aligned>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	4604      	mov	r4, r0
 8003542:	d158      	bne.n	80035f6 <_malloc_r+0xf6>
 8003544:	f8d8 4000 	ldr.w	r4, [r8]
 8003548:	4627      	mov	r7, r4
 800354a:	2f00      	cmp	r7, #0
 800354c:	d143      	bne.n	80035d6 <_malloc_r+0xd6>
 800354e:	2c00      	cmp	r4, #0
 8003550:	d04b      	beq.n	80035ea <_malloc_r+0xea>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	4639      	mov	r1, r7
 8003556:	4630      	mov	r0, r6
 8003558:	eb04 0903 	add.w	r9, r4, r3
 800355c:	f000 fc5c 	bl	8003e18 <_sbrk_r>
 8003560:	4581      	cmp	r9, r0
 8003562:	d142      	bne.n	80035ea <_malloc_r+0xea>
 8003564:	6821      	ldr	r1, [r4, #0]
 8003566:	1a6d      	subs	r5, r5, r1
 8003568:	4629      	mov	r1, r5
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff ffa6 	bl	80034bc <sbrk_aligned>
 8003570:	3001      	adds	r0, #1
 8003572:	d03a      	beq.n	80035ea <_malloc_r+0xea>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	442b      	add	r3, r5
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	f8d8 3000 	ldr.w	r3, [r8]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	bb62      	cbnz	r2, 80035dc <_malloc_r+0xdc>
 8003582:	f8c8 7000 	str.w	r7, [r8]
 8003586:	e00f      	b.n	80035a8 <_malloc_r+0xa8>
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	1b52      	subs	r2, r2, r5
 800358c:	d420      	bmi.n	80035d0 <_malloc_r+0xd0>
 800358e:	2a0b      	cmp	r2, #11
 8003590:	d917      	bls.n	80035c2 <_malloc_r+0xc2>
 8003592:	1961      	adds	r1, r4, r5
 8003594:	42a3      	cmp	r3, r4
 8003596:	6025      	str	r5, [r4, #0]
 8003598:	bf18      	it	ne
 800359a:	6059      	strne	r1, [r3, #4]
 800359c:	6863      	ldr	r3, [r4, #4]
 800359e:	bf08      	it	eq
 80035a0:	f8c8 1000 	streq.w	r1, [r8]
 80035a4:	5162      	str	r2, [r4, r5]
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	4630      	mov	r0, r6
 80035aa:	f000 f82f 	bl	800360c <__malloc_unlock>
 80035ae:	f104 000b 	add.w	r0, r4, #11
 80035b2:	1d23      	adds	r3, r4, #4
 80035b4:	f020 0007 	bic.w	r0, r0, #7
 80035b8:	1ac2      	subs	r2, r0, r3
 80035ba:	bf1c      	itt	ne
 80035bc:	1a1b      	subne	r3, r3, r0
 80035be:	50a3      	strne	r3, [r4, r2]
 80035c0:	e7af      	b.n	8003522 <_malloc_r+0x22>
 80035c2:	6862      	ldr	r2, [r4, #4]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	bf0c      	ite	eq
 80035c8:	f8c8 2000 	streq.w	r2, [r8]
 80035cc:	605a      	strne	r2, [r3, #4]
 80035ce:	e7eb      	b.n	80035a8 <_malloc_r+0xa8>
 80035d0:	4623      	mov	r3, r4
 80035d2:	6864      	ldr	r4, [r4, #4]
 80035d4:	e7ae      	b.n	8003534 <_malloc_r+0x34>
 80035d6:	463c      	mov	r4, r7
 80035d8:	687f      	ldr	r7, [r7, #4]
 80035da:	e7b6      	b.n	800354a <_malloc_r+0x4a>
 80035dc:	461a      	mov	r2, r3
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	d1fb      	bne.n	80035dc <_malloc_r+0xdc>
 80035e4:	2300      	movs	r3, #0
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e7de      	b.n	80035a8 <_malloc_r+0xa8>
 80035ea:	230c      	movs	r3, #12
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	4630      	mov	r0, r6
 80035f0:	f000 f80c 	bl	800360c <__malloc_unlock>
 80035f4:	e794      	b.n	8003520 <_malloc_r+0x20>
 80035f6:	6005      	str	r5, [r0, #0]
 80035f8:	e7d6      	b.n	80035a8 <_malloc_r+0xa8>
 80035fa:	bf00      	nop
 80035fc:	20000268 	.word	0x20000268

08003600 <__malloc_lock>:
 8003600:	4801      	ldr	r0, [pc, #4]	@ (8003608 <__malloc_lock+0x8>)
 8003602:	f7ff bf0e 	b.w	8003422 <__retarget_lock_acquire_recursive>
 8003606:	bf00      	nop
 8003608:	20000260 	.word	0x20000260

0800360c <__malloc_unlock>:
 800360c:	4801      	ldr	r0, [pc, #4]	@ (8003614 <__malloc_unlock+0x8>)
 800360e:	f7ff bf09 	b.w	8003424 <__retarget_lock_release_recursive>
 8003612:	bf00      	nop
 8003614:	20000260 	.word	0x20000260

08003618 <__sfputc_r>:
 8003618:	6893      	ldr	r3, [r2, #8]
 800361a:	3b01      	subs	r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	b410      	push	{r4}
 8003620:	6093      	str	r3, [r2, #8]
 8003622:	da08      	bge.n	8003636 <__sfputc_r+0x1e>
 8003624:	6994      	ldr	r4, [r2, #24]
 8003626:	42a3      	cmp	r3, r4
 8003628:	db01      	blt.n	800362e <__sfputc_r+0x16>
 800362a:	290a      	cmp	r1, #10
 800362c:	d103      	bne.n	8003636 <__sfputc_r+0x1e>
 800362e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003632:	f7ff bde8 	b.w	8003206 <__swbuf_r>
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	1c58      	adds	r0, r3, #1
 800363a:	6010      	str	r0, [r2, #0]
 800363c:	7019      	strb	r1, [r3, #0]
 800363e:	4608      	mov	r0, r1
 8003640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003644:	4770      	bx	lr

08003646 <__sfputs_r>:
 8003646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003648:	4606      	mov	r6, r0
 800364a:	460f      	mov	r7, r1
 800364c:	4614      	mov	r4, r2
 800364e:	18d5      	adds	r5, r2, r3
 8003650:	42ac      	cmp	r4, r5
 8003652:	d101      	bne.n	8003658 <__sfputs_r+0x12>
 8003654:	2000      	movs	r0, #0
 8003656:	e007      	b.n	8003668 <__sfputs_r+0x22>
 8003658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365c:	463a      	mov	r2, r7
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff ffda 	bl	8003618 <__sfputc_r>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d1f3      	bne.n	8003650 <__sfputs_r+0xa>
 8003668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800366c <_vfiprintf_r>:
 800366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003670:	460d      	mov	r5, r1
 8003672:	b09d      	sub	sp, #116	@ 0x74
 8003674:	4614      	mov	r4, r2
 8003676:	4698      	mov	r8, r3
 8003678:	4606      	mov	r6, r0
 800367a:	b118      	cbz	r0, 8003684 <_vfiprintf_r+0x18>
 800367c:	6a03      	ldr	r3, [r0, #32]
 800367e:	b90b      	cbnz	r3, 8003684 <_vfiprintf_r+0x18>
 8003680:	f7ff fcd8 	bl	8003034 <__sinit>
 8003684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003686:	07d9      	lsls	r1, r3, #31
 8003688:	d405      	bmi.n	8003696 <_vfiprintf_r+0x2a>
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	059a      	lsls	r2, r3, #22
 800368e:	d402      	bmi.n	8003696 <_vfiprintf_r+0x2a>
 8003690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003692:	f7ff fec6 	bl	8003422 <__retarget_lock_acquire_recursive>
 8003696:	89ab      	ldrh	r3, [r5, #12]
 8003698:	071b      	lsls	r3, r3, #28
 800369a:	d501      	bpl.n	80036a0 <_vfiprintf_r+0x34>
 800369c:	692b      	ldr	r3, [r5, #16]
 800369e:	b99b      	cbnz	r3, 80036c8 <_vfiprintf_r+0x5c>
 80036a0:	4629      	mov	r1, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	f7ff fdee 	bl	8003284 <__swsetup_r>
 80036a8:	b170      	cbz	r0, 80036c8 <_vfiprintf_r+0x5c>
 80036aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036ac:	07dc      	lsls	r4, r3, #31
 80036ae:	d504      	bpl.n	80036ba <_vfiprintf_r+0x4e>
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	b01d      	add	sp, #116	@ 0x74
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	89ab      	ldrh	r3, [r5, #12]
 80036bc:	0598      	lsls	r0, r3, #22
 80036be:	d4f7      	bmi.n	80036b0 <_vfiprintf_r+0x44>
 80036c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036c2:	f7ff feaf 	bl	8003424 <__retarget_lock_release_recursive>
 80036c6:	e7f3      	b.n	80036b0 <_vfiprintf_r+0x44>
 80036c8:	2300      	movs	r3, #0
 80036ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80036cc:	2320      	movs	r3, #32
 80036ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036d6:	2330      	movs	r3, #48	@ 0x30
 80036d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003888 <_vfiprintf_r+0x21c>
 80036dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036e0:	f04f 0901 	mov.w	r9, #1
 80036e4:	4623      	mov	r3, r4
 80036e6:	469a      	mov	sl, r3
 80036e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ec:	b10a      	cbz	r2, 80036f2 <_vfiprintf_r+0x86>
 80036ee:	2a25      	cmp	r2, #37	@ 0x25
 80036f0:	d1f9      	bne.n	80036e6 <_vfiprintf_r+0x7a>
 80036f2:	ebba 0b04 	subs.w	fp, sl, r4
 80036f6:	d00b      	beq.n	8003710 <_vfiprintf_r+0xa4>
 80036f8:	465b      	mov	r3, fp
 80036fa:	4622      	mov	r2, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	4630      	mov	r0, r6
 8003700:	f7ff ffa1 	bl	8003646 <__sfputs_r>
 8003704:	3001      	adds	r0, #1
 8003706:	f000 80a7 	beq.w	8003858 <_vfiprintf_r+0x1ec>
 800370a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800370c:	445a      	add	r2, fp
 800370e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003710:	f89a 3000 	ldrb.w	r3, [sl]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 809f 	beq.w	8003858 <_vfiprintf_r+0x1ec>
 800371a:	2300      	movs	r3, #0
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003724:	f10a 0a01 	add.w	sl, sl, #1
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	9307      	str	r3, [sp, #28]
 800372c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003730:	931a      	str	r3, [sp, #104]	@ 0x68
 8003732:	4654      	mov	r4, sl
 8003734:	2205      	movs	r2, #5
 8003736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800373a:	4853      	ldr	r0, [pc, #332]	@ (8003888 <_vfiprintf_r+0x21c>)
 800373c:	f7fc fd58 	bl	80001f0 <memchr>
 8003740:	9a04      	ldr	r2, [sp, #16]
 8003742:	b9d8      	cbnz	r0, 800377c <_vfiprintf_r+0x110>
 8003744:	06d1      	lsls	r1, r2, #27
 8003746:	bf44      	itt	mi
 8003748:	2320      	movmi	r3, #32
 800374a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800374e:	0713      	lsls	r3, r2, #28
 8003750:	bf44      	itt	mi
 8003752:	232b      	movmi	r3, #43	@ 0x2b
 8003754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003758:	f89a 3000 	ldrb.w	r3, [sl]
 800375c:	2b2a      	cmp	r3, #42	@ 0x2a
 800375e:	d015      	beq.n	800378c <_vfiprintf_r+0x120>
 8003760:	9a07      	ldr	r2, [sp, #28]
 8003762:	4654      	mov	r4, sl
 8003764:	2000      	movs	r0, #0
 8003766:	f04f 0c0a 	mov.w	ip, #10
 800376a:	4621      	mov	r1, r4
 800376c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003770:	3b30      	subs	r3, #48	@ 0x30
 8003772:	2b09      	cmp	r3, #9
 8003774:	d94b      	bls.n	800380e <_vfiprintf_r+0x1a2>
 8003776:	b1b0      	cbz	r0, 80037a6 <_vfiprintf_r+0x13a>
 8003778:	9207      	str	r2, [sp, #28]
 800377a:	e014      	b.n	80037a6 <_vfiprintf_r+0x13a>
 800377c:	eba0 0308 	sub.w	r3, r0, r8
 8003780:	fa09 f303 	lsl.w	r3, r9, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	46a2      	mov	sl, r4
 800378a:	e7d2      	b.n	8003732 <_vfiprintf_r+0xc6>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	1d19      	adds	r1, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	9103      	str	r1, [sp, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfbb      	ittet	lt
 8003798:	425b      	neglt	r3, r3
 800379a:	f042 0202 	orrlt.w	r2, r2, #2
 800379e:	9307      	strge	r3, [sp, #28]
 80037a0:	9307      	strlt	r3, [sp, #28]
 80037a2:	bfb8      	it	lt
 80037a4:	9204      	strlt	r2, [sp, #16]
 80037a6:	7823      	ldrb	r3, [r4, #0]
 80037a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80037aa:	d10a      	bne.n	80037c2 <_vfiprintf_r+0x156>
 80037ac:	7863      	ldrb	r3, [r4, #1]
 80037ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b0:	d132      	bne.n	8003818 <_vfiprintf_r+0x1ac>
 80037b2:	9b03      	ldr	r3, [sp, #12]
 80037b4:	1d1a      	adds	r2, r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	9203      	str	r2, [sp, #12]
 80037ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037be:	3402      	adds	r4, #2
 80037c0:	9305      	str	r3, [sp, #20]
 80037c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003898 <_vfiprintf_r+0x22c>
 80037c6:	7821      	ldrb	r1, [r4, #0]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4650      	mov	r0, sl
 80037cc:	f7fc fd10 	bl	80001f0 <memchr>
 80037d0:	b138      	cbz	r0, 80037e2 <_vfiprintf_r+0x176>
 80037d2:	9b04      	ldr	r3, [sp, #16]
 80037d4:	eba0 000a 	sub.w	r0, r0, sl
 80037d8:	2240      	movs	r2, #64	@ 0x40
 80037da:	4082      	lsls	r2, r0
 80037dc:	4313      	orrs	r3, r2
 80037de:	3401      	adds	r4, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e6:	4829      	ldr	r0, [pc, #164]	@ (800388c <_vfiprintf_r+0x220>)
 80037e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037ec:	2206      	movs	r2, #6
 80037ee:	f7fc fcff 	bl	80001f0 <memchr>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d03f      	beq.n	8003876 <_vfiprintf_r+0x20a>
 80037f6:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <_vfiprintf_r+0x224>)
 80037f8:	bb1b      	cbnz	r3, 8003842 <_vfiprintf_r+0x1d6>
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	3307      	adds	r3, #7
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	3308      	adds	r3, #8
 8003804:	9303      	str	r3, [sp, #12]
 8003806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003808:	443b      	add	r3, r7
 800380a:	9309      	str	r3, [sp, #36]	@ 0x24
 800380c:	e76a      	b.n	80036e4 <_vfiprintf_r+0x78>
 800380e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003812:	460c      	mov	r4, r1
 8003814:	2001      	movs	r0, #1
 8003816:	e7a8      	b.n	800376a <_vfiprintf_r+0xfe>
 8003818:	2300      	movs	r3, #0
 800381a:	3401      	adds	r4, #1
 800381c:	9305      	str	r3, [sp, #20]
 800381e:	4619      	mov	r1, r3
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4620      	mov	r0, r4
 8003826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800382a:	3a30      	subs	r2, #48	@ 0x30
 800382c:	2a09      	cmp	r2, #9
 800382e:	d903      	bls.n	8003838 <_vfiprintf_r+0x1cc>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0c6      	beq.n	80037c2 <_vfiprintf_r+0x156>
 8003834:	9105      	str	r1, [sp, #20]
 8003836:	e7c4      	b.n	80037c2 <_vfiprintf_r+0x156>
 8003838:	fb0c 2101 	mla	r1, ip, r1, r2
 800383c:	4604      	mov	r4, r0
 800383e:	2301      	movs	r3, #1
 8003840:	e7f0      	b.n	8003824 <_vfiprintf_r+0x1b8>
 8003842:	ab03      	add	r3, sp, #12
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	462a      	mov	r2, r5
 8003848:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <_vfiprintf_r+0x228>)
 800384a:	a904      	add	r1, sp, #16
 800384c:	4630      	mov	r0, r6
 800384e:	f3af 8000 	nop.w
 8003852:	4607      	mov	r7, r0
 8003854:	1c78      	adds	r0, r7, #1
 8003856:	d1d6      	bne.n	8003806 <_vfiprintf_r+0x19a>
 8003858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800385a:	07d9      	lsls	r1, r3, #31
 800385c:	d405      	bmi.n	800386a <_vfiprintf_r+0x1fe>
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	059a      	lsls	r2, r3, #22
 8003862:	d402      	bmi.n	800386a <_vfiprintf_r+0x1fe>
 8003864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003866:	f7ff fddd 	bl	8003424 <__retarget_lock_release_recursive>
 800386a:	89ab      	ldrh	r3, [r5, #12]
 800386c:	065b      	lsls	r3, r3, #25
 800386e:	f53f af1f 	bmi.w	80036b0 <_vfiprintf_r+0x44>
 8003872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003874:	e71e      	b.n	80036b4 <_vfiprintf_r+0x48>
 8003876:	ab03      	add	r3, sp, #12
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	462a      	mov	r2, r5
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <_vfiprintf_r+0x228>)
 800387e:	a904      	add	r1, sp, #16
 8003880:	4630      	mov	r0, r6
 8003882:	f000 f879 	bl	8003978 <_printf_i>
 8003886:	e7e4      	b.n	8003852 <_vfiprintf_r+0x1e6>
 8003888:	08003ec8 	.word	0x08003ec8
 800388c:	08003ed2 	.word	0x08003ed2
 8003890:	00000000 	.word	0x00000000
 8003894:	08003647 	.word	0x08003647
 8003898:	08003ece 	.word	0x08003ece

0800389c <_printf_common>:
 800389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	4616      	mov	r6, r2
 80038a2:	4698      	mov	r8, r3
 80038a4:	688a      	ldr	r2, [r1, #8]
 80038a6:	690b      	ldr	r3, [r1, #16]
 80038a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bfb8      	it	lt
 80038b0:	4613      	movlt	r3, r2
 80038b2:	6033      	str	r3, [r6, #0]
 80038b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038b8:	4607      	mov	r7, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	b10a      	cbz	r2, 80038c2 <_printf_common+0x26>
 80038be:	3301      	adds	r3, #1
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	0699      	lsls	r1, r3, #26
 80038c6:	bf42      	ittt	mi
 80038c8:	6833      	ldrmi	r3, [r6, #0]
 80038ca:	3302      	addmi	r3, #2
 80038cc:	6033      	strmi	r3, [r6, #0]
 80038ce:	6825      	ldr	r5, [r4, #0]
 80038d0:	f015 0506 	ands.w	r5, r5, #6
 80038d4:	d106      	bne.n	80038e4 <_printf_common+0x48>
 80038d6:	f104 0a19 	add.w	sl, r4, #25
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	6832      	ldr	r2, [r6, #0]
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	42ab      	cmp	r3, r5
 80038e2:	dc26      	bgt.n	8003932 <_printf_common+0x96>
 80038e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	3b00      	subs	r3, #0
 80038ec:	bf18      	it	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	0692      	lsls	r2, r2, #26
 80038f2:	d42b      	bmi.n	800394c <_printf_common+0xb0>
 80038f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038f8:	4641      	mov	r1, r8
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c8      	blx	r9
 80038fe:	3001      	adds	r0, #1
 8003900:	d01e      	beq.n	8003940 <_printf_common+0xa4>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	f003 0306 	and.w	r3, r3, #6
 800390a:	2b04      	cmp	r3, #4
 800390c:	bf02      	ittt	eq
 800390e:	68e5      	ldreq	r5, [r4, #12]
 8003910:	6833      	ldreq	r3, [r6, #0]
 8003912:	1aed      	subeq	r5, r5, r3
 8003914:	68a3      	ldr	r3, [r4, #8]
 8003916:	bf0c      	ite	eq
 8003918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800391c:	2500      	movne	r5, #0
 800391e:	4293      	cmp	r3, r2
 8003920:	bfc4      	itt	gt
 8003922:	1a9b      	subgt	r3, r3, r2
 8003924:	18ed      	addgt	r5, r5, r3
 8003926:	2600      	movs	r6, #0
 8003928:	341a      	adds	r4, #26
 800392a:	42b5      	cmp	r5, r6
 800392c:	d11a      	bne.n	8003964 <_printf_common+0xc8>
 800392e:	2000      	movs	r0, #0
 8003930:	e008      	b.n	8003944 <_printf_common+0xa8>
 8003932:	2301      	movs	r3, #1
 8003934:	4652      	mov	r2, sl
 8003936:	4641      	mov	r1, r8
 8003938:	4638      	mov	r0, r7
 800393a:	47c8      	blx	r9
 800393c:	3001      	adds	r0, #1
 800393e:	d103      	bne.n	8003948 <_printf_common+0xac>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	3501      	adds	r5, #1
 800394a:	e7c6      	b.n	80038da <_printf_common+0x3e>
 800394c:	18e1      	adds	r1, r4, r3
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	2030      	movs	r0, #48	@ 0x30
 8003952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003956:	4422      	add	r2, r4
 8003958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800395c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003960:	3302      	adds	r3, #2
 8003962:	e7c7      	b.n	80038f4 <_printf_common+0x58>
 8003964:	2301      	movs	r3, #1
 8003966:	4622      	mov	r2, r4
 8003968:	4641      	mov	r1, r8
 800396a:	4638      	mov	r0, r7
 800396c:	47c8      	blx	r9
 800396e:	3001      	adds	r0, #1
 8003970:	d0e6      	beq.n	8003940 <_printf_common+0xa4>
 8003972:	3601      	adds	r6, #1
 8003974:	e7d9      	b.n	800392a <_printf_common+0x8e>
	...

08003978 <_printf_i>:
 8003978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	7e0f      	ldrb	r7, [r1, #24]
 800397e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003980:	2f78      	cmp	r7, #120	@ 0x78
 8003982:	4691      	mov	r9, r2
 8003984:	4680      	mov	r8, r0
 8003986:	460c      	mov	r4, r1
 8003988:	469a      	mov	sl, r3
 800398a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800398e:	d807      	bhi.n	80039a0 <_printf_i+0x28>
 8003990:	2f62      	cmp	r7, #98	@ 0x62
 8003992:	d80a      	bhi.n	80039aa <_printf_i+0x32>
 8003994:	2f00      	cmp	r7, #0
 8003996:	f000 80d2 	beq.w	8003b3e <_printf_i+0x1c6>
 800399a:	2f58      	cmp	r7, #88	@ 0x58
 800399c:	f000 80b9 	beq.w	8003b12 <_printf_i+0x19a>
 80039a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039a8:	e03a      	b.n	8003a20 <_printf_i+0xa8>
 80039aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039ae:	2b15      	cmp	r3, #21
 80039b0:	d8f6      	bhi.n	80039a0 <_printf_i+0x28>
 80039b2:	a101      	add	r1, pc, #4	@ (adr r1, 80039b8 <_printf_i+0x40>)
 80039b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b8:	08003a11 	.word	0x08003a11
 80039bc:	08003a25 	.word	0x08003a25
 80039c0:	080039a1 	.word	0x080039a1
 80039c4:	080039a1 	.word	0x080039a1
 80039c8:	080039a1 	.word	0x080039a1
 80039cc:	080039a1 	.word	0x080039a1
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	080039a1 	.word	0x080039a1
 80039d8:	080039a1 	.word	0x080039a1
 80039dc:	080039a1 	.word	0x080039a1
 80039e0:	080039a1 	.word	0x080039a1
 80039e4:	08003b25 	.word	0x08003b25
 80039e8:	08003a4f 	.word	0x08003a4f
 80039ec:	08003adf 	.word	0x08003adf
 80039f0:	080039a1 	.word	0x080039a1
 80039f4:	080039a1 	.word	0x080039a1
 80039f8:	08003b47 	.word	0x08003b47
 80039fc:	080039a1 	.word	0x080039a1
 8003a00:	08003a4f 	.word	0x08003a4f
 8003a04:	080039a1 	.word	0x080039a1
 8003a08:	080039a1 	.word	0x080039a1
 8003a0c:	08003ae7 	.word	0x08003ae7
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6032      	str	r2, [r6, #0]
 8003a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a20:	2301      	movs	r3, #1
 8003a22:	e09d      	b.n	8003b60 <_printf_i+0x1e8>
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	1d19      	adds	r1, r3, #4
 8003a2a:	6031      	str	r1, [r6, #0]
 8003a2c:	0606      	lsls	r6, r0, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0xbc>
 8003a30:	681d      	ldr	r5, [r3, #0]
 8003a32:	e003      	b.n	8003a3c <_printf_i+0xc4>
 8003a34:	0645      	lsls	r5, r0, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0xb8>
 8003a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	da03      	bge.n	8003a48 <_printf_i+0xd0>
 8003a40:	232d      	movs	r3, #45	@ 0x2d
 8003a42:	426d      	negs	r5, r5
 8003a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a48:	4859      	ldr	r0, [pc, #356]	@ (8003bb0 <_printf_i+0x238>)
 8003a4a:	230a      	movs	r3, #10
 8003a4c:	e011      	b.n	8003a72 <_printf_i+0xfa>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	6833      	ldr	r3, [r6, #0]
 8003a52:	0608      	lsls	r0, r1, #24
 8003a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a58:	d402      	bmi.n	8003a60 <_printf_i+0xe8>
 8003a5a:	0649      	lsls	r1, r1, #25
 8003a5c:	bf48      	it	mi
 8003a5e:	b2ad      	uxthmi	r5, r5
 8003a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a62:	4853      	ldr	r0, [pc, #332]	@ (8003bb0 <_printf_i+0x238>)
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	bf14      	ite	ne
 8003a68:	230a      	movne	r3, #10
 8003a6a:	2308      	moveq	r3, #8
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a72:	6866      	ldr	r6, [r4, #4]
 8003a74:	60a6      	str	r6, [r4, #8]
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	bfa2      	ittt	ge
 8003a7a:	6821      	ldrge	r1, [r4, #0]
 8003a7c:	f021 0104 	bicge.w	r1, r1, #4
 8003a80:	6021      	strge	r1, [r4, #0]
 8003a82:	b90d      	cbnz	r5, 8003a88 <_printf_i+0x110>
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	d04b      	beq.n	8003b20 <_printf_i+0x1a8>
 8003a88:	4616      	mov	r6, r2
 8003a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8003a92:	5dc7      	ldrb	r7, [r0, r7]
 8003a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a98:	462f      	mov	r7, r5
 8003a9a:	42bb      	cmp	r3, r7
 8003a9c:	460d      	mov	r5, r1
 8003a9e:	d9f4      	bls.n	8003a8a <_printf_i+0x112>
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d10b      	bne.n	8003abc <_printf_i+0x144>
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	07df      	lsls	r7, r3, #31
 8003aa8:	d508      	bpl.n	8003abc <_printf_i+0x144>
 8003aaa:	6923      	ldr	r3, [r4, #16]
 8003aac:	6861      	ldr	r1, [r4, #4]
 8003aae:	4299      	cmp	r1, r3
 8003ab0:	bfde      	ittt	le
 8003ab2:	2330      	movle	r3, #48	@ 0x30
 8003ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003abc:	1b92      	subs	r2, r2, r6
 8003abe:	6122      	str	r2, [r4, #16]
 8003ac0:	f8cd a000 	str.w	sl, [sp]
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	aa03      	add	r2, sp, #12
 8003ac8:	4621      	mov	r1, r4
 8003aca:	4640      	mov	r0, r8
 8003acc:	f7ff fee6 	bl	800389c <_printf_common>
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d14a      	bne.n	8003b6a <_printf_i+0x1f2>
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	b004      	add	sp, #16
 8003ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	4833      	ldr	r0, [pc, #204]	@ (8003bb4 <_printf_i+0x23c>)
 8003ae8:	2778      	movs	r7, #120	@ 0x78
 8003aea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	6831      	ldr	r1, [r6, #0]
 8003af2:	061f      	lsls	r7, r3, #24
 8003af4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003af8:	d402      	bmi.n	8003b00 <_printf_i+0x188>
 8003afa:	065f      	lsls	r7, r3, #25
 8003afc:	bf48      	it	mi
 8003afe:	b2ad      	uxthmi	r5, r5
 8003b00:	6031      	str	r1, [r6, #0]
 8003b02:	07d9      	lsls	r1, r3, #31
 8003b04:	bf44      	itt	mi
 8003b06:	f043 0320 	orrmi.w	r3, r3, #32
 8003b0a:	6023      	strmi	r3, [r4, #0]
 8003b0c:	b11d      	cbz	r5, 8003b16 <_printf_i+0x19e>
 8003b0e:	2310      	movs	r3, #16
 8003b10:	e7ac      	b.n	8003a6c <_printf_i+0xf4>
 8003b12:	4827      	ldr	r0, [pc, #156]	@ (8003bb0 <_printf_i+0x238>)
 8003b14:	e7e9      	b.n	8003aea <_printf_i+0x172>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	f023 0320 	bic.w	r3, r3, #32
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	e7f6      	b.n	8003b0e <_printf_i+0x196>
 8003b20:	4616      	mov	r6, r2
 8003b22:	e7bd      	b.n	8003aa0 <_printf_i+0x128>
 8003b24:	6833      	ldr	r3, [r6, #0]
 8003b26:	6825      	ldr	r5, [r4, #0]
 8003b28:	6961      	ldr	r1, [r4, #20]
 8003b2a:	1d18      	adds	r0, r3, #4
 8003b2c:	6030      	str	r0, [r6, #0]
 8003b2e:	062e      	lsls	r6, r5, #24
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	d501      	bpl.n	8003b38 <_printf_i+0x1c0>
 8003b34:	6019      	str	r1, [r3, #0]
 8003b36:	e002      	b.n	8003b3e <_printf_i+0x1c6>
 8003b38:	0668      	lsls	r0, r5, #25
 8003b3a:	d5fb      	bpl.n	8003b34 <_printf_i+0x1bc>
 8003b3c:	8019      	strh	r1, [r3, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	6123      	str	r3, [r4, #16]
 8003b42:	4616      	mov	r6, r2
 8003b44:	e7bc      	b.n	8003ac0 <_printf_i+0x148>
 8003b46:	6833      	ldr	r3, [r6, #0]
 8003b48:	1d1a      	adds	r2, r3, #4
 8003b4a:	6032      	str	r2, [r6, #0]
 8003b4c:	681e      	ldr	r6, [r3, #0]
 8003b4e:	6862      	ldr	r2, [r4, #4]
 8003b50:	2100      	movs	r1, #0
 8003b52:	4630      	mov	r0, r6
 8003b54:	f7fc fb4c 	bl	80001f0 <memchr>
 8003b58:	b108      	cbz	r0, 8003b5e <_printf_i+0x1e6>
 8003b5a:	1b80      	subs	r0, r0, r6
 8003b5c:	6060      	str	r0, [r4, #4]
 8003b5e:	6863      	ldr	r3, [r4, #4]
 8003b60:	6123      	str	r3, [r4, #16]
 8003b62:	2300      	movs	r3, #0
 8003b64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b68:	e7aa      	b.n	8003ac0 <_printf_i+0x148>
 8003b6a:	6923      	ldr	r3, [r4, #16]
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4640      	mov	r0, r8
 8003b72:	47d0      	blx	sl
 8003b74:	3001      	adds	r0, #1
 8003b76:	d0ad      	beq.n	8003ad4 <_printf_i+0x15c>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	079b      	lsls	r3, r3, #30
 8003b7c:	d413      	bmi.n	8003ba6 <_printf_i+0x22e>
 8003b7e:	68e0      	ldr	r0, [r4, #12]
 8003b80:	9b03      	ldr	r3, [sp, #12]
 8003b82:	4298      	cmp	r0, r3
 8003b84:	bfb8      	it	lt
 8003b86:	4618      	movlt	r0, r3
 8003b88:	e7a6      	b.n	8003ad8 <_printf_i+0x160>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	4649      	mov	r1, r9
 8003b90:	4640      	mov	r0, r8
 8003b92:	47d0      	blx	sl
 8003b94:	3001      	adds	r0, #1
 8003b96:	d09d      	beq.n	8003ad4 <_printf_i+0x15c>
 8003b98:	3501      	adds	r5, #1
 8003b9a:	68e3      	ldr	r3, [r4, #12]
 8003b9c:	9903      	ldr	r1, [sp, #12]
 8003b9e:	1a5b      	subs	r3, r3, r1
 8003ba0:	42ab      	cmp	r3, r5
 8003ba2:	dcf2      	bgt.n	8003b8a <_printf_i+0x212>
 8003ba4:	e7eb      	b.n	8003b7e <_printf_i+0x206>
 8003ba6:	2500      	movs	r5, #0
 8003ba8:	f104 0619 	add.w	r6, r4, #25
 8003bac:	e7f5      	b.n	8003b9a <_printf_i+0x222>
 8003bae:	bf00      	nop
 8003bb0:	08003ed9 	.word	0x08003ed9
 8003bb4:	08003eea 	.word	0x08003eea

08003bb8 <__sflush_r>:
 8003bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	0716      	lsls	r6, r2, #28
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	d454      	bmi.n	8003c72 <__sflush_r+0xba>
 8003bc8:	684b      	ldr	r3, [r1, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	dc02      	bgt.n	8003bd4 <__sflush_r+0x1c>
 8003bce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	dd48      	ble.n	8003c66 <__sflush_r+0xae>
 8003bd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bd6:	2e00      	cmp	r6, #0
 8003bd8:	d045      	beq.n	8003c66 <__sflush_r+0xae>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003be0:	682f      	ldr	r7, [r5, #0]
 8003be2:	6a21      	ldr	r1, [r4, #32]
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	d030      	beq.n	8003c4a <__sflush_r+0x92>
 8003be8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	0759      	lsls	r1, r3, #29
 8003bee:	d505      	bpl.n	8003bfc <__sflush_r+0x44>
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	1ad2      	subs	r2, r2, r3
 8003bf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bf6:	b10b      	cbz	r3, 8003bfc <__sflush_r+0x44>
 8003bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bfa:	1ad2      	subs	r2, r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003c00:	6a21      	ldr	r1, [r4, #32]
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b0      	blx	r6
 8003c06:	1c43      	adds	r3, r0, #1
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	d106      	bne.n	8003c1a <__sflush_r+0x62>
 8003c0c:	6829      	ldr	r1, [r5, #0]
 8003c0e:	291d      	cmp	r1, #29
 8003c10:	d82b      	bhi.n	8003c6a <__sflush_r+0xb2>
 8003c12:	4a2a      	ldr	r2, [pc, #168]	@ (8003cbc <__sflush_r+0x104>)
 8003c14:	410a      	asrs	r2, r1
 8003c16:	07d6      	lsls	r6, r2, #31
 8003c18:	d427      	bmi.n	8003c6a <__sflush_r+0xb2>
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	6062      	str	r2, [r4, #4]
 8003c1e:	04d9      	lsls	r1, r3, #19
 8003c20:	6922      	ldr	r2, [r4, #16]
 8003c22:	6022      	str	r2, [r4, #0]
 8003c24:	d504      	bpl.n	8003c30 <__sflush_r+0x78>
 8003c26:	1c42      	adds	r2, r0, #1
 8003c28:	d101      	bne.n	8003c2e <__sflush_r+0x76>
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	b903      	cbnz	r3, 8003c30 <__sflush_r+0x78>
 8003c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c32:	602f      	str	r7, [r5, #0]
 8003c34:	b1b9      	cbz	r1, 8003c66 <__sflush_r+0xae>
 8003c36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c3a:	4299      	cmp	r1, r3
 8003c3c:	d002      	beq.n	8003c44 <__sflush_r+0x8c>
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7ff fbf2 	bl	8003428 <_free_r>
 8003c44:	2300      	movs	r3, #0
 8003c46:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c48:	e00d      	b.n	8003c66 <__sflush_r+0xae>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b0      	blx	r6
 8003c50:	4602      	mov	r2, r0
 8003c52:	1c50      	adds	r0, r2, #1
 8003c54:	d1c9      	bne.n	8003bea <__sflush_r+0x32>
 8003c56:	682b      	ldr	r3, [r5, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0c6      	beq.n	8003bea <__sflush_r+0x32>
 8003c5c:	2b1d      	cmp	r3, #29
 8003c5e:	d001      	beq.n	8003c64 <__sflush_r+0xac>
 8003c60:	2b16      	cmp	r3, #22
 8003c62:	d11e      	bne.n	8003ca2 <__sflush_r+0xea>
 8003c64:	602f      	str	r7, [r5, #0]
 8003c66:	2000      	movs	r0, #0
 8003c68:	e022      	b.n	8003cb0 <__sflush_r+0xf8>
 8003c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	e01b      	b.n	8003caa <__sflush_r+0xf2>
 8003c72:	690f      	ldr	r7, [r1, #16]
 8003c74:	2f00      	cmp	r7, #0
 8003c76:	d0f6      	beq.n	8003c66 <__sflush_r+0xae>
 8003c78:	0793      	lsls	r3, r2, #30
 8003c7a:	680e      	ldr	r6, [r1, #0]
 8003c7c:	bf08      	it	eq
 8003c7e:	694b      	ldreq	r3, [r1, #20]
 8003c80:	600f      	str	r7, [r1, #0]
 8003c82:	bf18      	it	ne
 8003c84:	2300      	movne	r3, #0
 8003c86:	eba6 0807 	sub.w	r8, r6, r7
 8003c8a:	608b      	str	r3, [r1, #8]
 8003c8c:	f1b8 0f00 	cmp.w	r8, #0
 8003c90:	dde9      	ble.n	8003c66 <__sflush_r+0xae>
 8003c92:	6a21      	ldr	r1, [r4, #32]
 8003c94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c96:	4643      	mov	r3, r8
 8003c98:	463a      	mov	r2, r7
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	47b0      	blx	r6
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	dc08      	bgt.n	8003cb4 <__sflush_r+0xfc>
 8003ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb4:	4407      	add	r7, r0
 8003cb6:	eba8 0800 	sub.w	r8, r8, r0
 8003cba:	e7e7      	b.n	8003c8c <__sflush_r+0xd4>
 8003cbc:	dfbffffe 	.word	0xdfbffffe

08003cc0 <_fflush_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	690b      	ldr	r3, [r1, #16]
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	b913      	cbnz	r3, 8003cd0 <_fflush_r+0x10>
 8003cca:	2500      	movs	r5, #0
 8003ccc:	4628      	mov	r0, r5
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	b118      	cbz	r0, 8003cda <_fflush_r+0x1a>
 8003cd2:	6a03      	ldr	r3, [r0, #32]
 8003cd4:	b90b      	cbnz	r3, 8003cda <_fflush_r+0x1a>
 8003cd6:	f7ff f9ad 	bl	8003034 <__sinit>
 8003cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f3      	beq.n	8003cca <_fflush_r+0xa>
 8003ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ce4:	07d0      	lsls	r0, r2, #31
 8003ce6:	d404      	bmi.n	8003cf2 <_fflush_r+0x32>
 8003ce8:	0599      	lsls	r1, r3, #22
 8003cea:	d402      	bmi.n	8003cf2 <_fflush_r+0x32>
 8003cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cee:	f7ff fb98 	bl	8003422 <__retarget_lock_acquire_recursive>
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	f7ff ff5f 	bl	8003bb8 <__sflush_r>
 8003cfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cfc:	07da      	lsls	r2, r3, #31
 8003cfe:	4605      	mov	r5, r0
 8003d00:	d4e4      	bmi.n	8003ccc <_fflush_r+0xc>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	059b      	lsls	r3, r3, #22
 8003d06:	d4e1      	bmi.n	8003ccc <_fflush_r+0xc>
 8003d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d0a:	f7ff fb8b 	bl	8003424 <__retarget_lock_release_recursive>
 8003d0e:	e7dd      	b.n	8003ccc <_fflush_r+0xc>

08003d10 <__swhatbuf_r>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	460c      	mov	r4, r1
 8003d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	b096      	sub	sp, #88	@ 0x58
 8003d1c:	4615      	mov	r5, r2
 8003d1e:	461e      	mov	r6, r3
 8003d20:	da0d      	bge.n	8003d3e <__swhatbuf_r+0x2e>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2340      	movne	r3, #64	@ 0x40
 8003d30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d34:	2000      	movs	r0, #0
 8003d36:	6031      	str	r1, [r6, #0]
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	b016      	add	sp, #88	@ 0x58
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
 8003d3e:	466a      	mov	r2, sp
 8003d40:	f000 f848 	bl	8003dd4 <_fstat_r>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	dbec      	blt.n	8003d22 <__swhatbuf_r+0x12>
 8003d48:	9901      	ldr	r1, [sp, #4]
 8003d4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d52:	4259      	negs	r1, r3
 8003d54:	4159      	adcs	r1, r3
 8003d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d5a:	e7eb      	b.n	8003d34 <__swhatbuf_r+0x24>

08003d5c <__smakebuf_r>:
 8003d5c:	898b      	ldrh	r3, [r1, #12]
 8003d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d60:	079d      	lsls	r5, r3, #30
 8003d62:	4606      	mov	r6, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	d507      	bpl.n	8003d78 <__smakebuf_r+0x1c>
 8003d68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	6123      	str	r3, [r4, #16]
 8003d70:	2301      	movs	r3, #1
 8003d72:	6163      	str	r3, [r4, #20]
 8003d74:	b003      	add	sp, #12
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d78:	ab01      	add	r3, sp, #4
 8003d7a:	466a      	mov	r2, sp
 8003d7c:	f7ff ffc8 	bl	8003d10 <__swhatbuf_r>
 8003d80:	9f00      	ldr	r7, [sp, #0]
 8003d82:	4605      	mov	r5, r0
 8003d84:	4639      	mov	r1, r7
 8003d86:	4630      	mov	r0, r6
 8003d88:	f7ff fbba 	bl	8003500 <_malloc_r>
 8003d8c:	b948      	cbnz	r0, 8003da2 <__smakebuf_r+0x46>
 8003d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d92:	059a      	lsls	r2, r3, #22
 8003d94:	d4ee      	bmi.n	8003d74 <__smakebuf_r+0x18>
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	e7e2      	b.n	8003d68 <__smakebuf_r+0xc>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	6020      	str	r0, [r4, #0]
 8003da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003daa:	81a3      	strh	r3, [r4, #12]
 8003dac:	9b01      	ldr	r3, [sp, #4]
 8003dae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003db2:	b15b      	cbz	r3, 8003dcc <__smakebuf_r+0x70>
 8003db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db8:	4630      	mov	r0, r6
 8003dba:	f000 f81d 	bl	8003df8 <_isatty_r>
 8003dbe:	b128      	cbz	r0, 8003dcc <__smakebuf_r+0x70>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	431d      	orrs	r5, r3
 8003dd0:	81a5      	strh	r5, [r4, #12]
 8003dd2:	e7cf      	b.n	8003d74 <__smakebuf_r+0x18>

08003dd4 <_fstat_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d07      	ldr	r5, [pc, #28]	@ (8003df4 <_fstat_r+0x20>)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	f7fd f88e 	bl	8000f02 <_fstat>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	d102      	bne.n	8003df0 <_fstat_r+0x1c>
 8003dea:	682b      	ldr	r3, [r5, #0]
 8003dec:	b103      	cbz	r3, 8003df0 <_fstat_r+0x1c>
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	bd38      	pop	{r3, r4, r5, pc}
 8003df2:	bf00      	nop
 8003df4:	2000025c 	.word	0x2000025c

08003df8 <_isatty_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4d06      	ldr	r5, [pc, #24]	@ (8003e14 <_isatty_r+0x1c>)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	f7fd f88d 	bl	8000f22 <_isatty>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_isatty_r+0x1a>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_isatty_r+0x1a>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	2000025c 	.word	0x2000025c

08003e18 <_sbrk_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	4d06      	ldr	r5, [pc, #24]	@ (8003e34 <_sbrk_r+0x1c>)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fd f896 	bl	8000f54 <_sbrk>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_sbrk_r+0x1a>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_sbrk_r+0x1a>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	2000025c 	.word	0x2000025c

08003e38 <_init>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr

08003e44 <_fini>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr
