
lecture11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008b08  08008b08  00009b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d40  08008d40  0000a11c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d48  08008d48  0000a11c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d48  08008d48  00009d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08008d50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a11c  2**0
                  CONTENTS
 10 .bss          00000a40  2000011c  2000011c  0000a11c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b5c  20000b5c  0000a11c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a11c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a4  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b94  00000000  00000000  0001a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  0001d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f2  00000000  00000000  0001dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025388  00000000  00000000  0001e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011bca  00000000  00000000  00043d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6152  00000000  00000000  000558f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ba46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039ac  00000000  00000000  0012ba8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0012f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008af0 	.word	0x08008af0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08008af0 	.word	0x08008af0

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	@ 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__gedf2>:
 80007bc:	f04f 3cff 	mov.w	ip, #4294967295
 80007c0:	e006      	b.n	80007d0 <__cmpdf2+0x4>
 80007c2:	bf00      	nop

080007c4 <__ledf2>:
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	e002      	b.n	80007d0 <__cmpdf2+0x4>
 80007ca:	bf00      	nop

080007cc <__cmpdf2>:
 80007cc:	f04f 0c01 	mov.w	ip, #1
 80007d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e6:	d01b      	beq.n	8000820 <__cmpdf2+0x54>
 80007e8:	b001      	add	sp, #4
 80007ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ee:	bf0c      	ite	eq
 80007f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f4:	ea91 0f03 	teqne	r1, r3
 80007f8:	bf02      	ittt	eq
 80007fa:	ea90 0f02 	teqeq	r0, r2
 80007fe:	2000      	moveq	r0, #0
 8000800:	4770      	bxeq	lr
 8000802:	f110 0f00 	cmn.w	r0, #0
 8000806:	ea91 0f03 	teq	r1, r3
 800080a:	bf58      	it	pl
 800080c:	4299      	cmppl	r1, r3
 800080e:	bf08      	it	eq
 8000810:	4290      	cmpeq	r0, r2
 8000812:	bf2c      	ite	cs
 8000814:	17d8      	asrcs	r0, r3, #31
 8000816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800081a:	f040 0001 	orr.w	r0, r0, #1
 800081e:	4770      	bx	lr
 8000820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d102      	bne.n	8000830 <__cmpdf2+0x64>
 800082a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082e:	d107      	bne.n	8000840 <__cmpdf2+0x74>
 8000830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000838:	d1d6      	bne.n	80007e8 <__cmpdf2+0x1c>
 800083a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083e:	d0d3      	beq.n	80007e8 <__cmpdf2+0x1c>
 8000840:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <__aeabi_cdrcmple>:
 8000848:	4684      	mov	ip, r0
 800084a:	4610      	mov	r0, r2
 800084c:	4662      	mov	r2, ip
 800084e:	468c      	mov	ip, r1
 8000850:	4619      	mov	r1, r3
 8000852:	4663      	mov	r3, ip
 8000854:	e000      	b.n	8000858 <__aeabi_cdcmpeq>
 8000856:	bf00      	nop

08000858 <__aeabi_cdcmpeq>:
 8000858:	b501      	push	{r0, lr}
 800085a:	f7ff ffb7 	bl	80007cc <__cmpdf2>
 800085e:	2800      	cmp	r0, #0
 8000860:	bf48      	it	mi
 8000862:	f110 0f00 	cmnmi.w	r0, #0
 8000866:	bd01      	pop	{r0, pc}

08000868 <__aeabi_dcmpeq>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff fff4 	bl	8000858 <__aeabi_cdcmpeq>
 8000870:	bf0c      	ite	eq
 8000872:	2001      	moveq	r0, #1
 8000874:	2000      	movne	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmplt>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffea 	bl	8000858 <__aeabi_cdcmpeq>
 8000884:	bf34      	ite	cc
 8000886:	2001      	movcc	r0, #1
 8000888:	2000      	movcs	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmple>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffe0 	bl	8000858 <__aeabi_cdcmpeq>
 8000898:	bf94      	ite	ls
 800089a:	2001      	movls	r0, #1
 800089c:	2000      	movhi	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmpge>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffce 	bl	8000848 <__aeabi_cdrcmple>
 80008ac:	bf94      	ite	ls
 80008ae:	2001      	movls	r0, #1
 80008b0:	2000      	movhi	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmpgt>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffc4 	bl	8000848 <__aeabi_cdrcmple>
 80008c0:	bf34      	ite	cc
 80008c2:	2001      	movcc	r0, #1
 80008c4:	2000      	movcs	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_d2iz>:
 80008cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008d4:	d215      	bcs.n	8000902 <__aeabi_d2iz+0x36>
 80008d6:	d511      	bpl.n	80008fc <__aeabi_d2iz+0x30>
 80008d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008e0:	d912      	bls.n	8000908 <__aeabi_d2iz+0x3c>
 80008e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008f2:	fa23 f002 	lsr.w	r0, r3, r2
 80008f6:	bf18      	it	ne
 80008f8:	4240      	negne	r0, r0
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000906:	d105      	bne.n	8000914 <__aeabi_d2iz+0x48>
 8000908:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800090c:	bf08      	it	eq
 800090e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <step>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void step(int x, int y, uint8_t btn){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];
	buff[0] = 0x00 | btn; // stiskni leve tlacitko
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	753b      	strb	r3, [r7, #20]
	buff[1] = (int8_t)(x); // posun X +10
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	757b      	strb	r3, [r7, #21]
	buff[2] = (int8_t)(y); // posun Y -3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	75bb      	strb	r3, [r7, #22]
	buff[3] = 0; // bez scrollu
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <step+0x48>)
 8000cd8:	f004 fe2e 	bl	8005938 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <step+0x48>)
 8000cde:	f004 fe5b 	bl	8005998 <USBD_HID_GetPollingInterval>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fc7f 	bl	80015e8 <HAL_Delay>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000188 	.word	0x20000188

08000cf8 <draw_circle>:

void draw_circle(float radius, int px, int py){
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d02:	60b8      	str	r0, [r7, #8]
 8000d04:	6079      	str	r1, [r7, #4]
	float x = 0, y = 0;
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

	step (px, py, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f7ff ffc8 	bl	8000cac <step>

	for (int i=0;i<=360; i++){
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
 8000d20:	e06f      	b.n	8000e02 <draw_circle+0x10a>
		x= round(radius *cos(i*(M_PI/180)));
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff fcf2 	bl	800070c <__aeabi_f2d>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	69f8      	ldr	r0, [r7, #28]
 8000d2e:	f7ff fcdb 	bl	80006e8 <__aeabi_i2d>
 8000d32:	a33b      	add	r3, pc, #236	@ (adr r3, 8000e20 <draw_circle+0x128>)
 8000d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d38:	f7ff fa5a 	bl	80001f0 <__aeabi_dmul>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	ec43 2b17 	vmov	d7, r2, r3
 8000d44:	eeb0 0a47 	vmov.f32	s0, s14
 8000d48:	eef0 0a67 	vmov.f32	s1, s15
 8000d4c:	f006 fe04 	bl	8007958 <cos>
 8000d50:	ec53 2b10 	vmov	r2, r3, d0
 8000d54:	4620      	mov	r0, r4
 8000d56:	4629      	mov	r1, r5
 8000d58:	f7ff fa4a 	bl	80001f0 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	ec43 2b17 	vmov	d7, r2, r3
 8000d64:	eeb0 0a47 	vmov.f32	s0, s14
 8000d68:	eef0 0a67 	vmov.f32	s1, s15
 8000d6c:	f006 fe9c 	bl	8007aa8 <round>
 8000d70:	ec53 2b10 	vmov	r2, r3, d0
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fdd0 	bl	800091c <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	61bb      	str	r3, [r7, #24]
		y= round(radius *sin(i*(M_PI/180)));
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff fcc3 	bl	800070c <__aeabi_f2d>
 8000d86:	4604      	mov	r4, r0
 8000d88:	460d      	mov	r5, r1
 8000d8a:	69f8      	ldr	r0, [r7, #28]
 8000d8c:	f7ff fcac 	bl	80006e8 <__aeabi_i2d>
 8000d90:	a323      	add	r3, pc, #140	@ (adr r3, 8000e20 <draw_circle+0x128>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f7ff fa2b 	bl	80001f0 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	ec43 2b17 	vmov	d7, r2, r3
 8000da2:	eeb0 0a47 	vmov.f32	s0, s14
 8000da6:	eef0 0a67 	vmov.f32	s1, s15
 8000daa:	f006 fe29 	bl	8007a00 <sin>
 8000dae:	ec53 2b10 	vmov	r2, r3, d0
 8000db2:	4620      	mov	r0, r4
 8000db4:	4629      	mov	r1, r5
 8000db6:	f7ff fa1b 	bl	80001f0 <__aeabi_dmul>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	ec43 2b17 	vmov	d7, r2, r3
 8000dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8000dc6:	eef0 0a67 	vmov.f32	s1, s15
 8000dca:	f006 fe6d 	bl	8007aa8 <round>
 8000dce:	ec53 2b10 	vmov	r2, r3, d0
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f7ff fda1 	bl	800091c <__aeabi_d2f>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	617b      	str	r3, [r7, #20]

		step((int)x, (int)y,1);
 8000dde:	edd7 7a06 	vldr	s15, [r7, #24]
 8000de2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000de6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dee:	2201      	movs	r2, #1
 8000df0:	ee17 1a90 	vmov	r1, s15
 8000df4:	ee17 0a10 	vmov	r0, s14
 8000df8:	f7ff ff58 	bl	8000cac <step>
	for (int i=0;i<=360; i++){
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000e08:	dd8b      	ble.n	8000d22 <draw_circle+0x2a>
	}

	step (0,0,0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ff4c 	bl	8000cac <step>
}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	a2529d39 	.word	0xa2529d39
 8000e24:	3f91df46 	.word	0x3f91df46

08000e28 <draw_mouse>:

void draw_mouse(float radius, int px, int py){
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e32:	60b8      	str	r0, [r7, #8]
 8000e34:	6079      	str	r1, [r7, #4]
	float x = 0, y = 0;
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]

	step (px, py, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f7ff ff30 	bl	8000cac <step>

	for (int i=90;i<=270; i++){
 8000e4c:	235a      	movs	r3, #90	@ 0x5a
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	e06f      	b.n	8000f32 <draw_mouse+0x10a>
		x= round(radius *cos(i*(M_PI/180)));
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff fc5a 	bl	800070c <__aeabi_f2d>
 8000e58:	4604      	mov	r4, r0
 8000e5a:	460d      	mov	r5, r1
 8000e5c:	69f8      	ldr	r0, [r7, #28]
 8000e5e:	f7ff fc43 	bl	80006e8 <__aeabi_i2d>
 8000e62:	a33b      	add	r3, pc, #236	@ (adr r3, 8000f50 <draw_mouse+0x128>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff f9c2 	bl	80001f0 <__aeabi_dmul>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	ec43 2b17 	vmov	d7, r2, r3
 8000e74:	eeb0 0a47 	vmov.f32	s0, s14
 8000e78:	eef0 0a67 	vmov.f32	s1, s15
 8000e7c:	f006 fd6c 	bl	8007958 <cos>
 8000e80:	ec53 2b10 	vmov	r2, r3, d0
 8000e84:	4620      	mov	r0, r4
 8000e86:	4629      	mov	r1, r5
 8000e88:	f7ff f9b2 	bl	80001f0 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	ec43 2b17 	vmov	d7, r2, r3
 8000e94:	eeb0 0a47 	vmov.f32	s0, s14
 8000e98:	eef0 0a67 	vmov.f32	s1, s15
 8000e9c:	f006 fe04 	bl	8007aa8 <round>
 8000ea0:	ec53 2b10 	vmov	r2, r3, d0
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fd38 	bl	800091c <__aeabi_d2f>
 8000eac:	4603      	mov	r3, r0
 8000eae:	61bb      	str	r3, [r7, #24]
		y= round(radius *sin(i*(M_PI/180)));
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f7ff fc2b 	bl	800070c <__aeabi_f2d>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	460d      	mov	r5, r1
 8000eba:	69f8      	ldr	r0, [r7, #28]
 8000ebc:	f7ff fc14 	bl	80006e8 <__aeabi_i2d>
 8000ec0:	a323      	add	r3, pc, #140	@ (adr r3, 8000f50 <draw_mouse+0x128>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff f993 	bl	80001f0 <__aeabi_dmul>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	ec43 2b17 	vmov	d7, r2, r3
 8000ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ed6:	eef0 0a67 	vmov.f32	s1, s15
 8000eda:	f006 fd91 	bl	8007a00 <sin>
 8000ede:	ec53 2b10 	vmov	r2, r3, d0
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	f7ff f983 	bl	80001f0 <__aeabi_dmul>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	ec43 2b17 	vmov	d7, r2, r3
 8000ef2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ef6:	eef0 0a67 	vmov.f32	s1, s15
 8000efa:	f006 fdd5 	bl	8007aa8 <round>
 8000efe:	ec53 2b10 	vmov	r2, r3, d0
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fd09 	bl	800091c <__aeabi_d2f>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	617b      	str	r3, [r7, #20]

		step((int)x, (int)y,1);
 8000f0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000f16:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	2201      	movs	r2, #1
 8000f20:	ee17 1a90 	vmov	r1, s15
 8000f24:	ee17 0a10 	vmov	r0, s14
 8000f28:	f7ff fec0 	bl	8000cac <step>
	for (int i=90;i<=270; i++){
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000f38:	dd8b      	ble.n	8000e52 <draw_mouse+0x2a>
	}

	step (0,0,0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff feb4 	bl	8000cac <step>
}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4c:	f3af 8000 	nop.w
 8000f50:	a2529d39 	.word	0xa2529d39
 8000f54:	3f91df46 	.word	0x3f91df46

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fad2 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f85e 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f8f0 	bl	8001148 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f68:	f000 f8c4 	bl	80010f4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f6c:	f006 f882 	bl	8007074 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)){
 8000f70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f74:	4829      	ldr	r0, [pc, #164]	@ (800101c <main+0xc4>)
 8000f76:	f000 fe19 	bl	8001bac <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f7      	beq.n	8000f70 <main+0x18>
		  draw_circle(5, 0, 0);
 8000f80:	2100      	movs	r1, #0
 8000f82:	2000      	movs	r0, #0
 8000f84:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000f88:	f7ff feb6 	bl	8000cf8 <draw_circle>

		  step(0,80,BTN_PRESSED);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2150      	movs	r1, #80	@ 0x50
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fe8b 	bl	8000cac <step>
		  step(0,50,BTN_PRESSED);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2132      	movs	r1, #50	@ 0x32
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fe86 	bl	8000cac <step>
		  step(0,0,BTN_RELEASED);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fe81 	bl	8000cac <step>

		  step(-40,-60,BTN_PRESSED);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f06f 013b 	mvn.w	r1, #59	@ 0x3b
 8000fb0:	f06f 0027 	mvn.w	r0, #39	@ 0x27
 8000fb4:	f7ff fe7a 	bl	8000cac <step>
		  draw_circle(1, 0,0);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000fc0:	f7ff fe9a 	bl	8000cf8 <draw_circle>
		  step(0,0,BTN_RELEASED);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fe6f 	bl	8000cac <step>

		  step(127,0,BTN_PRESSED);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	207f      	movs	r0, #127	@ 0x7f
 8000fd4:	f7ff fe6a 	bl	8000cac <step>
		  draw_circle(1,0,0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000fe0:	f7ff fe8a 	bl	8000cf8 <draw_circle>
		  step(0,0,BTN_RELEASED);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fe5f 	bl	8000cac <step>

		  step(10,120,BTN_PRESSED);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2178      	movs	r1, #120	@ 0x78
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f7ff fe5a 	bl	8000cac <step>
		  draw_mouse(3,0,0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001000:	f7ff ff12 	bl	8000e28 <draw_mouse>
		  step(0,0,BTN_RELEASED);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fe4f 	bl	8000cac <step>

		  step(0,0,BTN_RELEASED);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fe4a 	bl	8000cac <step>
	  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)){
 8001018:	e7aa      	b.n	8000f70 <main+0x18>
 800101a:	bf00      	nop
 800101c:	40020800 	.word	0x40020800

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	@ 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2230      	movs	r2, #48	@ 0x30
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f006 fc66 	bl	8007900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <SystemClock_Config+0xcc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <SystemClock_Config+0xcc>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <SystemClock_Config+0xcc>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <SystemClock_Config+0xd0>)
 800106a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <SystemClock_Config+0xd0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001080:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001090:	2304      	movs	r3, #4
 8001092:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001094:	23a8      	movs	r3, #168	@ 0xa8
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800109c:	2307      	movs	r3, #7
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 ffed 	bl	8003084 <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b0:	f000 f93c 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2105      	movs	r1, #5
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fa4e 	bl	8003574 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010de:	f000 f925 	bl	800132c <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	@ 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <MX_USART3_UART_Init+0x50>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_USART3_UART_Init+0x4c>)
 800112c:	f002 fc42 	bl	80039b4 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001136:	f000 f8f9 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000138 	.word	0x20000138
 8001144:	40004800 	.word	0x40004800

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	@ 0x30
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	4b6d      	ldr	r3, [pc, #436]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a6c      	ldr	r2, [pc, #432]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b6a      	ldr	r3, [pc, #424]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	4b66      	ldr	r3, [pc, #408]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a65      	ldr	r2, [pc, #404]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b63      	ldr	r3, [pc, #396]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a5e      	ldr	r2, [pc, #376]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b58      	ldr	r3, [pc, #352]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a57      	ldr	r2, [pc, #348]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b55      	ldr	r3, [pc, #340]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a50      	ldr	r2, [pc, #320]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b4e      	ldr	r3, [pc, #312]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a49      	ldr	r2, [pc, #292]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <MX_GPIO_Init+0x1d0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f244 0181 	movw	r1, #16513	@ 0x4081
 800120c:	4843      	ldr	r0, [pc, #268]	@ (800131c <MX_GPIO_Init+0x1d4>)
 800120e:	f000 fce5 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2140      	movs	r1, #64	@ 0x40
 8001216:	4842      	ldr	r0, [pc, #264]	@ (8001320 <MX_GPIO_Init+0x1d8>)
 8001218:	f000 fce0 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800121c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	483c      	ldr	r0, [pc, #240]	@ (8001324 <MX_GPIO_Init+0x1dc>)
 8001234:	f000 fb0e 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001238:	2332      	movs	r3, #50	@ 0x32
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001248:	230b      	movs	r3, #11
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4834      	ldr	r0, [pc, #208]	@ (8001324 <MX_GPIO_Init+0x1dc>)
 8001254:	f000 fafe 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001258:	2386      	movs	r3, #134	@ 0x86
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001268:	230b      	movs	r3, #11
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	482d      	ldr	r0, [pc, #180]	@ (8001328 <MX_GPIO_Init+0x1e0>)
 8001274:	f000 faee 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001278:	f244 0381 	movw	r3, #16513	@ 0x4081
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4822      	ldr	r0, [pc, #136]	@ (800131c <MX_GPIO_Init+0x1d4>)
 8001292:	f000 fadf 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	481a      	ldr	r0, [pc, #104]	@ (800131c <MX_GPIO_Init+0x1d4>)
 80012b4:	f000 face 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4814      	ldr	r0, [pc, #80]	@ (8001320 <MX_GPIO_Init+0x1d8>)
 80012d0:	f000 fac0 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	480e      	ldr	r0, [pc, #56]	@ (8001320 <MX_GPIO_Init+0x1d8>)
 80012e8:	f000 fab4 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012fe:	230b      	movs	r3, #11
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_GPIO_Init+0x1d8>)
 800130a:	f000 faa3 	bl	8001854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	@ 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400
 8001320:	40021800 	.word	0x40021800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020000 	.word	0x40020000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <Error_Handler+0x8>

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	@ 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_UART_MspInit+0x84>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12c      	bne.n	8001404 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a17      	ldr	r2, [pc, #92]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013f4:	2307      	movs	r3, #7
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_UART_MspInit+0x8c>)
 8001400:	f000 fa28 	bl	8001854 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40004800 	.word	0x40004800
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 f89b 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <OTG_FS_IRQHandler+0x10>)
 800147e:	f000 fd0a 	bl	8001e96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000664 	.word	0x20000664

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b4:	f7ff ffea 	bl	800148c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	@ (80014f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	@ (80014fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014de:	f006 fa17 	bl	8007910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fd39 	bl	8000f58 <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80014f4:	08008d50 	.word	0x08008d50
  ldr r2, =_sbss
 80014f8:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80014fc:	20000b5c 	.word	0x20000b5c

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f94f 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fefe 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f967 	bl	800183a <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f92f 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	@ (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000180 	.word	0x20000180

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000180 	.word	0x20000180

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	@ (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e177      	b.n	8001b60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8166 	bne.w	8001b5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b03      	cmp	r3, #3
 8001912:	d017      	beq.n	8001944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80c0 	beq.w	8001b5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a65      	ldr	r2, [pc, #404]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <HAL_GPIO_Init+0x324>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f6:	4a61      	ldr	r2, [pc, #388]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	@ (8001b80 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d037      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a57      	ldr	r2, [pc, #348]	@ (8001b84 <HAL_GPIO_Init+0x330>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d031      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a56      	ldr	r2, [pc, #344]	@ (8001b88 <HAL_GPIO_Init+0x334>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a55      	ldr	r2, [pc, #340]	@ (8001b8c <HAL_GPIO_Init+0x338>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a53      	ldr	r2, [pc, #332]	@ (8001b94 <HAL_GPIO_Init+0x340>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_GPIO_Init+0x344>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	@ (8001b9c <HAL_GPIO_Init+0x348>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_GPIO_Init+0x350>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	e012      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e010      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00e      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a76:	2307      	movs	r3, #7
 8001a78:	e00c      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00a      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a7e:	2305      	movs	r3, #5
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a82:	2304      	movs	r3, #4
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x240>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <HAL_GPIO_Init+0x328>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad6:	4a34      	ldr	r2, [pc, #208]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b00:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f ae84 	bls.w	8001870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3724      	adds	r7, #36	@ 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020400 	.word	0x40020400
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40021400 	.word	0x40021400
 8001b98:	40021800 	.word	0x40021800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40022400 	.word	0x40022400
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e001      	b.n	8001bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af02      	add	r7, sp, #8
 8001c14:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e101      	b.n	8001e24 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f005 fb50 	bl	80072e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c4e:	d102      	bne.n	8001c56 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fa85 	bl	800416a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7c1a      	ldrb	r2, [r3, #16]
 8001c68:	f88d 2000 	strb.w	r2, [sp]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c70:	f002 f964 	bl	8003f3c <USB_CoreInit>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0ce      	b.n	8001e24 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fa7d 	bl	800418c <USB_SetCurrentMode>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0bf      	b.n	8001e24 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e04a      	b.n	8001d40 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3315      	adds	r3, #21
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3314      	adds	r3, #20
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	332e      	adds	r3, #46	@ 0x2e
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3318      	adds	r3, #24
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	331c      	adds	r3, #28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3320      	adds	r3, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3324      	adds	r3, #36	@ 0x24
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	791b      	ldrb	r3, [r3, #4]
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3af      	bcc.n	8001caa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e044      	b.n	8001dda <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3b5      	bcc.n	8001d50 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7c1a      	ldrb	r2, [r3, #16]
 8001dec:	f88d 2000 	strb.w	r2, [sp]
 8001df0:	3304      	adds	r3, #4
 8001df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df4:	f002 fa16 	bl	8004224 <USB_DevInit>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00c      	b.n	8001e24 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fa60 	bl	80052e2 <USB_DevDisconnect>

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_PCD_Start+0x1c>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e022      	b.n	8001e8e <HAL_PCD_Start+0x62>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 f967 	bl	8004148 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fa0e 	bl	80052a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b08d      	sub	sp, #52	@ 0x34
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 facc 	bl	800544a <USB_GetMode>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 848c 	bne.w	80027d2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fa30 	bl	8005324 <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8482 	beq.w	80027d0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fa1d 	bl	8005324 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d107      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f002 0202 	and.w	r2, r2, #2
 8001f02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fa0b 	bl	8005324 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d161      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0210 	bic.w	r2, r2, #16
 8001f26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	0c5b      	lsrs	r3, r3, #17
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d124      	bne.n	8001f9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d035      	beq.n	8001fcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6a38      	ldr	r0, [r7, #32]
 8001f74:	f003 f842 	bl	8004ffc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f84:	441a      	add	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f96:	441a      	add	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	e016      	b.n	8001fcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	0c5b      	lsrs	r3, r3, #17
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d110      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6a38      	ldr	r0, [r7, #32]
 8001fb6:	f003 f821 	bl	8004ffc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	441a      	add	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0210 	orr.w	r2, r2, #16
 8001fda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f99f 	bl	8005324 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001ff0:	f040 80a7 	bne.w	8002142 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 f9a4 	bl	800534a <USB_ReadDevAllOutEpInterrupt>
 8002002:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002004:	e099      	b.n	800213a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 808e 	beq.w	800212e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f003 f9c8 	bl	80053b2 <USB_ReadDevOutEPInterrupt>
 8002022:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002040:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fe8c 	bl	8002d60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800205e:	461a      	mov	r2, r3
 8002060:	2308      	movs	r3, #8
 8002062:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 ff62 	bl	8002f30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002082:	461a      	mov	r2, r3
 8002084:	2310      	movs	r3, #16
 8002086:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d030      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b80      	cmp	r3, #128	@ 0x80
 800209c:	d109      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	78db      	ldrb	r3, [r3, #3]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d108      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2200      	movs	r2, #0
 80020d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f005 fa13 	bl	8007508 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	2302      	movs	r3, #2
 80020f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800210a:	461a      	mov	r2, r3
 800210c:	2320      	movs	r3, #32
 800210e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002126:	461a      	mov	r2, r3
 8002128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800212c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800213a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f af62 	bne.w	8002006 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f8ec 	bl	8005324 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002156:	f040 80db 	bne.w	8002310 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 f90d 	bl	800537e <USB_ReadDevAllInEpInterrupt>
 8002164:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800216a:	e0cd      	b.n	8002308 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80c2 	beq.w	80022fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f003 f933 	bl	80053ee <USB_ReadDevInEPInterrupt>
 8002188:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d057      	beq.n	8002244 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	2201      	movs	r2, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69f9      	ldr	r1, [r7, #28]
 80021b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021b4:	4013      	ands	r3, r2
 80021b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021c4:	461a      	mov	r2, r3
 80021c6:	2301      	movs	r3, #1
 80021c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	799b      	ldrb	r3, [r3, #6]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d132      	bne.n	8002238 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3320      	adds	r3, #32
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4403      	add	r3, r0
 80021f2:	331c      	adds	r3, #28
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4419      	add	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4403      	add	r3, r0
 8002206:	3320      	adds	r3, #32
 8002208:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	d113      	bne.n	8002238 <HAL_PCD_IRQHandler+0x3a2>
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3324      	adds	r3, #36	@ 0x24
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002230:	461a      	mov	r2, r3
 8002232:	2101      	movs	r1, #1
 8002234:	f003 f93a 	bl	80054ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f005 f8dd 	bl	80073fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800225a:	461a      	mov	r2, r3
 800225c:	2308      	movs	r3, #8
 800225e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002276:	461a      	mov	r2, r3
 8002278:	2310      	movs	r3, #16
 800227a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4413      	add	r3, r2
 800228e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002292:	461a      	mov	r2, r3
 8002294:	2340      	movs	r3, #64	@ 0x40
 8002296:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d023      	beq.n	80022ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022a4:	6a38      	ldr	r0, [r7, #32]
 80022a6:	f002 f921 	bl	80044ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3310      	adds	r3, #16
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f005 f92a 	bl	800752c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2302      	movs	r3, #2
 80022e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fca5 	bl	8002c46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	3301      	adds	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f af2e 	bne.w	800216c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 f805 	bl	8005324 <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002324:	d122      	bne.n	800236c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800234c:	2100      	movs	r1, #0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fe8c 	bl	800306c <HAL_PCDEx_LPM_Callback>
 8002354:	e002      	b.n	800235c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f005 f8c8 	bl	80074ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800236a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 ffd7 	bl	8005324 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800237c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002380:	d112      	bne.n	80023a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f005 f884 	bl	80074a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80023a6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 ffb9 	bl	8005324 <USB_ReadInterrupts>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023bc:	f040 80b7 	bne.w	800252e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2110      	movs	r1, #16
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 f886 	bl	80044ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023e4:	e046      	b.n	8002474 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023f2:	461a      	mov	r2, r3
 80023f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800240a:	0151      	lsls	r1, r2, #5
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	440a      	add	r2, r1
 8002410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002414:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002418:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800241a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002426:	461a      	mov	r2, r3
 8002428:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800242c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800243e:	0151      	lsls	r1, r2, #5
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	440a      	add	r2, r1
 8002444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002448:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800244c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800244e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800245e:	0151      	lsls	r1, r2, #5
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	440a      	add	r2, r1
 8002464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002468:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800246c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002470:	3301      	adds	r3, #1
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	4293      	cmp	r3, r2
 800247e:	d3b2      	bcc.n	80023e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800248e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002492:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7bdb      	ldrb	r3, [r3, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ac:	f043 030b 	orr.w	r3, r3, #11
 80024b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024c2:	f043 030b 	orr.w	r3, r3, #11
 80024c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c8:	e015      	b.n	80024f6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024dc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80024e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024f0:	f043 030b 	orr.w	r3, r3, #11
 80024f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002504:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002508:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002518:	461a      	mov	r2, r3
 800251a:	f002 ffc7 	bl	80054ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fef6 	bl	8005324 <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002542:	d123      	bne.n	800258c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 ff8c 	bl	8005466 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 f843 	bl	80045de <USB_GetDevSpeed>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681c      	ldr	r4, [r3, #0]
 8002564:	f001 f9f2 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8002568:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800256e:	461a      	mov	r2, r3
 8002570:	4620      	mov	r0, r4
 8002572:	f001 fd47 	bl	8004004 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f004 ff69 	bl	800744e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fec7 	bl	8005324 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b08      	cmp	r3, #8
 800259e:	d10a      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f004 ff46 	bl	8007432 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 0208 	and.w	r2, r2, #8
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 feb2 	bl	8005324 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	2b80      	cmp	r3, #128	@ 0x80
 80025c8:	d123      	bne.n	8002612 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d6:	2301      	movs	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025da:	e014      	b.n	8002606 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 faf2 	bl	8002be4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	4293      	cmp	r3, r2
 8002610:	d3e4      	bcc.n	80025dc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fe84 	bl	8005324 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002626:	d13c      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002628:	2301      	movs	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	e02b      	b.n	8002686 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800262e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3318      	adds	r3, #24
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d115      	bne.n	8002680 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002654:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002656:	2b00      	cmp	r3, #0
 8002658:	da12      	bge.n	8002680 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3317      	adds	r3, #23
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fab2 	bl	8002be4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	3301      	adds	r3, #1
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	791b      	ldrb	r3, [r3, #4]
 800268a:	461a      	mov	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	4293      	cmp	r3, r2
 8002690:	d3cd      	bcc.n	800262e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80026a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fe3c 	bl	8005324 <USB_ReadInterrupts>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026b6:	d156      	bne.n	8002766 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80026bc:	e045      	b.n	800274a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d12e      	bne.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da2b      	bge.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d121      	bne.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800273c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002740:	6053      	str	r3, [r2, #4]
            break;
 8002742:	e008      	b.n	8002756 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	3301      	adds	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	461a      	mov	r2, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	4293      	cmp	r3, r2
 8002754:	d3b3      	bcc.n	80026be <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f002 fdda 	bl	8005324 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277a:	d10a      	bne.n	8002792 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f004 fee7 	bl	8007550 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fdc4 	bl	8005324 <USB_ReadInterrupts>
 800279c:	4603      	mov	r3, r0
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d115      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f004 fed7 	bl	800756c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	e000      	b.n	80027d2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80027d0:	bf00      	nop
    }
  }
}
 80027d2:	3734      	adds	r7, #52	@ 0x34
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_PCD_SetAddress+0x1a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e012      	b.n	8002818 <HAL_PCD_SetAddress+0x40>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	4611      	mov	r1, r2
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fd23 	bl	8005254 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	70fb      	strb	r3, [r7, #3]
 8002832:	460b      	mov	r3, r1
 8002834:	803b      	strh	r3, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800283e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002842:	2b00      	cmp	r3, #0
 8002844:	da0f      	bge.n	8002866 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 020f 	and.w	r2, r3, #15
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	3310      	adds	r3, #16
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
 8002864:	e00f      	b.n	8002886 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002892:	883b      	ldrh	r3, [r7, #0]
 8002894:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	78ba      	ldrb	r2, [r7, #2]
 80028a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028b4:	78bb      	ldrb	r3, [r7, #2]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d102      	bne.n	80028c0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_PCD_EP_Open+0xae>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e00e      	b.n	80028ec <HAL_PCD_EP_Open+0xcc>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fea3 	bl	8004628 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002904:	2b00      	cmp	r3, #0
 8002906:	da0f      	bge.n	8002928 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 020f 	and.w	r2, r3, #15
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3310      	adds	r3, #16
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
 8002926:	e00f      	b.n	8002948 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_PCD_EP_Close+0x6e>
 800295e:	2302      	movs	r3, #2
 8002960:	e00e      	b.n	8002980 <HAL_PCD_EP_Close+0x8c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fee1 	bl	8004738 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	460b      	mov	r3, r1
 8002996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	3304      	adds	r3, #4
 80029b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ca:	7afb      	ldrb	r3, [r7, #11]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	799b      	ldrb	r3, [r3, #6]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d102      	bne.n	80029e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	799b      	ldrb	r3, [r3, #6]
 80029ec:	461a      	mov	r2, r3
 80029ee:	6979      	ldr	r1, [r7, #20]
 80029f0:	f001 ff7e 	bl	80048f0 <USB_EPStartXfer>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	3310      	adds	r3, #16
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	799b      	ldrb	r3, [r3, #6]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	799b      	ldrb	r3, [r3, #6]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	f001 ff44 	bl	80048f0 <USB_EPStartXfer>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	7912      	ldrb	r2, [r2, #4]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e04f      	b.n	8002b30 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da0f      	bge.n	8002ab8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00d      	b.n	8002ad4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_PCD_EP_SetStall+0x82>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e01d      	b.n	8002b30 <HAL_PCD_EP_SetStall+0xbe>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fad2 	bl	80050ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7999      	ldrb	r1, [r3, #6]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b20:	461a      	mov	r2, r3
 8002b22:	f002 fcc3 	bl	80054ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	7912      	ldrb	r2, [r2, #4]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e042      	b.n	8002bdc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	da0f      	bge.n	8002b7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	705a      	strb	r2, [r3, #1]
 8002b7c:	e00f      	b.n	8002b9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_PCD_EP_ClrStall+0x86>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_ClrStall+0xa4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fadb 	bl	8005188 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da0c      	bge.n	8002c12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 020f 	and.w	r2, r3, #15
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	3310      	adds	r3, #16
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e00c      	b.n	8002c2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 f8fa 	bl	8004e2c <USB_EPStopXfer>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b08a      	sub	sp, #40	@ 0x28
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	3310      	adds	r3, #16
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d901      	bls.n	8002c7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06b      	b.n	8002d56 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d902      	bls.n	8002c9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca2:	e02a      	b.n	8002cfa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	69fa      	ldr	r2, [r7, #28]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d902      	bls.n	8002cc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3303      	adds	r3, #3
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68d9      	ldr	r1, [r3, #12]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6978      	ldr	r0, [r7, #20]
 8002cde:	f002 f94f 	bl	8004f80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	441a      	add	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d809      	bhi.n	8002d24 <PCD_WriteEmptyTxFifo+0xde>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d203      	bcs.n	8002d24 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1bf      	bne.n	8002ca4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d811      	bhi.n	8002d54 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	6939      	ldr	r1, [r7, #16]
 8002d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d50:	4013      	ands	r3, r2
 8002d52:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	333c      	adds	r3, #60	@ 0x3c
 8002d78:	3304      	adds	r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	799b      	ldrb	r3, [r3, #6]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d17b      	bne.n	8002e8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	4a61      	ldr	r2, [pc, #388]	@ (8002f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	f240 80b9 	bls.w	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80b3 	beq.w	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dc8:	6093      	str	r3, [r2, #8]
 8002dca:	e0a7      	b.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de2:	461a      	mov	r2, r3
 8002de4:	2320      	movs	r3, #32
 8002de6:	6093      	str	r3, [r2, #8]
 8002de8:	e098      	b.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 8093 	bne.w	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d90f      	bls.n	8002e1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e14:	461a      	mov	r2, r3
 8002e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1a:	6093      	str	r3, [r2, #8]
 8002e1c:	e07e      	b.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4a:	1ad2      	subs	r2, r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d114      	bne.n	8002e80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	f002 fb1e 	bl	80054ac <USB_EP0_OutStart>
 8002e70:	e006      	b.n	8002e80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f004 fa9e 	bl	80073c8 <HAL_PCD_DataOutStageCallback>
 8002e8c:	e046      	b.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	4a26      	ldr	r2, [pc, #152]	@ (8002f2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d124      	bne.n	8002ee0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eb2:	6093      	str	r3, [r2, #8]
 8002eb4:	e032      	b.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2320      	movs	r3, #32
 8002ed0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f004 fa75 	bl	80073c8 <HAL_PCD_DataOutStageCallback>
 8002ede:	e01d      	b.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d114      	bne.n	8002f10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f002 face 	bl	80054ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f004 fa56 	bl	80073c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	4f54300a 	.word	0x4f54300a
 8002f2c:	4f54310a 	.word	0x4f54310a

08002f30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	333c      	adds	r3, #60	@ 0x3c
 8002f48:	3304      	adds	r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a15      	ldr	r2, [pc, #84]	@ (8002fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d90e      	bls.n	8002f84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f004 fa0d 	bl	80073a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d90c      	bls.n	8002fac <PCD_EP_OutSetupPacket_int+0x7c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	799b      	ldrb	r3, [r3, #6]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d108      	bne.n	8002fac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	f002 fa80 	bl	80054ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	4f54300a 	.word	0x4f54300a

08002fbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70fb      	strb	r3, [r7, #3]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fda:	883b      	ldrh	r3, [r7, #0]
 8002fdc:	0419      	lsls	r1, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fe8:	e028      	b.n	800303c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e00d      	b.n	800301a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3340      	adds	r3, #64	@ 0x40
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	3301      	adds	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	3b01      	subs	r3, #1
 8003020:	429a      	cmp	r2, r3
 8003022:	d3ec      	bcc.n	8002ffe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003024:	883b      	ldrh	r3, [r7, #0]
 8003026:	0418      	lsls	r0, r3, #16
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6819      	ldr	r1, [r3, #0]
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	3b01      	subs	r3, #1
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4302      	orrs	r2, r0
 8003034:	3340      	adds	r3, #64	@ 0x40
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e267      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d075      	beq.n	800318e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030a2:	4b88      	ldr	r3, [pc, #544]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d00c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ae:	4b85      	ldr	r3, [pc, #532]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d112      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ba:	4b82      	ldr	r3, [pc, #520]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	4b7e      	ldr	r3, [pc, #504]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05b      	beq.n	800318c <HAL_RCC_OscConfig+0x108>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d157      	bne.n	800318c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e242      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x74>
 80030ea:	4b76      	ldr	r3, [pc, #472]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a75      	ldr	r2, [pc, #468]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b70      	ldr	r3, [pc, #448]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6f      	ldr	r2, [pc, #444]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b6d      	ldr	r3, [pc, #436]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6c      	ldr	r2, [pc, #432]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xb0>
 800311c:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a68      	ldr	r2, [pc, #416]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b66      	ldr	r3, [pc, #408]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a65      	ldr	r2, [pc, #404]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fa48 	bl	80015d0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fa44 	bl	80015d0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e207      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xc0>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fa34 	bl	80015d0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fa30 	bl	80015d0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1f3      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	4b51      	ldr	r3, [pc, #324]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0xe8>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d063      	beq.n	8003262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800319a:	4b4a      	ldr	r3, [pc, #296]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b47      	ldr	r3, [pc, #284]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b44      	ldr	r3, [pc, #272]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b41      	ldr	r3, [pc, #260]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x152>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1c7      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4937      	ldr	r1, [pc, #220]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e03a      	b.n	8003262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b34      	ldr	r3, [pc, #208]	@ (80032c8 <HAL_RCC_OscConfig+0x244>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fa:	f7fe f9e9 	bl	80015d0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003202:	f7fe f9e5 	bl	80015d0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e1a8      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003220:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4925      	ldr	r1, [pc, #148]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
 8003234:	e015      	b.n	8003262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003236:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_OscConfig+0x244>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe f9c8 	bl	80015d0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe f9c4 	bl	80015d0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e187      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1b      	ldr	r3, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_RCC_OscConfig+0x248>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe f9a8 	bl	80015d0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003284:	f7fe f9a4 	bl	80015d0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e167      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_RCC_OscConfig+0x240>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x200>
 80032a2:	e01b      	b.n	80032dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a4:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_OscConfig+0x248>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7fe f991 	bl	80015d0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b0:	e00e      	b.n	80032d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe f98d 	bl	80015d0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d907      	bls.n	80032d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e150      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000
 80032cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b88      	ldr	r3, [pc, #544]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ea      	bne.n	80032b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8097 	beq.w	8003418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b81      	ldr	r3, [pc, #516]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	4b7d      	ldr	r3, [pc, #500]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	4a7c      	ldr	r2, [pc, #496]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	@ 0x40
 800330a:	4b7a      	ldr	r3, [pc, #488]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331a:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d118      	bne.n	8003358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003326:	4b74      	ldr	r3, [pc, #464]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a73      	ldr	r2, [pc, #460]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003332:	f7fe f94d 	bl	80015d0 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe f949 	bl	80015d0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e10c      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	4b6a      	ldr	r3, [pc, #424]	@ (80034f8 <HAL_RCC_OscConfig+0x474>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x2ea>
 8003360:	4b64      	ldr	r3, [pc, #400]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003364:	4a63      	ldr	r2, [pc, #396]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	@ 0x70
 800336c:	e01c      	b.n	80033a8 <HAL_RCC_OscConfig+0x324>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b05      	cmp	r3, #5
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x30c>
 8003376:	4b5f      	ldr	r3, [pc, #380]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800337a:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6713      	str	r3, [r2, #112]	@ 0x70
 8003382:	4b5c      	ldr	r3, [pc, #368]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	4a5b      	ldr	r2, [pc, #364]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	@ 0x70
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0x324>
 8003390:	4b58      	ldr	r3, [pc, #352]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003394:	4a57      	ldr	r2, [pc, #348]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	@ 0x70
 800339c:	4b55      	ldr	r3, [pc, #340]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a0:	4a54      	ldr	r2, [pc, #336]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d015      	beq.n	80033dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe f90e 	bl	80015d0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f90a 	bl	80015d0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0cb      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	4b49      	ldr	r3, [pc, #292]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RCC_OscConfig+0x334>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe f8f8 	bl	80015d0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fe f8f4 	bl	80015d0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0b5      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	4b3e      	ldr	r3, [pc, #248]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1ee      	bne.n	80033e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800340c:	4b39      	ldr	r3, [pc, #228]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	4a38      	ldr	r2, [pc, #224]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a1 	beq.w	8003564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003422:	4b34      	ldr	r3, [pc, #208]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b08      	cmp	r3, #8
 800342c:	d05c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d141      	bne.n	80034ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_RCC_OscConfig+0x478>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe f8c8 	bl	80015d0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe f8c4 	bl	80015d0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e087      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	3b01      	subs	r3, #1
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	061b      	lsls	r3, r3, #24
 8003486:	491b      	ldr	r1, [pc, #108]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800348c:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_RCC_OscConfig+0x478>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7fe f89d 	bl	80015d0 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fe f899 	bl	80015d0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e05c      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x416>
 80034b8:	e054      	b.n	8003564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_RCC_OscConfig+0x478>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe f886 	bl	80015d0 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe f882 	bl	80015d0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e045      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_RCC_OscConfig+0x470>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x444>
 80034e6:	e03d      	b.n	8003564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e038      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40007000 	.word	0x40007000
 80034fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <HAL_RCC_OscConfig+0x4ec>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d028      	beq.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d121      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11a      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003530:	4013      	ands	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003538:	4293      	cmp	r3, r2
 800353a:	d111      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	3b01      	subs	r3, #1
 800354a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800

08003574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0cc      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b68      	ldr	r3, [pc, #416]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d90c      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b65      	ldr	r3, [pc, #404]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b63      	ldr	r3, [pc, #396]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b8      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c8:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a58      	ldr	r2, [pc, #352]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e0:	4b53      	ldr	r3, [pc, #332]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a52      	ldr	r2, [pc, #328]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b50      	ldr	r3, [pc, #320]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	494d      	ldr	r1, [pc, #308]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d044      	beq.n	8003694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b47      	ldr	r3, [pc, #284]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d119      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d003      	beq.n	8003632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362e:	2b03      	cmp	r3, #3
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b3f      	ldr	r3, [pc, #252]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003642:	4b3b      	ldr	r3, [pc, #236]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e067      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003652:	4b37      	ldr	r3, [pc, #220]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4934      	ldr	r1, [pc, #208]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003664:	f7fd ffb4 	bl	80015d0 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7fd ffb0 	bl	80015d0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e04f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b2b      	ldr	r3, [pc, #172]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1eb      	bne.n	800366c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003694:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d20c      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a2:	4b22      	ldr	r3, [pc, #136]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e032      	b.n	8003722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4916      	ldr	r1, [pc, #88]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e6:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	490e      	ldr	r1, [pc, #56]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fa:	f000 f821 	bl	8003740 <HAL_RCC_GetSysClockFreq>
 80036fe:	4602      	mov	r2, r0
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	490a      	ldr	r1, [pc, #40]	@ (8003734 <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	5ccb      	ldrb	r3, [r1, r3]
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	4a09      	ldr	r2, [pc, #36]	@ (8003738 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003716:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd ff14 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023c00 	.word	0x40023c00
 8003730:	40023800 	.word	0x40023800
 8003734:	08008b50 	.word	0x08008b50
 8003738:	20000000 	.word	0x20000000
 800373c:	20000004 	.word	0x20000004

08003740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003744:	b094      	sub	sp, #80	@ 0x50
 8003746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003758:	4b79      	ldr	r3, [pc, #484]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x200>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d00d      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x40>
 8003764:	2b08      	cmp	r3, #8
 8003766:	f200 80e1 	bhi.w	800392c <HAL_RCC_GetSysClockFreq+0x1ec>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x34>
 800376e:	2b04      	cmp	r3, #4
 8003770:	d003      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0x3a>
 8003772:	e0db      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003774:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x204>)
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003778:	e0db      	b.n	8003932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377a:	4b73      	ldr	r3, [pc, #460]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x208>)
 800377c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800377e:	e0d8      	b.n	8003932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003780:	4b6f      	ldr	r3, [pc, #444]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x200>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003788:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378a:	4b6d      	ldr	r3, [pc, #436]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x200>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d063      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003796:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x200>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	2200      	movs	r2, #0
 800379e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037aa:	2300      	movs	r3, #0
 80037ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037b2:	4622      	mov	r2, r4
 80037b4:	462b      	mov	r3, r5
 80037b6:	f04f 0000 	mov.w	r0, #0
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	0159      	lsls	r1, r3, #5
 80037c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c4:	0150      	lsls	r0, r2, #5
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4621      	mov	r1, r4
 80037cc:	1a51      	subs	r1, r2, r1
 80037ce:	6139      	str	r1, [r7, #16]
 80037d0:	4629      	mov	r1, r5
 80037d2:	eb63 0301 	sbc.w	r3, r3, r1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e4:	4659      	mov	r1, fp
 80037e6:	018b      	lsls	r3, r1, #6
 80037e8:	4651      	mov	r1, sl
 80037ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ee:	4651      	mov	r1, sl
 80037f0:	018a      	lsls	r2, r1, #6
 80037f2:	4651      	mov	r1, sl
 80037f4:	ebb2 0801 	subs.w	r8, r2, r1
 80037f8:	4659      	mov	r1, fp
 80037fa:	eb63 0901 	sbc.w	r9, r3, r1
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800380a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003812:	4690      	mov	r8, r2
 8003814:	4699      	mov	r9, r3
 8003816:	4623      	mov	r3, r4
 8003818:	eb18 0303 	adds.w	r3, r8, r3
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	462b      	mov	r3, r5
 8003820:	eb49 0303 	adc.w	r3, r9, r3
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003832:	4629      	mov	r1, r5
 8003834:	024b      	lsls	r3, r1, #9
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800383c:	4621      	mov	r1, r4
 800383e:	024a      	lsls	r2, r1, #9
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800384a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800384c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003850:	f7fd f8b4 	bl	80009bc <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800385c:	e058      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385e:	4b38      	ldr	r3, [pc, #224]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x200>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	2200      	movs	r2, #0
 8003866:	4618      	mov	r0, r3
 8003868:	4611      	mov	r1, r2
 800386a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	2300      	movs	r3, #0
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
 8003874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003878:	4642      	mov	r2, r8
 800387a:	464b      	mov	r3, r9
 800387c:	f04f 0000 	mov.w	r0, #0
 8003880:	f04f 0100 	mov.w	r1, #0
 8003884:	0159      	lsls	r1, r3, #5
 8003886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800388a:	0150      	lsls	r0, r2, #5
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4641      	mov	r1, r8
 8003892:	ebb2 0a01 	subs.w	sl, r2, r1
 8003896:	4649      	mov	r1, r9
 8003898:	eb63 0b01 	sbc.w	fp, r3, r1
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038b0:	ebb2 040a 	subs.w	r4, r2, sl
 80038b4:	eb63 050b 	sbc.w	r5, r3, fp
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	00eb      	lsls	r3, r5, #3
 80038c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038c6:	00e2      	lsls	r2, r4, #3
 80038c8:	4614      	mov	r4, r2
 80038ca:	461d      	mov	r5, r3
 80038cc:	4643      	mov	r3, r8
 80038ce:	18e3      	adds	r3, r4, r3
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	464b      	mov	r3, r9
 80038d4:	eb45 0303 	adc.w	r3, r5, r3
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038e6:	4629      	mov	r1, r5
 80038e8:	028b      	lsls	r3, r1, #10
 80038ea:	4621      	mov	r1, r4
 80038ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f0:	4621      	mov	r1, r4
 80038f2:	028a      	lsls	r2, r1, #10
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fa:	2200      	movs	r2, #0
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	61fa      	str	r2, [r7, #28]
 8003900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003904:	f7fd f85a 	bl	80009bc <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4613      	mov	r3, r2
 800390e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003910:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x200>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	3301      	adds	r3, #1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800392a:	e002      	b.n	8003932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCC_GetSysClockFreq+0x204>)
 800392e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003934:	4618      	mov	r0, r3
 8003936:	3750      	adds	r7, #80	@ 0x50
 8003938:	46bd      	mov	sp, r7
 800393a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800
 8003944:	00f42400 	.word	0x00f42400
 8003948:	007a1200 	.word	0x007a1200

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	@ (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	08008b60 	.word	0x08008b60

0800398c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003990:	f7ff ffdc 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	@ (80039b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08008b60 	.word	0x08008b60

080039b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e042      	b.n	8003a4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fcd4 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	@ 0x24
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f82b 	bl	8003a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b0c0      	sub	sp, #256	@ 0x100
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a70:	68d9      	ldr	r1, [r3, #12]
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	ea40 0301 	orr.w	r3, r0, r1
 8003a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003aac:	f021 010c 	bic.w	r1, r1, #12
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aba:	430b      	orrs	r3, r1
 8003abc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ace:	6999      	ldr	r1, [r3, #24]
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	ea40 0301 	orr.w	r3, r0, r1
 8003ada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b8f      	ldr	r3, [pc, #572]	@ (8003d20 <UART_SetConfig+0x2cc>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d005      	beq.n	8003af4 <UART_SetConfig+0xa0>
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b8d      	ldr	r3, [pc, #564]	@ (8003d24 <UART_SetConfig+0x2d0>)
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d104      	bne.n	8003afe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7ff ff4a 	bl	800398c <HAL_RCC_GetPCLK2Freq>
 8003af8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003afc:	e003      	b.n	8003b06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003afe:	f7ff ff31 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8003b02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b10:	f040 810c 	bne.w	8003d2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b26:	4622      	mov	r2, r4
 8003b28:	462b      	mov	r3, r5
 8003b2a:	1891      	adds	r1, r2, r2
 8003b2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b2e:	415b      	adcs	r3, r3
 8003b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b36:	4621      	mov	r1, r4
 8003b38:	eb12 0801 	adds.w	r8, r2, r1
 8003b3c:	4629      	mov	r1, r5
 8003b3e:	eb43 0901 	adc.w	r9, r3, r1
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b56:	4690      	mov	r8, r2
 8003b58:	4699      	mov	r9, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	eb18 0303 	adds.w	r3, r8, r3
 8003b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b64:	462b      	mov	r3, r5
 8003b66:	eb49 0303 	adc.w	r3, r9, r3
 8003b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b82:	460b      	mov	r3, r1
 8003b84:	18db      	adds	r3, r3, r3
 8003b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b88:	4613      	mov	r3, r2
 8003b8a:	eb42 0303 	adc.w	r3, r2, r3
 8003b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b98:	f7fc ff10 	bl	80009bc <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <UART_SetConfig+0x2d4>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	011c      	lsls	r4, r3, #4
 8003baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bcc:	4641      	mov	r1, r8
 8003bce:	eb12 0a01 	adds.w	sl, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0b01 	adc.w	fp, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003be4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bec:	4692      	mov	sl, r2
 8003bee:	469b      	mov	fp, r3
 8003bf0:	4643      	mov	r3, r8
 8003bf2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003c00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	18db      	adds	r3, r3, r3
 8003c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c1e:	4613      	mov	r3, r2
 8003c20:	eb42 0303 	adc.w	r3, r2, r3
 8003c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c2e:	f7fc fec5 	bl	80009bc <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <UART_SetConfig+0x2d4>)
 8003c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2264      	movs	r2, #100	@ 0x64
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	1acb      	subs	r3, r1, r3
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c4e:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <UART_SetConfig+0x2d4>)
 8003c50:	fba3 2302 	umull	r2, r3, r3, r2
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c5c:	441c      	add	r4, r3
 8003c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c80:	4641      	mov	r1, r8
 8003c82:	1851      	adds	r1, r2, r1
 8003c84:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c86:	4649      	mov	r1, r9
 8003c88:	414b      	adcs	r3, r1
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c98:	4659      	mov	r1, fp
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4642      	mov	r2, r8
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	eb42 0303 	adc.w	r3, r2, r3
 8003cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	18db      	adds	r3, r3, r3
 8003cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cda:	4613      	mov	r3, r2
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ce6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cea:	f7fc fe67 	bl	80009bc <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <UART_SetConfig+0x2d4>)
 8003cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	2164      	movs	r1, #100	@ 0x64
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	3332      	adds	r3, #50	@ 0x32
 8003d06:	4a08      	ldr	r2, [pc, #32]	@ (8003d28 <UART_SetConfig+0x2d4>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	f003 0207 	and.w	r2, r3, #7
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4422      	add	r2, r4
 8003d1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d1c:	e106      	b.n	8003f2c <UART_SetConfig+0x4d8>
 8003d1e:	bf00      	nop
 8003d20:	40011000 	.word	0x40011000
 8003d24:	40011400 	.word	0x40011400
 8003d28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	464b      	mov	r3, r9
 8003d42:	1891      	adds	r1, r2, r2
 8003d44:	6239      	str	r1, [r7, #32]
 8003d46:	415b      	adcs	r3, r3
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d4e:	4641      	mov	r1, r8
 8003d50:	1854      	adds	r4, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb43 0501 	adc.w	r5, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	00eb      	lsls	r3, r5, #3
 8003d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d66:	00e2      	lsls	r2, r4, #3
 8003d68:	4614      	mov	r4, r2
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	4643      	mov	r3, r8
 8003d6e:	18e3      	adds	r3, r4, r3
 8003d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d74:	464b      	mov	r3, r9
 8003d76:	eb45 0303 	adc.w	r3, r5, r3
 8003d7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	008b      	lsls	r3, r1, #2
 8003d9e:	4621      	mov	r1, r4
 8003da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da4:	4621      	mov	r1, r4
 8003da6:	008a      	lsls	r2, r1, #2
 8003da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003dac:	f7fc fe06 	bl	80009bc <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4b60      	ldr	r3, [pc, #384]	@ (8003f38 <UART_SetConfig+0x4e4>)
 8003db6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	011c      	lsls	r4, r3, #4
 8003dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dd0:	4642      	mov	r2, r8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	1891      	adds	r1, r2, r2
 8003dd6:	61b9      	str	r1, [r7, #24]
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de0:	4641      	mov	r1, r8
 8003de2:	1851      	adds	r1, r2, r1
 8003de4:	6139      	str	r1, [r7, #16]
 8003de6:	4649      	mov	r1, r9
 8003de8:	414b      	adcs	r3, r1
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003df8:	4659      	mov	r1, fp
 8003dfa:	00cb      	lsls	r3, r1, #3
 8003dfc:	4651      	mov	r1, sl
 8003dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e02:	4651      	mov	r1, sl
 8003e04:	00ca      	lsls	r2, r1, #3
 8003e06:	4610      	mov	r0, r2
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e14:	464b      	mov	r3, r9
 8003e16:	460a      	mov	r2, r1
 8003e18:	eb42 0303 	adc.w	r3, r2, r3
 8003e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e38:	4649      	mov	r1, r9
 8003e3a:	008b      	lsls	r3, r1, #2
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e42:	4641      	mov	r1, r8
 8003e44:	008a      	lsls	r2, r1, #2
 8003e46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e4a:	f7fc fdb7 	bl	80009bc <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	4b38      	ldr	r3, [pc, #224]	@ (8003f38 <UART_SetConfig+0x4e4>)
 8003e56:	fba3 2301 	umull	r2, r3, r3, r1
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2264      	movs	r2, #100	@ 0x64
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	1acb      	subs	r3, r1, r3
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	3332      	adds	r3, #50	@ 0x32
 8003e68:	4a33      	ldr	r2, [pc, #204]	@ (8003f38 <UART_SetConfig+0x4e4>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e74:	441c      	add	r4, r3
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e84:	4642      	mov	r2, r8
 8003e86:	464b      	mov	r3, r9
 8003e88:	1891      	adds	r1, r2, r2
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	415b      	adcs	r3, r3
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e94:	4641      	mov	r1, r8
 8003e96:	1851      	adds	r1, r2, r1
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	414b      	adcs	r3, r1
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eac:	4659      	mov	r1, fp
 8003eae:	00cb      	lsls	r3, r1, #3
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	00ca      	lsls	r2, r1, #3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	460a      	mov	r2, r1
 8003eca:	eb42 0303 	adc.w	r3, r2, r3
 8003ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eda:	667a      	str	r2, [r7, #100]	@ 0x64
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ee8:	4649      	mov	r1, r9
 8003eea:	008b      	lsls	r3, r1, #2
 8003eec:	4641      	mov	r1, r8
 8003eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	008a      	lsls	r2, r1, #2
 8003ef6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003efa:	f7fc fd5f 	bl	80009bc <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <UART_SetConfig+0x4e4>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	@ 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	3332      	adds	r3, #50	@ 0x32
 8003f16:	4a08      	ldr	r2, [pc, #32]	@ (8003f38 <UART_SetConfig+0x4e4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 020f 	and.w	r2, r3, #15
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4422      	add	r2, r4
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f32:	46bd      	mov	sp, r7
 8003f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f38:	51eb851f 	.word	0x51eb851f

08003f3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	f107 001c 	add.w	r0, r7, #28
 8003f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d123      	bne.n	8003f9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 fae8 	bl	8005568 <USB_CoreReset>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e01b      	b.n	8003fd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f001 fadc 	bl	8005568 <USB_CoreReset>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003fc8:	e005      	b.n	8003fd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fd6:	7fbb      	ldrb	r3, [r7, #30]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10b      	bne.n	8003ff4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f043 0206 	orr.w	r2, r3, #6
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004000:	b004      	add	sp, #16
 8004002:	4770      	bx	lr

08004004 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d165      	bne.n	80040e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a41      	ldr	r2, [pc, #260]	@ (8004120 <USB_SetTurnaroundTime+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d906      	bls.n	800402e <USB_SetTurnaroundTime+0x2a>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a40      	ldr	r2, [pc, #256]	@ (8004124 <USB_SetTurnaroundTime+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d202      	bcs.n	800402e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004028:	230f      	movs	r3, #15
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e062      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4a3c      	ldr	r2, [pc, #240]	@ (8004124 <USB_SetTurnaroundTime+0x120>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d306      	bcc.n	8004044 <USB_SetTurnaroundTime+0x40>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a3b      	ldr	r2, [pc, #236]	@ (8004128 <USB_SetTurnaroundTime+0x124>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d202      	bcs.n	8004044 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800403e:	230e      	movs	r3, #14
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e057      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4a38      	ldr	r2, [pc, #224]	@ (8004128 <USB_SetTurnaroundTime+0x124>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d306      	bcc.n	800405a <USB_SetTurnaroundTime+0x56>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a37      	ldr	r2, [pc, #220]	@ (800412c <USB_SetTurnaroundTime+0x128>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d202      	bcs.n	800405a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004054:	230d      	movs	r3, #13
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e04c      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a33      	ldr	r2, [pc, #204]	@ (800412c <USB_SetTurnaroundTime+0x128>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d306      	bcc.n	8004070 <USB_SetTurnaroundTime+0x6c>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a32      	ldr	r2, [pc, #200]	@ (8004130 <USB_SetTurnaroundTime+0x12c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d802      	bhi.n	8004070 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800406a:	230c      	movs	r3, #12
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	e041      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a2f      	ldr	r2, [pc, #188]	@ (8004130 <USB_SetTurnaroundTime+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d906      	bls.n	8004086 <USB_SetTurnaroundTime+0x82>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a2e      	ldr	r2, [pc, #184]	@ (8004134 <USB_SetTurnaroundTime+0x130>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d802      	bhi.n	8004086 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004080:	230b      	movs	r3, #11
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e036      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <USB_SetTurnaroundTime+0x130>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d906      	bls.n	800409c <USB_SetTurnaroundTime+0x98>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <USB_SetTurnaroundTime+0x134>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d802      	bhi.n	800409c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004096:	230a      	movs	r3, #10
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	e02b      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <USB_SetTurnaroundTime+0x134>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d906      	bls.n	80040b2 <USB_SetTurnaroundTime+0xae>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4a25      	ldr	r2, [pc, #148]	@ (800413c <USB_SetTurnaroundTime+0x138>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d202      	bcs.n	80040b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040ac:	2309      	movs	r3, #9
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e020      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4a21      	ldr	r2, [pc, #132]	@ (800413c <USB_SetTurnaroundTime+0x138>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d306      	bcc.n	80040c8 <USB_SetTurnaroundTime+0xc4>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4a20      	ldr	r2, [pc, #128]	@ (8004140 <USB_SetTurnaroundTime+0x13c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040c2:	2308      	movs	r3, #8
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e015      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <USB_SetTurnaroundTime+0x13c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <USB_SetTurnaroundTime+0xda>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <USB_SetTurnaroundTime+0x140>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d202      	bcs.n	80040de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80040d8:	2307      	movs	r3, #7
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e00a      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80040de:	2306      	movs	r3, #6
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	e007      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040ea:	2309      	movs	r3, #9
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e001      	b.n	80040f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040f0:	2309      	movs	r3, #9
 80040f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	00d8acbf 	.word	0x00d8acbf
 8004124:	00e4e1c0 	.word	0x00e4e1c0
 8004128:	00f42400 	.word	0x00f42400
 800412c:	01067380 	.word	0x01067380
 8004130:	011a499f 	.word	0x011a499f
 8004134:	01312cff 	.word	0x01312cff
 8004138:	014ca43f 	.word	0x014ca43f
 800413c:	016e3600 	.word	0x016e3600
 8004140:	01a6ab1f 	.word	0x01a6ab1f
 8004144:	01e84800 	.word	0x01e84800

08004148 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d115      	bne.n	80041da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041ba:	200a      	movs	r0, #10
 80041bc:	f7fd fa14 	bl	80015e8 <HAL_Delay>
      ms += 10U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	330a      	adds	r3, #10
 80041c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f001 f93f 	bl	800544a <USB_GetMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d01e      	beq.n	8004210 <USB_SetCurrentMode+0x84>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80041d6:	d9f0      	bls.n	80041ba <USB_SetCurrentMode+0x2e>
 80041d8:	e01a      	b.n	8004210 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041ec:	200a      	movs	r0, #10
 80041ee:	f7fd f9fb 	bl	80015e8 <HAL_Delay>
      ms += 10U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	330a      	adds	r3, #10
 80041f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f001 f926 	bl	800544a <USB_GetMode>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <USB_SetCurrentMode+0x84>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2bc7      	cmp	r3, #199	@ 0xc7
 8004208:	d9f0      	bls.n	80041ec <USB_SetCurrentMode+0x60>
 800420a:	e001      	b.n	8004210 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e005      	b.n	800421c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2bc8      	cmp	r3, #200	@ 0xc8
 8004214:	d101      	bne.n	800421a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004224:	b084      	sub	sp, #16
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e009      	b.n	8004258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3340      	adds	r3, #64	@ 0x40
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	2200      	movs	r2, #0
 8004250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	3301      	adds	r3, #1
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b0e      	cmp	r3, #14
 800425c:	d9f2      	bls.n	8004244 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800425e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11c      	bne.n	80042a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004296:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
 800429e:	e00b      	b.n	80042b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d10d      	bne.n	80042e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042d4:	2100      	movs	r1, #0
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f968 	bl	80045ac <USB_SetDevSpeed>
 80042dc:	e008      	b.n	80042f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042de:	2101      	movs	r1, #1
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f963 	bl	80045ac <USB_SetDevSpeed>
 80042e6:	e003      	b.n	80042f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042e8:	2103      	movs	r1, #3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f95e 	bl	80045ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042f0:	2110      	movs	r1, #16
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8fa 	bl	80044ec <USB_FlushTxFifo>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f924 	bl	8004550 <USB_FlushRxFifo>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004318:	461a      	mov	r2, r3
 800431a:	2300      	movs	r3, #0
 800431c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004324:	461a      	mov	r2, r3
 8004326:	2300      	movs	r3, #0
 8004328:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004330:	461a      	mov	r2, r3
 8004332:	2300      	movs	r3, #0
 8004334:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	e043      	b.n	80043c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800434e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004352:	d118      	bne.n	8004386 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004366:	461a      	mov	r2, r3
 8004368:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e013      	b.n	8004398 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	461a      	mov	r2, r3
 800437e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e008      	b.n	8004398 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004392:	461a      	mov	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a4:	461a      	mov	r2, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b6:	461a      	mov	r2, r3
 80043b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3301      	adds	r3, #1
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80043c8:	461a      	mov	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d3b5      	bcc.n	800433c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	e043      	b.n	800445e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043ec:	d118      	bne.n	8004420 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004400:	461a      	mov	r2, r3
 8004402:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e013      	b.n	8004432 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004416:	461a      	mov	r2, r3
 8004418:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e008      	b.n	8004432 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443e:	461a      	mov	r2, r3
 8004440:	2300      	movs	r3, #0
 8004442:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004456:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	3301      	adds	r3, #1
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004462:	461a      	mov	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4293      	cmp	r3, r2
 8004468:	d3b5      	bcc.n	80043d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800447c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800448a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800448c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f043 0210 	orr.w	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <USB_DevInit+0x2c4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f043 0208 	orr.w	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e4:	b004      	add	sp, #16
 80044e6:	4770      	bx	lr
 80044e8:	803c3800 	.word	0x803c3800

080044ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004506:	d901      	bls.n	800450c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e01b      	b.n	8004544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	daf2      	bge.n	80044fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	019b      	lsls	r3, r3, #6
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3301      	adds	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004530:	d901      	bls.n	8004536 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e006      	b.n	8004544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d0f0      	beq.n	8004524 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004568:	d901      	bls.n	800456e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e018      	b.n	80045a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	daf2      	bge.n	800455c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2210      	movs	r2, #16
 800457e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800458c:	d901      	bls.n	8004592 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e006      	b.n	80045a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b10      	cmp	r3, #16
 800459c:	d0f0      	beq.n	8004580 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045cc:	4313      	orrs	r3, r2
 80045ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 0306 	and.w	r3, r3, #6
 80045f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d102      	bne.n	8004604 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
 8004602:	e00a      	b.n	800461a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d002      	beq.n	8004610 <USB_GetDevSpeed+0x32>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b06      	cmp	r3, #6
 800460e:	d102      	bne.n	8004616 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004610:	2302      	movs	r3, #2
 8004612:	75fb      	strb	r3, [r7, #23]
 8004614:	e001      	b.n	800461a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004616:	230f      	movs	r3, #15
 8004618:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
}
 800461c:	4618      	mov	r0, r3
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d13a      	bne.n	80046ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004662:	4313      	orrs	r3, r2
 8004664:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d155      	bne.n	8004728 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	791b      	ldrb	r3, [r3, #4]
 8004696:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004698:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	059b      	lsls	r3, r3, #22
 800469e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046a0:	4313      	orrs	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e036      	b.n	8004728 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	68f9      	ldr	r1, [r7, #12]
 80046d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046d8:	4313      	orrs	r3, r2
 80046da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11a      	bne.n	8004728 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	791b      	ldrb	r3, [r3, #4]
 800470c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800470e:	430b      	orrs	r3, r1
 8004710:	4313      	orrs	r3, r2
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004726:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d161      	bne.n	8004818 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800476a:	d11f      	bne.n	80047ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004786:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800478a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047cc:	4013      	ands	r3, r2
 80047ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	2101      	movs	r1, #1
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047f0:	4013      	ands	r3, r2
 80047f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	0159      	lsls	r1, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	440b      	add	r3, r1
 800480a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480e:	4619      	mov	r1, r3
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <USB_DeactivateEndpoint+0x1b0>)
 8004812:	4013      	ands	r3, r2
 8004814:	600b      	str	r3, [r1, #0]
 8004816:	e060      	b.n	80048da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800482a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800482e:	d11f      	bne.n	8004870 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800484a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800484e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800486a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800486e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	43db      	mvns	r3, r3
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004890:	4013      	ands	r3, r2
 8004892:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	2101      	movs	r1, #1
 80048a6:	fa01 f303 	lsl.w	r3, r1, r3
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	43db      	mvns	r3, r3
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048b4:	4013      	ands	r3, r2
 80048b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	0159      	lsls	r1, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d2:	4619      	mov	r1, r3
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <USB_DeactivateEndpoint+0x1b4>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	ec337800 	.word	0xec337800
 80048ec:	eff37800 	.word	0xeff37800

080048f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08a      	sub	sp, #40	@ 0x28
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	f040 817f 	bne.w	8004c10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d132      	bne.n	8004980 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004934:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004938:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800493c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800495c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004978:	0cdb      	lsrs	r3, r3, #19
 800497a:	04db      	lsls	r3, r3, #19
 800497c:	6113      	str	r3, [r2, #16]
 800497e:	e097      	b.n	8004ab0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800499a:	0cdb      	lsrs	r3, r3, #19
 800499c:	04db      	lsls	r3, r3, #19
 800499e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	0151      	lsls	r1, r2, #5
 80049b2:	69fa      	ldr	r2, [r7, #28]
 80049b4:	440a      	add	r2, r1
 80049b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80049be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80049c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11a      	bne.n	8004a00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049fc:	6113      	str	r3, [r2, #16]
 80049fe:	e044      	b.n	8004a8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4413      	add	r3, r2
 8004a0a:	1e5a      	subs	r2, r3, #1
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	8afb      	ldrh	r3, [r7, #22]
 8004a26:	04d9      	lsls	r1, r3, #19
 8004a28:	4ba4      	ldr	r3, [pc, #656]	@ (8004cbc <USB_EPStartXfer+0x3cc>)
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	0148      	lsls	r0, r1, #5
 8004a30:	69f9      	ldr	r1, [r7, #28]
 8004a32:	4401      	add	r1, r0
 8004a34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	791b      	ldrb	r3, [r3, #4]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d122      	bne.n	8004a8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	69fa      	ldr	r2, [r7, #28]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004a62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	8afb      	ldrh	r3, [r7, #22]
 8004a74:	075b      	lsls	r3, r3, #29
 8004a76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	0148      	lsls	r0, r1, #5
 8004a7e:	69f9      	ldr	r1, [r7, #28]
 8004a80:	4401      	add	r1, r0
 8004a82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004a86:	4313      	orrs	r3, r2
 8004a88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa0:	69b9      	ldr	r1, [r7, #24]
 8004aa2:	0148      	lsls	r0, r1, #5
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	4401      	add	r1, r0
 8004aa8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004aac:	4313      	orrs	r3, r2
 8004aae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d14b      	bne.n	8004b4e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aca:	461a      	mov	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	791b      	ldrb	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d128      	bne.n	8004b2c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d110      	bne.n	8004b0c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00f      	b.n	8004b2c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e166      	b.n	8004e1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b6c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	791b      	ldrb	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d015      	beq.n	8004ba2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 814e 	beq.w	8004e1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	69f9      	ldr	r1, [r7, #28]
 8004b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004ba0:	e13c      	b.n	8004e1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d110      	bne.n	8004bd4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e00f      	b.n	8004bf4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	68d9      	ldr	r1, [r3, #12]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	b298      	uxth	r0, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4603      	mov	r3, r0
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9b9 	bl	8004f80 <USB_WritePacket>
 8004c0e:	e105      	b.n	8004e1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c2a:	0cdb      	lsrs	r3, r3, #19
 8004c2c:	04db      	lsls	r3, r3, #19
 8004c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d132      	bne.n	8004cc0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c88:	69b9      	ldr	r1, [r7, #24]
 8004c8a:	0148      	lsls	r0, r1, #5
 8004c8c:	69f9      	ldr	r1, [r7, #28]
 8004c8e:	4401      	add	r1, r0
 8004c90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cb6:	6113      	str	r3, [r2, #16]
 8004cb8:	e062      	b.n	8004d80 <USB_EPStartXfer+0x490>
 8004cba:	bf00      	nop
 8004cbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d123      	bne.n	8004d10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cde:	69b9      	ldr	r1, [r7, #24]
 8004ce0:	0148      	lsls	r0, r1, #5
 8004ce2:	69f9      	ldr	r1, [r7, #28]
 8004ce4:	4401      	add	r1, r0
 8004ce6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d0c:	6113      	str	r3, [r2, #16]
 8004d0e:	e037      	b.n	8004d80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4413      	add	r3, r2
 8004d1a:	1e5a      	subs	r2, r3, #1
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	8afa      	ldrh	r2, [r7, #22]
 8004d2c:	fb03 f202 	mul.w	r2, r3, r2
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	8afb      	ldrh	r3, [r7, #22]
 8004d44:	04d9      	lsls	r1, r3, #19
 8004d46:	4b38      	ldr	r3, [pc, #224]	@ (8004e28 <USB_EPStartXfer+0x538>)
 8004d48:	400b      	ands	r3, r1
 8004d4a:	69b9      	ldr	r1, [r7, #24]
 8004d4c:	0148      	lsls	r0, r1, #5
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	4401      	add	r1, r0
 8004d52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	0148      	lsls	r0, r1, #5
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	4401      	add	r1, r0
 8004d78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10d      	bne.n	8004da2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68d9      	ldr	r1, [r3, #12]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9e:	460a      	mov	r2, r1
 8004da0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	791b      	ldrb	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d128      	bne.n	8004dfc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d110      	bne.n	8004ddc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e00f      	b.n	8004dfc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	0151      	lsls	r1, r2, #5
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	440a      	add	r2, r1
 8004e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	1ff80000 	.word	0x1ff80000

08004e2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d14a      	bne.n	8004ee0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e62:	f040 8086 	bne.w	8004f72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004eac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d902      	bls.n	8004ec4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ec2:	e056      	b.n	8004f72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004edc:	d0e7      	beq.n	8004eae <USB_EPStopXfer+0x82>
 8004ede:	e048      	b.n	8004f72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ef8:	d13b      	bne.n	8004f72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3301      	adds	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d902      	bls.n	8004f58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
          break;
 8004f56:	e00c      	b.n	8004f72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f70:	d0e7      	beq.n	8004f42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	@ 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	460b      	mov	r3, r1
 8004f90:	71fb      	strb	r3, [r7, #7]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d123      	bne.n	8004fee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fa6:	88bb      	ldrh	r3, [r7, #4]
 8004fa8:	3303      	adds	r3, #3
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e018      	b.n	8004fe6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	031a      	lsls	r2, r3, #12
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d3e2      	bcc.n	8004fb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3724      	adds	r7, #36	@ 0x24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b08b      	sub	sp, #44	@ 0x2c
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	b29b      	uxth	r3, r3
 8005018:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005022:	2300      	movs	r3, #0
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	e014      	b.n	8005052 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	601a      	str	r2, [r3, #0]
    pDest++;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	3301      	adds	r3, #1
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	3301      	adds	r3, #1
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	3301      	adds	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	3301      	adds	r3, #1
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3e6      	bcc.n	8005028 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800505a:	8bfb      	ldrh	r3, [r7, #30]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800506a:	461a      	mov	r2, r3
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	b2da      	uxtb	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	701a      	strb	r2, [r3, #0]
      i++;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	3301      	adds	r3, #1
 800508a:	623b      	str	r3, [r7, #32]
      pDest++;
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	3301      	adds	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005092:	8bfb      	ldrh	r3, [r7, #30]
 8005094:	3b01      	subs	r3, #1
 8005096:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005098:	8bfb      	ldrh	r3, [r7, #30]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ea      	bne.n	8005074 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	372c      	adds	r7, #44	@ 0x2c
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d12c      	bne.n	8005122 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db12      	blt.n	8005100 <USB_EPSetStall+0x54>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00f      	beq.n	8005100 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800511a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e02b      	b.n	800517a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	db12      	blt.n	800515a <USB_EPSetStall+0xae>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00f      	beq.n	800515a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005154:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005158:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005174:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005178:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d128      	bne.n	80051f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	791b      	ldrb	r3, [r3, #4]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d003      	beq.n	80051d4 <USB_EPClearStall+0x4c>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	791b      	ldrb	r3, [r3, #4]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d138      	bne.n	8005246 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e027      	b.n	8005246 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005210:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005214:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	791b      	ldrb	r3, [r3, #4]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d003      	beq.n	8005226 <USB_EPClearStall+0x9e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	791b      	ldrb	r3, [r3, #4]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d10f      	bne.n	8005246 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005244:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005272:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005276:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ce:	f023 0302 	bic.w	r3, r3, #2
 80052d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052fc:	f023 0303 	bic.w	r3, r3, #3
 8005300:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800533c:	68fb      	ldr	r3, [r7, #12]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	0c1b      	lsrs	r3, r3, #16
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	b29b      	uxth	r3, r3
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053e0:	68bb      	ldr	r3, [r7, #8]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005410:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	fa22 f303 	lsr.w	r3, r2, r3
 800541e:	01db      	lsls	r3, r3, #7
 8005420:	b2db      	uxtb	r3, r3
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4313      	orrs	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4013      	ands	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800543c:	68bb      	ldr	r3, [r7, #8]
}
 800543e:	4618      	mov	r0, r3
 8005440:	371c      	adds	r7, #28
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005480:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005484:	f023 0307 	bic.w	r3, r3, #7
 8005488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800549c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	460b      	mov	r3, r1
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	333c      	adds	r3, #60	@ 0x3c
 80054c2:	3304      	adds	r3, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4a26      	ldr	r2, [pc, #152]	@ (8005564 <USB_EP0_OutStart+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d90a      	bls.n	80054e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e0:	d101      	bne.n	80054e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e037      	b.n	8005556 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ec:	461a      	mov	r2, r3
 80054ee:	2300      	movs	r3, #0
 80054f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005514:	f043 0318 	orr.w	r3, r3, #24
 8005518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005528:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800552c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800552e:	7afb      	ldrb	r3, [r7, #11]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10f      	bne.n	8005554 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800554e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005552:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	4f54300a 	.word	0x4f54300a

08005568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005580:	d901      	bls.n	8005586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e01b      	b.n	80055be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	daf2      	bge.n	8005574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055aa:	d901      	bls.n	80055b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e006      	b.n	80055be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d0f0      	beq.n	800559e <USB_CoreReset+0x36>

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80055d8:	2010      	movs	r0, #16
 80055da:	f002 f94d 	bl	8007878 <USBD_static_malloc>
 80055de:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	32b0      	adds	r2, #176	@ 0xb0
 80055f0:	2100      	movs	r1, #0
 80055f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055f6:	2302      	movs	r3, #2
 80055f8:	e048      	b.n	800568c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	32b0      	adds	r2, #176	@ 0xb0
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	32b0      	adds	r2, #176	@ 0xb0
 8005614:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7c1b      	ldrb	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005626:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <USBD_HID_Init+0xc8>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f003 020f 	and.w	r2, r3, #15
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3326      	adds	r3, #38	@ 0x26
 800563c:	2207      	movs	r2, #7
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	e00c      	b.n	800565c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005642:	4b14      	ldr	r3, [pc, #80]	@ (8005694 <USBD_HID_Init+0xc8>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f003 020f 	and.w	r2, r3, #15
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3326      	adds	r3, #38	@ 0x26
 8005658:	220a      	movs	r2, #10
 800565a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800565c:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <USBD_HID_Init+0xc8>)
 800565e:	7819      	ldrb	r1, [r3, #0]
 8005660:	2304      	movs	r3, #4
 8005662:	2203      	movs	r2, #3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fff6 	bl	8007656 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800566a:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <USBD_HID_Init+0xc8>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	3324      	adds	r3, #36	@ 0x24
 8005680:	2201      	movs	r2, #1
 8005682:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	200000ca 	.word	0x200000ca

08005698 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80056a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005724 <USBD_HID_DeInit+0x8c>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f001 fff9 	bl	80076a2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80056b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005724 <USBD_HID_DeInit+0x8c>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	f003 020f 	and.w	r2, r3, #15
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3324      	adds	r3, #36	@ 0x24
 80056c6:	2200      	movs	r2, #0
 80056c8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80056ca:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <USBD_HID_DeInit+0x8c>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3326      	adds	r3, #38	@ 0x26
 80056e0:	2200      	movs	r2, #0
 80056e2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	32b0      	adds	r2, #176	@ 0xb0
 80056ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d011      	beq.n	800571a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	32b0      	adds	r2, #176	@ 0xb0
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	4618      	mov	r0, r3
 8005706:	f002 f8c5 	bl	8007894 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	32b0      	adds	r2, #176	@ 0xb0
 8005714:	2100      	movs	r1, #0
 8005716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	200000ca 	.word	0x200000ca

08005728 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	32b0      	adds	r2, #176	@ 0xb0
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005750:	2303      	movs	r3, #3
 8005752:	e0e8      	b.n	8005926 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800575c:	2b00      	cmp	r3, #0
 800575e:	d046      	beq.n	80057ee <USBD_HID_Setup+0xc6>
 8005760:	2b20      	cmp	r3, #32
 8005762:	f040 80d8 	bne.w	8005916 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	3b02      	subs	r3, #2
 800576c:	2b09      	cmp	r3, #9
 800576e:	d836      	bhi.n	80057de <USBD_HID_Setup+0xb6>
 8005770:	a201      	add	r2, pc, #4	@ (adr r2, 8005778 <USBD_HID_Setup+0x50>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	080057cf 	.word	0x080057cf
 800577c:	080057af 	.word	0x080057af
 8005780:	080057df 	.word	0x080057df
 8005784:	080057df 	.word	0x080057df
 8005788:	080057df 	.word	0x080057df
 800578c:	080057df 	.word	0x080057df
 8005790:	080057df 	.word	0x080057df
 8005794:	080057df 	.word	0x080057df
 8005798:	080057bd 	.word	0x080057bd
 800579c:	080057a1 	.word	0x080057a1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	885b      	ldrh	r3, [r3, #2]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]
          break;
 80057ac:	e01e      	b.n	80057ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fbf9 	bl	8006fac <USBD_CtlSendData>
          break;
 80057ba:	e017      	b.n	80057ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	885b      	ldrh	r3, [r3, #2]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
          break;
 80057cc:	e00e      	b.n	80057ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3304      	adds	r3, #4
 80057d2:	2201      	movs	r2, #1
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f001 fbe8 	bl	8006fac <USBD_CtlSendData>
          break;
 80057dc:	e006      	b.n	80057ec <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fb66 	bl	8006eb2 <USBD_CtlError>
          ret = USBD_FAIL;
 80057e6:	2303      	movs	r3, #3
 80057e8:	75fb      	strb	r3, [r7, #23]
          break;
 80057ea:	bf00      	nop
      }
      break;
 80057ec:	e09a      	b.n	8005924 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b0b      	cmp	r3, #11
 80057f4:	f200 8086 	bhi.w	8005904 <USBD_HID_Setup+0x1dc>
 80057f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <USBD_HID_Setup+0xd8>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005831 	.word	0x08005831
 8005804:	08005913 	.word	0x08005913
 8005808:	08005905 	.word	0x08005905
 800580c:	08005905 	.word	0x08005905
 8005810:	08005905 	.word	0x08005905
 8005814:	08005905 	.word	0x08005905
 8005818:	0800585b 	.word	0x0800585b
 800581c:	08005905 	.word	0x08005905
 8005820:	08005905 	.word	0x08005905
 8005824:	08005905 	.word	0x08005905
 8005828:	080058b3 	.word	0x080058b3
 800582c:	080058dd 	.word	0x080058dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d107      	bne.n	800584c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800583c:	f107 030a 	add.w	r3, r7, #10
 8005840:	2202      	movs	r2, #2
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fbb1 	bl	8006fac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800584a:	e063      	b.n	8005914 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fb2f 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005854:	2303      	movs	r3, #3
 8005856:	75fb      	strb	r3, [r7, #23]
          break;
 8005858:	e05c      	b.n	8005914 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	885b      	ldrh	r3, [r3, #2]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b22      	cmp	r3, #34	@ 0x22
 8005864:	d108      	bne.n	8005878 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	88db      	ldrh	r3, [r3, #6]
 800586a:	2b4a      	cmp	r3, #74	@ 0x4a
 800586c:	bf28      	it	cs
 800586e:	234a      	movcs	r3, #74	@ 0x4a
 8005870:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005872:	4b2f      	ldr	r3, [pc, #188]	@ (8005930 <USBD_HID_Setup+0x208>)
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	e015      	b.n	80058a4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	0a1b      	lsrs	r3, r3, #8
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b21      	cmp	r3, #33	@ 0x21
 8005882:	d108      	bne.n	8005896 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005884:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <USBD_HID_Setup+0x20c>)
 8005886:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	88db      	ldrh	r3, [r3, #6]
 800588c:	2b09      	cmp	r3, #9
 800588e:	bf28      	it	cs
 8005890:	2309      	movcs	r3, #9
 8005892:	82bb      	strh	r3, [r7, #20]
 8005894:	e006      	b.n	80058a4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f001 fb0a 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800589e:	2303      	movs	r3, #3
 80058a0:	75fb      	strb	r3, [r7, #23]
            break;
 80058a2:	e037      	b.n	8005914 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80058a4:	8abb      	ldrh	r3, [r7, #20]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6939      	ldr	r1, [r7, #16]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f001 fb7e 	bl	8006fac <USBD_CtlSendData>
          break;
 80058b0:	e030      	b.n	8005914 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d107      	bne.n	80058ce <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3308      	adds	r3, #8
 80058c2:	2201      	movs	r2, #1
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 fb70 	bl	8006fac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058cc:	e022      	b.n	8005914 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 faee 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80058d6:	2303      	movs	r3, #3
 80058d8:	75fb      	strb	r3, [r7, #23]
          break;
 80058da:	e01b      	b.n	8005914 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d106      	bne.n	80058f6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	885b      	ldrh	r3, [r3, #2]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058f4:	e00e      	b.n	8005914 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fada 	bl	8006eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80058fe:	2303      	movs	r3, #3
 8005900:	75fb      	strb	r3, [r7, #23]
          break;
 8005902:	e007      	b.n	8005914 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 fad3 	bl	8006eb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	75fb      	strb	r3, [r7, #23]
          break;
 8005910:	e000      	b.n	8005914 <USBD_HID_Setup+0x1ec>
          break;
 8005912:	bf00      	nop
      }
      break;
 8005914:	e006      	b.n	8005924 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 faca 	bl	8006eb2 <USBD_CtlError>
      ret = USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	75fb      	strb	r3, [r7, #23]
      break;
 8005922:	bf00      	nop
  }

  return (uint8_t)ret;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000080 	.word	0x20000080
 8005934:	20000068 	.word	0x20000068

08005938 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	32b0      	adds	r2, #176	@ 0xb0
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	e014      	b.n	800598a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b03      	cmp	r3, #3
 800596a:	d10d      	bne.n	8005988 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	7b1b      	ldrb	r3, [r3, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2201      	movs	r2, #1
 8005978:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800597a:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <USBD_HID_SendReport+0x5c>)
 800597c:	7819      	ldrb	r1, [r3, #0]
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f001 ff35 	bl	80077f2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200000ca 	.word	0x200000ca

08005998 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7c1b      	ldrb	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 80059a8:	2308      	movs	r3, #8
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e001      	b.n	80059b2 <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 80059ae:	230a      	movs	r3, #10
 80059b0:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059c8:	2181      	movs	r1, #129	@ 0x81
 80059ca:	4809      	ldr	r0, [pc, #36]	@ (80059f0 <USBD_HID_GetFSCfgDesc+0x30>)
 80059cc:	f000 fc3b 	bl	8006246 <USBD_GetEpDesc>
 80059d0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	220a      	movs	r2, #10
 80059dc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2222      	movs	r2, #34	@ 0x22
 80059e2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059e4:	4b02      	ldr	r3, [pc, #8]	@ (80059f0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000044 	.word	0x20000044

080059f4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059fc:	2181      	movs	r1, #129	@ 0x81
 80059fe:	4809      	ldr	r0, [pc, #36]	@ (8005a24 <USBD_HID_GetHSCfgDesc+0x30>)
 8005a00:	f000 fc21 	bl	8006246 <USBD_GetEpDesc>
 8005a04:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2207      	movs	r2, #7
 8005a10:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2222      	movs	r2, #34	@ 0x22
 8005a16:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a18:	4b02      	ldr	r3, [pc, #8]	@ (8005a24 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000044 	.word	0x20000044

08005a28 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a30:	2181      	movs	r1, #129	@ 0x81
 8005a32:	4809      	ldr	r0, [pc, #36]	@ (8005a58 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005a34:	f000 fc07 	bl	8006246 <USBD_GetEpDesc>
 8005a38:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	220a      	movs	r2, #10
 8005a44:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2222      	movs	r2, #34	@ 0x22
 8005a4a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a4c:	4b02      	ldr	r3, [pc, #8]	@ (8005a58 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000044 	.word	0x20000044

08005a5c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32b0      	adds	r2, #176	@ 0xb0
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	2200      	movs	r2, #0
 8005a78:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	220a      	movs	r2, #10
 8005a94:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a96:	4b03      	ldr	r3, [pc, #12]	@ (8005aa4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	20000074 	.word	0x20000074

08005aa8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e01f      	b.n	8005b00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	79fa      	ldrb	r2, [r7, #7]
 8005af2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f001 fd47 	bl	8007588 <USBD_LL_Init>
 8005afa:	4603      	mov	r3, r0
 8005afc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e025      	b.n	8005b6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	32ae      	adds	r2, #174	@ 0xae
 8005b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32ae      	adds	r2, #174	@ 0xae
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	f107 020e 	add.w	r2, r7, #14
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 fd4f 	bl	8007620 <USBD_LL_Start>
 8005b82:	4603      	mov	r3, r0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	4798      	blx	r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c00:	2303      	movs	r3, #3
 8005c02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f90c 	bl	8006e3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d01a      	beq.n	8005c80 <USBD_LL_SetupStage+0x72>
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d822      	bhi.n	8005c94 <USBD_LL_SetupStage+0x86>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <USBD_LL_SetupStage+0x4a>
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d00a      	beq.n	8005c6c <USBD_LL_SetupStage+0x5e>
 8005c56:	e01d      	b.n	8005c94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb63 	bl	800632c <USBD_StdDevReq>
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
      break;
 8005c6a:	e020      	b.n	8005cae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fbcb 	bl	8006410 <USBD_StdItfReq>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7e:	e016      	b.n	8005cae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fc2d 	bl	80064e8 <USBD_StdEPReq>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	73fb      	strb	r3, [r7, #15]
      break;
 8005c92:	e00c      	b.n	8005cae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 fd1c 	bl	80076e0 <USBD_LL_StallEP>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	bf00      	nop
  }

  return ret;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d16e      	bne.n	8005dae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005cd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	f040 8098 	bne.w	8005e14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d913      	bls.n	8005d18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	bf28      	it	cs
 8005d0a:	4613      	movcs	r3, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 f977 	bl	8007004 <USBD_CtlContinueRx>
 8005d16:	e07d      	b.n	8005e14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d014      	beq.n	8005d50 <USBD_LL_DataOutStage+0x98>
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d81d      	bhi.n	8005d66 <USBD_LL_DataOutStage+0xae>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <USBD_LL_DataOutStage+0x7c>
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d003      	beq.n	8005d3a <USBD_LL_DataOutStage+0x82>
 8005d32:	e018      	b.n	8005d66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75bb      	strb	r3, [r7, #22]
            break;
 8005d38:	e018      	b.n	8005d6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fa64 	bl	8006212 <USBD_CoreFindIF>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005d4e:	e00d      	b.n	8005d6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fa66 	bl	800622c <USBD_CoreFindEP>
 8005d60:	4603      	mov	r3, r0
 8005d62:	75bb      	strb	r3, [r7, #22]
            break;
 8005d64:	e002      	b.n	8005d6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75bb      	strb	r3, [r7, #22]
            break;
 8005d6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d6c:	7dbb      	ldrb	r3, [r7, #22]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d119      	bne.n	8005da6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d113      	bne.n	8005da6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d7e:	7dba      	ldrb	r2, [r7, #22]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	32ae      	adds	r2, #174	@ 0xae
 8005d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d8e:	7dba      	ldrb	r2, [r7, #22]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d96:	7dba      	ldrb	r2, [r7, #22]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	32ae      	adds	r2, #174	@ 0xae
 8005d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f001 f93d 	bl	8007026 <USBD_CtlSendStatus>
 8005dac:	e032      	b.n	8005e14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005dae:	7afb      	ldrb	r3, [r7, #11]
 8005db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	4619      	mov	r1, r3
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fa37 	bl	800622c <USBD_CoreFindEP>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dc2:	7dbb      	ldrb	r3, [r7, #22]
 8005dc4:	2bff      	cmp	r3, #255	@ 0xff
 8005dc6:	d025      	beq.n	8005e14 <USBD_LL_DataOutStage+0x15c>
 8005dc8:	7dbb      	ldrb	r3, [r7, #22]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d122      	bne.n	8005e14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d117      	bne.n	8005e0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005dda:	7dba      	ldrb	r2, [r7, #22]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	32ae      	adds	r2, #174	@ 0xae
 8005de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00f      	beq.n	8005e0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005dea:	7dba      	ldrb	r2, [r7, #22]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005df2:	7dba      	ldrb	r2, [r7, #22]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	32ae      	adds	r2, #174	@ 0xae
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	7afa      	ldrb	r2, [r7, #11]
 8005e00:	4611      	mov	r1, r2
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	4798      	blx	r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	e000      	b.n	8005e16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	460b      	mov	r3, r1
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e2c:	7afb      	ldrb	r3, [r7, #11]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d16f      	bne.n	8005f12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3314      	adds	r3, #20
 8005e36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d15a      	bne.n	8005ef8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d914      	bls.n	8005e78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	1ad2      	subs	r2, r2, r3
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f001 f8bc 	bl	8006fe2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2100      	movs	r1, #0
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f001 fcdf 	bl	8007834 <USBD_LL_PrepareReceive>
 8005e76:	e03f      	b.n	8005ef8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d11c      	bne.n	8005ebe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d316      	bcc.n	8005ebe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d20f      	bcs.n	8005ebe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f001 f89d 	bl	8006fe2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f001 fcbc 	bl	8007834 <USBD_LL_PrepareReceive>
 8005ebc:	e01c      	b.n	8005ef8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d10f      	bne.n	8005eea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eea:	2180      	movs	r1, #128	@ 0x80
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f001 fbf7 	bl	80076e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f001 f8aa 	bl	800704c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d03a      	beq.n	8005f78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fe42 	bl	8005b8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f10:	e032      	b.n	8005f78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f985 	bl	800622c <USBD_CoreFindEP>
 8005f22:	4603      	mov	r3, r0
 8005f24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	2bff      	cmp	r3, #255	@ 0xff
 8005f2a:	d025      	beq.n	8005f78 <USBD_LL_DataInStage+0x15a>
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d122      	bne.n	8005f78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d11c      	bne.n	8005f78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f3e:	7dfa      	ldrb	r2, [r7, #23]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	32ae      	adds	r2, #174	@ 0xae
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d014      	beq.n	8005f78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f4e:	7dfa      	ldrb	r2, [r7, #23]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f56:	7dfa      	ldrb	r2, [r7, #23]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	32ae      	adds	r2, #174	@ 0xae
 8005f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	7afa      	ldrb	r2, [r7, #11]
 8005f64:	4611      	mov	r1, r2
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	4798      	blx	r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f6e:	7dbb      	ldrb	r3, [r7, #22]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f74:	7dbb      	ldrb	r3, [r7, #22]
 8005f76:	e000      	b.n	8005f7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d014      	beq.n	8005fe8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00e      	beq.n	8005fe8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6852      	ldr	r2, [r2, #4]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	4611      	mov	r1, r2
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4798      	blx	r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fe8:	2340      	movs	r3, #64	@ 0x40
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 fb31 	bl	8007656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2240      	movs	r2, #64	@ 0x40
 8006000:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006004:	2340      	movs	r3, #64	@ 0x40
 8006006:	2200      	movs	r2, #0
 8006008:	2180      	movs	r1, #128	@ 0x80
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 fb23 	bl	8007656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2240      	movs	r2, #64	@ 0x40
 800601a:	621a      	str	r2, [r3, #32]

  return ret;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b04      	cmp	r3, #4
 8006058:	d006      	beq.n	8006068 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006060:	b2da      	uxtb	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2204      	movs	r2, #4
 800606c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b04      	cmp	r3, #4
 8006090:	d106      	bne.n	80060a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006098:	b2da      	uxtb	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d110      	bne.n	80060e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	32ae      	adds	r2, #174	@ 0xae
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	e01c      	b.n	800614a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b03      	cmp	r3, #3
 800611a:	d115      	bne.n	8006148 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	32ae      	adds	r2, #174	@ 0xae
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	32ae      	adds	r2, #174	@ 0xae
 800613a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	4611      	mov	r1, r2
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32ae      	adds	r2, #174	@ 0xae
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e01c      	b.n	80061ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b03      	cmp	r3, #3
 800617e:	d115      	bne.n	80061ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	32ae      	adds	r2, #174	@ 0xae
 800618a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	32ae      	adds	r2, #174	@ 0xae
 800619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	4611      	mov	r1, r2
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00e      	beq.n	8006208 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6852      	ldr	r2, [r2, #4]
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	4611      	mov	r1, r2
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800621e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006238:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	460b      	mov	r3, r1
 8006250:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	b29b      	uxth	r3, r3
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	7812      	ldrb	r2, [r2, #0]
 8006268:	4293      	cmp	r3, r2
 800626a:	d91f      	bls.n	80062ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006272:	e013      	b.n	800629c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006274:	f107 030a 	add.w	r3, r7, #10
 8006278:	4619      	mov	r1, r3
 800627a:	6978      	ldr	r0, [r7, #20]
 800627c:	f000 f81b 	bl	80062b6 <USBD_GetNextDesc>
 8006280:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b05      	cmp	r3, #5
 8006288:	d108      	bne.n	800629c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	789b      	ldrb	r3, [r3, #2]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	429a      	cmp	r2, r3
 8006296:	d008      	beq.n	80062aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006298:	2300      	movs	r3, #0
 800629a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	885b      	ldrh	r3, [r3, #2]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	897b      	ldrh	r3, [r7, #10]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d8e5      	bhi.n	8006274 <USBD_GetEpDesc+0x2e>
 80062a8:	e000      	b.n	80062ac <USBD_GetEpDesc+0x66>
          break;
 80062aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80062ac:	693b      	ldr	r3, [r7, #16]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	4413      	add	r3, r2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4413      	add	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80062e0:	68fb      	ldr	r3, [r7, #12]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3301      	adds	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800630c:	8a3b      	ldrh	r3, [r7, #16]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	b21a      	sxth	r2, r3
 8006312:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006316:	4313      	orrs	r3, r2
 8006318:	b21b      	sxth	r3, r3
 800631a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800631c:	89fb      	ldrh	r3, [r7, #14]
}
 800631e:	4618      	mov	r0, r3
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d005      	beq.n	8006352 <USBD_StdDevReq+0x26>
 8006346:	2b40      	cmp	r3, #64	@ 0x40
 8006348:	d857      	bhi.n	80063fa <USBD_StdDevReq+0xce>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00f      	beq.n	800636e <USBD_StdDevReq+0x42>
 800634e:	2b20      	cmp	r3, #32
 8006350:	d153      	bne.n	80063fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	32ae      	adds	r2, #174	@ 0xae
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
      break;
 800636c:	e04a      	b.n	8006404 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b09      	cmp	r3, #9
 8006374:	d83b      	bhi.n	80063ee <USBD_StdDevReq+0xc2>
 8006376:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <USBD_StdDevReq+0x50>)
 8006378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637c:	080063d1 	.word	0x080063d1
 8006380:	080063e5 	.word	0x080063e5
 8006384:	080063ef 	.word	0x080063ef
 8006388:	080063db 	.word	0x080063db
 800638c:	080063ef 	.word	0x080063ef
 8006390:	080063af 	.word	0x080063af
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063ef 	.word	0x080063ef
 800639c:	080063c7 	.word	0x080063c7
 80063a0:	080063b9 	.word	0x080063b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa3c 	bl	8006824 <USBD_GetDescriptor>
          break;
 80063ac:	e024      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fba1 	bl	8006af8 <USBD_SetAddress>
          break;
 80063b6:	e01f      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fbe0 	bl	8006b80 <USBD_SetConfig>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
          break;
 80063c4:	e018      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fc83 	bl	8006cd4 <USBD_GetConfig>
          break;
 80063ce:	e013      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fcb4 	bl	8006d40 <USBD_GetStatus>
          break;
 80063d8:	e00e      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fce3 	bl	8006da8 <USBD_SetFeature>
          break;
 80063e2:	e009      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fd07 	bl	8006dfa <USBD_ClrFeature>
          break;
 80063ec:	e004      	b.n	80063f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fd5e 	bl	8006eb2 <USBD_CtlError>
          break;
 80063f6:	bf00      	nop
      }
      break;
 80063f8:	e004      	b.n	8006404 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fd58 	bl	8006eb2 <USBD_CtlError>
      break;
 8006402:	bf00      	nop
  }

  return ret;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop

08006410 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d005      	beq.n	8006436 <USBD_StdItfReq+0x26>
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d852      	bhi.n	80064d4 <USBD_StdItfReq+0xc4>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <USBD_StdItfReq+0x26>
 8006432:	2b20      	cmp	r3, #32
 8006434:	d14e      	bne.n	80064d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	2b02      	cmp	r3, #2
 8006442:	d840      	bhi.n	80064c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	889b      	ldrh	r3, [r3, #4]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	d836      	bhi.n	80064bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fedb 	bl	8006212 <USBD_CoreFindIF>
 800645c:	4603      	mov	r3, r0
 800645e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2bff      	cmp	r3, #255	@ 0xff
 8006464:	d01d      	beq.n	80064a2 <USBD_StdItfReq+0x92>
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11a      	bne.n	80064a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800646c:	7bba      	ldrb	r2, [r7, #14]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	32ae      	adds	r2, #174	@ 0xae
 8006472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00f      	beq.n	800649c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800647c:	7bba      	ldrb	r2, [r7, #14]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006484:	7bba      	ldrb	r2, [r7, #14]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	32ae      	adds	r2, #174	@ 0xae
 800648a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
 8006496:	4603      	mov	r3, r0
 8006498:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800649a:	e004      	b.n	80064a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80064a0:	e001      	b.n	80064a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80064a2:	2303      	movs	r3, #3
 80064a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	88db      	ldrh	r3, [r3, #6]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d110      	bne.n	80064d0 <USBD_StdItfReq+0xc0>
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fdb6 	bl	8007026 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064ba:	e009      	b.n	80064d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fcf7 	bl	8006eb2 <USBD_CtlError>
          break;
 80064c4:	e004      	b.n	80064d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fcf2 	bl	8006eb2 <USBD_CtlError>
          break;
 80064ce:	e000      	b.n	80064d2 <USBD_StdItfReq+0xc2>
          break;
 80064d0:	bf00      	nop
      }
      break;
 80064d2:	e004      	b.n	80064de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fceb 	bl	8006eb2 <USBD_CtlError>
      break;
 80064dc:	bf00      	nop
  }

  return ret;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	889b      	ldrh	r3, [r3, #4]
 80064fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	d007      	beq.n	8006518 <USBD_StdEPReq+0x30>
 8006508:	2b40      	cmp	r3, #64	@ 0x40
 800650a:	f200 817f 	bhi.w	800680c <USBD_StdEPReq+0x324>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02a      	beq.n	8006568 <USBD_StdEPReq+0x80>
 8006512:	2b20      	cmp	r3, #32
 8006514:	f040 817a 	bne.w	800680c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fe85 	bl	800622c <USBD_CoreFindEP>
 8006522:	4603      	mov	r3, r0
 8006524:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006526:	7b7b      	ldrb	r3, [r7, #13]
 8006528:	2bff      	cmp	r3, #255	@ 0xff
 800652a:	f000 8174 	beq.w	8006816 <USBD_StdEPReq+0x32e>
 800652e:	7b7b      	ldrb	r3, [r7, #13]
 8006530:	2b00      	cmp	r3, #0
 8006532:	f040 8170 	bne.w	8006816 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006536:	7b7a      	ldrb	r2, [r7, #13]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800653e:	7b7a      	ldrb	r2, [r7, #13]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	32ae      	adds	r2, #174	@ 0xae
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8163 	beq.w	8006816 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006550:	7b7a      	ldrb	r2, [r7, #13]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	32ae      	adds	r2, #174	@ 0xae
 8006556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006566:	e156      	b.n	8006816 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d008      	beq.n	8006582 <USBD_StdEPReq+0x9a>
 8006570:	2b03      	cmp	r3, #3
 8006572:	f300 8145 	bgt.w	8006800 <USBD_StdEPReq+0x318>
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 809b 	beq.w	80066b2 <USBD_StdEPReq+0x1ca>
 800657c:	2b01      	cmp	r3, #1
 800657e:	d03c      	beq.n	80065fa <USBD_StdEPReq+0x112>
 8006580:	e13e      	b.n	8006800 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d002      	beq.n	8006594 <USBD_StdEPReq+0xac>
 800658e:	2b03      	cmp	r3, #3
 8006590:	d016      	beq.n	80065c0 <USBD_StdEPReq+0xd8>
 8006592:	e02c      	b.n	80065ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <USBD_StdEPReq+0xce>
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b80      	cmp	r3, #128	@ 0x80
 800659e:	d00a      	beq.n	80065b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f89b 	bl	80076e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065aa:	2180      	movs	r1, #128	@ 0x80
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 f897 	bl	80076e0 <USBD_LL_StallEP>
 80065b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065b4:	e020      	b.n	80065f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc7a 	bl	8006eb2 <USBD_CtlError>
              break;
 80065be:	e01b      	b.n	80065f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	885b      	ldrh	r3, [r3, #2]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10e      	bne.n	80065e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <USBD_StdEPReq+0xfe>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b80      	cmp	r3, #128	@ 0x80
 80065d2:	d008      	beq.n	80065e6 <USBD_StdEPReq+0xfe>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	88db      	ldrh	r3, [r3, #6]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f87d 	bl	80076e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fd1d 	bl	8007026 <USBD_CtlSendStatus>

              break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fc5e 	bl	8006eb2 <USBD_CtlError>
              break;
 80065f6:	bf00      	nop
          }
          break;
 80065f8:	e107      	b.n	800680a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d002      	beq.n	800660c <USBD_StdEPReq+0x124>
 8006606:	2b03      	cmp	r3, #3
 8006608:	d016      	beq.n	8006638 <USBD_StdEPReq+0x150>
 800660a:	e04b      	b.n	80066a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <USBD_StdEPReq+0x146>
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	2b80      	cmp	r3, #128	@ 0x80
 8006616:	d00a      	beq.n	800662e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 f85f 	bl	80076e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006622:	2180      	movs	r1, #128	@ 0x80
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 f85b 	bl	80076e0 <USBD_LL_StallEP>
 800662a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800662c:	e040      	b.n	80066b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fc3e 	bl	8006eb2 <USBD_CtlError>
              break;
 8006636:	e03b      	b.n	80066b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	885b      	ldrh	r3, [r3, #2]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d136      	bne.n	80066ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f001 f865 	bl	800771e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fce6 	bl	8007026 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fde4 	bl	800622c <USBD_CoreFindEP>
 8006664:	4603      	mov	r3, r0
 8006666:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006668:	7b7b      	ldrb	r3, [r7, #13]
 800666a:	2bff      	cmp	r3, #255	@ 0xff
 800666c:	d01f      	beq.n	80066ae <USBD_StdEPReq+0x1c6>
 800666e:	7b7b      	ldrb	r3, [r7, #13]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11c      	bne.n	80066ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006674:	7b7a      	ldrb	r2, [r7, #13]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800667c:	7b7a      	ldrb	r2, [r7, #13]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	32ae      	adds	r2, #174	@ 0xae
 8006682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d010      	beq.n	80066ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800668c:	7b7a      	ldrb	r2, [r7, #13]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	32ae      	adds	r2, #174	@ 0xae
 8006692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80066a2:	e004      	b.n	80066ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fc03 	bl	8006eb2 <USBD_CtlError>
              break;
 80066ac:	e000      	b.n	80066b0 <USBD_StdEPReq+0x1c8>
              break;
 80066ae:	bf00      	nop
          }
          break;
 80066b0:	e0ab      	b.n	800680a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d002      	beq.n	80066c4 <USBD_StdEPReq+0x1dc>
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d032      	beq.n	8006728 <USBD_StdEPReq+0x240>
 80066c2:	e097      	b.n	80067f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <USBD_StdEPReq+0x1f2>
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b80      	cmp	r3, #128	@ 0x80
 80066ce:	d004      	beq.n	80066da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fbed 	bl	8006eb2 <USBD_CtlError>
                break;
 80066d8:	e091      	b.n	80067fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da0b      	bge.n	80066fa <USBD_StdEPReq+0x212>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	3310      	adds	r3, #16
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	3304      	adds	r3, #4
 80066f8:	e00b      	b.n	8006712 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2202      	movs	r2, #2
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc43 	bl	8006fac <USBD_CtlSendData>
              break;
 8006726:	e06a      	b.n	80067fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800672c:	2b00      	cmp	r3, #0
 800672e:	da11      	bge.n	8006754 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	f003 020f 	and.w	r2, r3, #15
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	3324      	adds	r3, #36	@ 0x24
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d117      	bne.n	800677a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fbb0 	bl	8006eb2 <USBD_CtlError>
                  break;
 8006752:	e054      	b.n	80067fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	f003 020f 	and.w	r2, r3, #15
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fb9d 	bl	8006eb2 <USBD_CtlError>
                  break;
 8006778:	e041      	b.n	80067fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800677a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800677e:	2b00      	cmp	r3, #0
 8006780:	da0b      	bge.n	800679a <USBD_StdEPReq+0x2b2>
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	3310      	adds	r3, #16
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	3304      	adds	r3, #4
 8006798:	e00b      	b.n	80067b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <USBD_StdEPReq+0x2d8>
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	2b80      	cmp	r3, #128	@ 0x80
 80067be:	d103      	bne.n	80067c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	e00e      	b.n	80067e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 ffc5 	bl	800775c <USBD_LL_IsStallEP>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e002      	b.n	80067e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2202      	movs	r2, #2
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fbdd 	bl	8006fac <USBD_CtlSendData>
              break;
 80067f2:	e004      	b.n	80067fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fb5b 	bl	8006eb2 <USBD_CtlError>
              break;
 80067fc:	bf00      	nop
          }
          break;
 80067fe:	e004      	b.n	800680a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fb55 	bl	8006eb2 <USBD_CtlError>
          break;
 8006808:	bf00      	nop
      }
      break;
 800680a:	e005      	b.n	8006818 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb4f 	bl	8006eb2 <USBD_CtlError>
      break;
 8006814:	e000      	b.n	8006818 <USBD_StdEPReq+0x330>
      break;
 8006816:	bf00      	nop
  }

  return ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	885b      	ldrh	r3, [r3, #2]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	2b06      	cmp	r3, #6
 8006846:	f200 8128 	bhi.w	8006a9a <USBD_GetDescriptor+0x276>
 800684a:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <USBD_GetDescriptor+0x2c>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	0800686d 	.word	0x0800686d
 8006854:	08006885 	.word	0x08006885
 8006858:	080068c5 	.word	0x080068c5
 800685c:	08006a9b 	.word	0x08006a9b
 8006860:	08006a9b 	.word	0x08006a9b
 8006864:	08006a3b 	.word	0x08006a3b
 8006868:	08006a67 	.word	0x08006a67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	7c12      	ldrb	r2, [r2, #16]
 8006878:	f107 0108 	add.w	r1, r7, #8
 800687c:	4610      	mov	r0, r2
 800687e:	4798      	blx	r3
 8006880:	60f8      	str	r0, [r7, #12]
      break;
 8006882:	e112      	b.n	8006aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7c1b      	ldrb	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	f107 0208 	add.w	r2, r7, #8
 8006898:	4610      	mov	r0, r2
 800689a:	4798      	blx	r3
 800689c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	2202      	movs	r2, #2
 80068a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068a6:	e100      	b.n	8006aaa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f107 0208 	add.w	r2, r7, #8
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
 80068b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	2202      	movs	r2, #2
 80068c0:	701a      	strb	r2, [r3, #0]
      break;
 80068c2:	e0f2      	b.n	8006aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	885b      	ldrh	r3, [r3, #2]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	f200 80ac 	bhi.w	8006a28 <USBD_GetDescriptor+0x204>
 80068d0:	a201      	add	r2, pc, #4	@ (adr r2, 80068d8 <USBD_GetDescriptor+0xb4>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068f1 	.word	0x080068f1
 80068dc:	08006925 	.word	0x08006925
 80068e0:	08006959 	.word	0x08006959
 80068e4:	0800698d 	.word	0x0800698d
 80068e8:	080069c1 	.word	0x080069c1
 80068ec:	080069f5 	.word	0x080069f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	7c12      	ldrb	r2, [r2, #16]
 8006908:	f107 0108 	add.w	r1, r7, #8
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006912:	e091      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 facb 	bl	8006eb2 <USBD_CtlError>
            err++;
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	3301      	adds	r3, #1
 8006920:	72fb      	strb	r3, [r7, #11]
          break;
 8006922:	e089      	b.n	8006a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006946:	e077      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fab1 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
          break;
 8006956:	e06f      	b.n	8006a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e05d      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa97 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e055      	b.n	8006a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e043      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa7d 	bl	8006eb2 <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e03b      	b.n	8006a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e029      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa63 	bl	8006eb2 <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e021      	b.n	8006a38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e00f      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa49 	bl	8006eb2 <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e007      	b.n	8006a38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa41 	bl	8006eb2 <USBD_CtlError>
          err++;
 8006a30:	7afb      	ldrb	r3, [r7, #11]
 8006a32:	3301      	adds	r3, #1
 8006a34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a36:	bf00      	nop
      }
      break;
 8006a38:	e037      	b.n	8006aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	7c1b      	ldrb	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4a:	f107 0208 	add.w	r2, r7, #8
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4798      	blx	r3
 8006a52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a54:	e029      	b.n	8006aaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa2a 	bl	8006eb2 <USBD_CtlError>
        err++;
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	3301      	adds	r3, #1
 8006a62:	72fb      	strb	r3, [r7, #11]
      break;
 8006a64:	e021      	b.n	8006aaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7c1b      	ldrb	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10d      	bne.n	8006a8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a76:	f107 0208 	add.w	r2, r7, #8
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4798      	blx	r3
 8006a7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	2207      	movs	r2, #7
 8006a86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a88:	e00f      	b.n	8006aaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa10 	bl	8006eb2 <USBD_CtlError>
        err++;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	3301      	adds	r3, #1
 8006a96:	72fb      	strb	r3, [r7, #11]
      break;
 8006a98:	e007      	b.n	8006aaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fa08 	bl	8006eb2 <USBD_CtlError>
      err++;
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	72fb      	strb	r3, [r7, #11]
      break;
 8006aa8:	bf00      	nop
  }

  if (err != 0U)
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d11e      	bne.n	8006aee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	88db      	ldrh	r3, [r3, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d016      	beq.n	8006ae6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00e      	beq.n	8006adc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	88da      	ldrh	r2, [r3, #6]
 8006ac2:	893b      	ldrh	r3, [r7, #8]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	bf28      	it	cs
 8006ac8:	4613      	movcs	r3, r2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ace:	893b      	ldrh	r3, [r7, #8]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fa69 	bl	8006fac <USBD_CtlSendData>
 8006ada:	e009      	b.n	8006af0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9e7 	bl	8006eb2 <USBD_CtlError>
 8006ae4:	e004      	b.n	8006af0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa9d 	bl	8007026 <USBD_CtlSendStatus>
 8006aec:	e000      	b.n	8006af0 <USBD_GetDescriptor+0x2cc>
    return;
 8006aee:	bf00      	nop
  }
}
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	889b      	ldrh	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d131      	bne.n	8006b6e <USBD_SetAddress+0x76>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	88db      	ldrh	r3, [r3, #6]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d12d      	bne.n	8006b6e <USBD_SetAddress+0x76>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	885b      	ldrh	r3, [r3, #2]
 8006b16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b18:	d829      	bhi.n	8006b6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	885b      	ldrh	r3, [r3, #2]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d104      	bne.n	8006b3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f9bc 	bl	8006eb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3a:	e01d      	b.n	8006b78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7bfa      	ldrb	r2, [r7, #15]
 8006b40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fe33 	bl	80077b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa69 	bl	8007026 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b62:	e009      	b.n	8006b78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6c:	e004      	b.n	8006b78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f99e 	bl	8006eb2 <USBD_CtlError>
  }
}
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	885b      	ldrh	r3, [r3, #2]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006b96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b98:	4b4d      	ldr	r3, [pc, #308]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d905      	bls.n	8006bac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f985 	bl	8006eb2 <USBD_CtlError>
    return USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e08c      	b.n	8006cc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d002      	beq.n	8006bbe <USBD_SetConfig+0x3e>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d029      	beq.n	8006c10 <USBD_SetConfig+0x90>
 8006bbc:	e075      	b.n	8006caa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bbe:	4b44      	ldr	r3, [pc, #272]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d020      	beq.n	8006c08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006bc6:	4b42      	ldr	r3, [pc, #264]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fe ffe3 	bl	8005ba2 <USBD_SetClassConfig>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d008      	beq.n	8006bf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f962 	bl	8006eb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bf6:	e065      	b.n	8006cc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fa14 	bl	8007026 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2203      	movs	r2, #3
 8006c02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c06:	e05d      	b.n	8006cc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fa0c 	bl	8007026 <USBD_CtlSendStatus>
      break;
 8006c0e:	e059      	b.n	8006cc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c10:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d112      	bne.n	8006c3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006c20:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c2a:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fe ffd2 	bl	8005bda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f9f5 	bl	8007026 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c3c:	e042      	b.n	8006cc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c3e:	4b24      	ldr	r3, [pc, #144]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d02a      	beq.n	8006ca2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fe ffc0 	bl	8005bda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c64:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fe ff99 	bl	8005ba2 <USBD_SetClassConfig>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00f      	beq.n	8006c9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f918 	bl	8006eb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fe ffa5 	bl	8005bda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c98:	e014      	b.n	8006cc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9c3 	bl	8007026 <USBD_CtlSendStatus>
      break;
 8006ca0:	e010      	b.n	8006cc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9bf 	bl	8007026 <USBD_CtlSendStatus>
      break;
 8006ca8:	e00c      	b.n	8006cc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f900 	bl	8006eb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cb2:	4b07      	ldr	r3, [pc, #28]	@ (8006cd0 <USBD_SetConfig+0x150>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fe ff8e 	bl	8005bda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc2:	bf00      	nop
  }

  return ret;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000184 	.word	0x20000184

08006cd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	88db      	ldrh	r3, [r3, #6]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d004      	beq.n	8006cf0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f8e2 	bl	8006eb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cee:	e023      	b.n	8006d38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	dc02      	bgt.n	8006d02 <USBD_GetConfig+0x2e>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dc03      	bgt.n	8006d08 <USBD_GetConfig+0x34>
 8006d00:	e015      	b.n	8006d2e <USBD_GetConfig+0x5a>
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d00b      	beq.n	8006d1e <USBD_GetConfig+0x4a>
 8006d06:	e012      	b.n	8006d2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3308      	adds	r3, #8
 8006d12:	2201      	movs	r2, #1
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f948 	bl	8006fac <USBD_CtlSendData>
        break;
 8006d1c:	e00c      	b.n	8006d38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3304      	adds	r3, #4
 8006d22:	2201      	movs	r2, #1
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f940 	bl	8006fac <USBD_CtlSendData>
        break;
 8006d2c:	e004      	b.n	8006d38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f8be 	bl	8006eb2 <USBD_CtlError>
        break;
 8006d36:	bf00      	nop
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d81e      	bhi.n	8006d96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	88db      	ldrh	r3, [r3, #6]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d004      	beq.n	8006d6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8a5 	bl	8006eb2 <USBD_CtlError>
        break;
 8006d68:	e01a      	b.n	8006da0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f043 0202 	orr.w	r2, r3, #2
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f90c 	bl	8006fac <USBD_CtlSendData>
      break;
 8006d94:	e004      	b.n	8006da0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f88a 	bl	8006eb2 <USBD_CtlError>
      break;
 8006d9e:	bf00      	nop
  }
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d107      	bne.n	8006dca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f92f 	bl	8007026 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006dc8:	e013      	b.n	8006df2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d10b      	bne.n	8006dea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	889b      	ldrh	r3, [r3, #4]
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f91f 	bl	8007026 <USBD_CtlSendStatus>
}
 8006de8:	e003      	b.n	8006df2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f860 	bl	8006eb2 <USBD_CtlError>
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d80b      	bhi.n	8006e2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d10c      	bne.n	8006e34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f8ff 	bl	8007026 <USBD_CtlSendStatus>
      }
      break;
 8006e28:	e004      	b.n	8006e34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f840 	bl	8006eb2 <USBD_CtlError>
      break;
 8006e32:	e000      	b.n	8006e36 <USBD_ClrFeature+0x3c>
      break;
 8006e34:	bf00      	nop
  }
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	781a      	ldrb	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	781a      	ldrb	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff fa40 	bl	80062ee <SWAPBYTE>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	461a      	mov	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fa33 	bl	80062ee <SWAPBYTE>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fa26 	bl	80062ee <SWAPBYTE>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	80da      	strh	r2, [r3, #6]
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ebc:	2180      	movs	r1, #128	@ 0x80
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fc0e 	bl	80076e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc0a 	bl	80076e0 <USBD_LL_StallEP>
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d042      	beq.n	8006f70 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006eee:	6938      	ldr	r0, [r7, #16]
 8006ef0:	f000 f842 	bl	8006f78 <USBD_GetLen>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006efe:	d808      	bhi.n	8006f12 <USBD_GetString+0x3e>
 8006f00:	6938      	ldr	r0, [r7, #16]
 8006f02:	f000 f839 	bl	8006f78 <USBD_GetLen>
 8006f06:	4603      	mov	r3, r0
 8006f08:	3301      	adds	r3, #1
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	e001      	b.n	8006f16 <USBD_GetString+0x42>
 8006f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	4413      	add	r3, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7812      	ldrb	r2, [r2, #0]
 8006f24:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	2203      	movs	r2, #3
 8006f34:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f3c:	e013      	b.n	8006f66 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	4413      	add	r3, r2
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	613b      	str	r3, [r7, #16]
    idx++;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	3301      	adds	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	3301      	adds	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e7      	bne.n	8006f3e <USBD_GetString+0x6a>
 8006f6e:	e000      	b.n	8006f72 <USBD_GetString+0x9e>
    return;
 8006f70:	bf00      	nop
  }
}
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f88:	e005      	b.n	8006f96 <USBD_GetLen+0x1e>
  {
    len++;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f5      	bne.n	8006f8a <USBD_GetLen+0x12>
  }

  return len;
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 fc0d 	bl	80077f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fbfc 	bl	80077f2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	2100      	movs	r1, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 fc0c 	bl	8007834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2204      	movs	r2, #4
 8007032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007036:	2300      	movs	r3, #0
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fbd8 	bl	80077f2 <USBD_LL_Transmit>

  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2205      	movs	r2, #5
 8007058:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fbe6 	bl	8007834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007078:	2200      	movs	r2, #0
 800707a:	490e      	ldr	r1, [pc, #56]	@ (80070b4 <MX_USB_DEVICE_Init+0x40>)
 800707c:	480e      	ldr	r0, [pc, #56]	@ (80070b8 <MX_USB_DEVICE_Init+0x44>)
 800707e:	f7fe fd13 	bl	8005aa8 <USBD_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007088:	f7fa f950 	bl	800132c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800708c:	490b      	ldr	r1, [pc, #44]	@ (80070bc <MX_USB_DEVICE_Init+0x48>)
 800708e:	480a      	ldr	r0, [pc, #40]	@ (80070b8 <MX_USB_DEVICE_Init+0x44>)
 8007090:	f7fe fd3a 	bl	8005b08 <USBD_RegisterClass>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800709a:	f7fa f947 	bl	800132c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800709e:	4806      	ldr	r0, [pc, #24]	@ (80070b8 <MX_USB_DEVICE_Init+0x44>)
 80070a0:	f7fe fd68 	bl	8005b74 <USBD_Start>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80070aa:	f7fa f93f 	bl	800132c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	200000cc 	.word	0x200000cc
 80070b8:	20000188 	.word	0x20000188
 80070bc:	2000000c 	.word	0x2000000c

080070c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2212      	movs	r2, #18
 80070d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070d2:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	200000e8 	.word	0x200000e8

080070e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2204      	movs	r2, #4
 80070f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	@ (8007104 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	200000fc 	.word	0x200000fc

08007108 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	4907      	ldr	r1, [pc, #28]	@ (800713c <USBD_FS_ProductStrDescriptor+0x34>)
 800711e:	4808      	ldr	r0, [pc, #32]	@ (8007140 <USBD_FS_ProductStrDescriptor+0x38>)
 8007120:	f7ff fed8 	bl	8006ed4 <USBD_GetString>
 8007124:	e004      	b.n	8007130 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	4904      	ldr	r1, [pc, #16]	@ (800713c <USBD_FS_ProductStrDescriptor+0x34>)
 800712a:	4805      	ldr	r0, [pc, #20]	@ (8007140 <USBD_FS_ProductStrDescriptor+0x38>)
 800712c:	f7ff fed2 	bl	8006ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007130:	4b02      	ldr	r3, [pc, #8]	@ (800713c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000464 	.word	0x20000464
 8007140:	08008b08 	.word	0x08008b08

08007144 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	4904      	ldr	r1, [pc, #16]	@ (8007164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007154:	4804      	ldr	r0, [pc, #16]	@ (8007168 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007156:	f7ff febd 	bl	8006ed4 <USBD_GetString>
  return USBD_StrDesc;
 800715a:	4b02      	ldr	r3, [pc, #8]	@ (8007164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000464 	.word	0x20000464
 8007168:	08008b20 	.word	0x08008b20

0800716c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	221a      	movs	r2, #26
 800717c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800717e:	f000 f843 	bl	8007208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007182:	4b02      	ldr	r3, [pc, #8]	@ (800718c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000100 	.word	0x20000100

08007190 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4907      	ldr	r1, [pc, #28]	@ (80071c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071a6:	4808      	ldr	r0, [pc, #32]	@ (80071c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071a8:	f7ff fe94 	bl	8006ed4 <USBD_GetString>
 80071ac:	e004      	b.n	80071b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4904      	ldr	r1, [pc, #16]	@ (80071c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071b2:	4805      	ldr	r0, [pc, #20]	@ (80071c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071b4:	f7ff fe8e 	bl	8006ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000464 	.word	0x20000464
 80071c8:	08008b34 	.word	0x08008b34

080071cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4907      	ldr	r1, [pc, #28]	@ (8007200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071e2:	4808      	ldr	r0, [pc, #32]	@ (8007204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e4:	f7ff fe76 	bl	8006ed4 <USBD_GetString>
 80071e8:	e004      	b.n	80071f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4904      	ldr	r1, [pc, #16]	@ (8007200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ee:	4805      	ldr	r0, [pc, #20]	@ (8007204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071f0:	f7ff fe70 	bl	8006ed4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f4:	4b02      	ldr	r3, [pc, #8]	@ (8007200 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000464 	.word	0x20000464
 8007204:	08008b40 	.word	0x08008b40

08007208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800720e:	4b0f      	ldr	r3, [pc, #60]	@ (800724c <Get_SerialNum+0x44>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007214:	4b0e      	ldr	r3, [pc, #56]	@ (8007250 <Get_SerialNum+0x48>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800721a:	4b0e      	ldr	r3, [pc, #56]	@ (8007254 <Get_SerialNum+0x4c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800722e:	2208      	movs	r2, #8
 8007230:	4909      	ldr	r1, [pc, #36]	@ (8007258 <Get_SerialNum+0x50>)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f814 	bl	8007260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007238:	2204      	movs	r2, #4
 800723a:	4908      	ldr	r1, [pc, #32]	@ (800725c <Get_SerialNum+0x54>)
 800723c:	68b8      	ldr	r0, [r7, #8]
 800723e:	f000 f80f 	bl	8007260 <IntToUnicode>
  }
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	1fff7a10 	.word	0x1fff7a10
 8007250:	1fff7a14 	.word	0x1fff7a14
 8007254:	1fff7a18 	.word	0x1fff7a18
 8007258:	20000102 	.word	0x20000102
 800725c:	20000112 	.word	0x20000112

08007260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e027      	b.n	80072c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	0f1b      	lsrs	r3, r3, #28
 800727c:	2b09      	cmp	r3, #9
 800727e:	d80b      	bhi.n	8007298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	0f1b      	lsrs	r3, r3, #28
 8007284:	b2da      	uxtb	r2, r3
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4619      	mov	r1, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	440b      	add	r3, r1
 8007290:	3230      	adds	r2, #48	@ 0x30
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e00a      	b.n	80072ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	0f1b      	lsrs	r3, r3, #28
 800729c:	b2da      	uxtb	r2, r3
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	4619      	mov	r1, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	440b      	add	r3, r1
 80072a8:	3237      	adds	r2, #55	@ 0x37
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	3301      	adds	r3, #1
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	3301      	adds	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
 80072c8:	7dfa      	ldrb	r2, [r7, #23]
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3d3      	bcc.n	8007278 <IntToUnicode+0x18>
  }
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	@ 0x28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e8:	f107 0314 	add.w	r3, r7, #20
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	609a      	str	r2, [r3, #8]
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007300:	d147      	bne.n	8007392 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	4b25      	ldr	r3, [pc, #148]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	4a24      	ldr	r2, [pc, #144]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	6313      	str	r3, [r2, #48]	@ 0x30
 8007312:	4b22      	ldr	r3, [pc, #136]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 8007314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800731e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8007322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007324:	2302      	movs	r3, #2
 8007326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800732c:	2303      	movs	r3, #3
 800732e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007330:	230a      	movs	r3, #10
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007334:	f107 0314 	add.w	r3, r7, #20
 8007338:	4619      	mov	r1, r3
 800733a:	4819      	ldr	r0, [pc, #100]	@ (80073a0 <HAL_PCD_MspInit+0xc0>)
 800733c:	f7fa fa8a 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007340:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800734e:	f107 0314 	add.w	r3, r7, #20
 8007352:	4619      	mov	r1, r3
 8007354:	4812      	ldr	r0, [pc, #72]	@ (80073a0 <HAL_PCD_MspInit+0xc0>)
 8007356:	f7fa fa7d 	bl	8001854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800735a:	4b10      	ldr	r3, [pc, #64]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 800735c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735e:	4a0f      	ldr	r2, [pc, #60]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 8007360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007364:	6353      	str	r3, [r2, #52]	@ 0x34
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 800736c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736e:	4a0b      	ldr	r2, [pc, #44]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 8007370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007374:	6453      	str	r3, [r2, #68]	@ 0x44
 8007376:	4b09      	ldr	r3, [pc, #36]	@ (800739c <HAL_PCD_MspInit+0xbc>)
 8007378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	2043      	movs	r0, #67	@ 0x43
 8007388:	f7fa fa2d 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800738c:	2043      	movs	r0, #67	@ 0x43
 800738e:	f7fa fa46 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007392:	bf00      	nop
 8007394:	3728      	adds	r7, #40	@ 0x28
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800
 80073a0:	40020000 	.word	0x40020000

080073a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7fe fc27 	bl	8005c0e <USBD_LL_SetupStage>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	4619      	mov	r1, r3
 80073f2:	f7fe fc61 	bl	8005cb8 <USBD_LL_DataOutStage>
}
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	3320      	adds	r3, #32
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	4619      	mov	r1, r3
 8007426:	f7fe fcfa 	bl	8005e1e <USBD_LL_DataInStage>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fe34 	bl	80060ae <USBD_LL_SOF>
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	79db      	ldrb	r3, [r3, #7]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]
 8007466:	e008      	b.n	800747a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	79db      	ldrb	r3, [r3, #7]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d102      	bne.n	8007476 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
 8007474:	e001      	b.n	800747a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007476:	f7f9 ff59 	bl	800132c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007480:	7bfa      	ldrb	r2, [r7, #15]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fdce 	bl	8006026 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fd76 	bl	8005f82 <USBD_LL_Reset>
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fdc9 	bl	8006046 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7adb      	ldrb	r3, [r3, #11]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <HAL_PCD_SuspendCallback+0x48>)
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	4a03      	ldr	r2, [pc, #12]	@ (80074e8 <HAL_PCD_SuspendCallback+0x48>)
 80074da:	f043 0306 	orr.w	r3, r3, #6
 80074de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed00 	.word	0xe000ed00

080074ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fdbf 	bl	800607e <USBD_LL_Resume>
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800751a:	78fa      	ldrb	r2, [r7, #3]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fe17 	bl	8006152 <USBD_LL_IsoOUTIncomplete>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fdd3 	bl	80060ee <USBD_LL_IsoINIncomplete>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fe29 	bl	80061b6 <USBD_LL_DevConnected>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fe26 	bl	80061cc <USBD_LL_DevDisconnected>
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d13c      	bne.n	8007612 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007598:	4a20      	ldr	r2, [pc, #128]	@ (800761c <USBD_LL_Init+0x94>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1e      	ldr	r2, [pc, #120]	@ (800761c <USBD_LL_Init+0x94>)
 80075a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075a8:	4b1c      	ldr	r3, [pc, #112]	@ (800761c <USBD_LL_Init+0x94>)
 80075aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80075ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075b0:	4b1a      	ldr	r3, [pc, #104]	@ (800761c <USBD_LL_Init+0x94>)
 80075b2:	2204      	movs	r2, #4
 80075b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075b6:	4b19      	ldr	r3, [pc, #100]	@ (800761c <USBD_LL_Init+0x94>)
 80075b8:	2202      	movs	r2, #2
 80075ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075bc:	4b17      	ldr	r3, [pc, #92]	@ (800761c <USBD_LL_Init+0x94>)
 80075be:	2200      	movs	r2, #0
 80075c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075c2:	4b16      	ldr	r3, [pc, #88]	@ (800761c <USBD_LL_Init+0x94>)
 80075c4:	2202      	movs	r2, #2
 80075c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80075c8:	4b14      	ldr	r3, [pc, #80]	@ (800761c <USBD_LL_Init+0x94>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075ce:	4b13      	ldr	r3, [pc, #76]	@ (800761c <USBD_LL_Init+0x94>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075d4:	4b11      	ldr	r3, [pc, #68]	@ (800761c <USBD_LL_Init+0x94>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80075da:	4b10      	ldr	r3, [pc, #64]	@ (800761c <USBD_LL_Init+0x94>)
 80075dc:	2201      	movs	r2, #1
 80075de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075e0:	4b0e      	ldr	r3, [pc, #56]	@ (800761c <USBD_LL_Init+0x94>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075e6:	480d      	ldr	r0, [pc, #52]	@ (800761c <USBD_LL_Init+0x94>)
 80075e8:	f7fa fb11 	bl	8001c0e <HAL_PCD_Init>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075f2:	f7f9 fe9b 	bl	800132c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075f6:	2180      	movs	r1, #128	@ 0x80
 80075f8:	4808      	ldr	r0, [pc, #32]	@ (800761c <USBD_LL_Init+0x94>)
 80075fa:	f7fb fd26 	bl	800304a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075fe:	2240      	movs	r2, #64	@ 0x40
 8007600:	2100      	movs	r1, #0
 8007602:	4806      	ldr	r0, [pc, #24]	@ (800761c <USBD_LL_Init+0x94>)
 8007604:	f7fb fcda 	bl	8002fbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007608:	2280      	movs	r2, #128	@ 0x80
 800760a:	2101      	movs	r1, #1
 800760c:	4803      	ldr	r0, [pc, #12]	@ (800761c <USBD_LL_Init+0x94>)
 800760e:	f7fb fcd5 	bl	8002fbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20000664 	.word	0x20000664

08007620 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007636:	4618      	mov	r0, r3
 8007638:	f7fa fbf8 	bl	8001e2c <HAL_PCD_Start>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f930 	bl	80078a8 <USBD_Get_USB_Status>
 8007648:	4603      	mov	r3, r0
 800764a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800764c:	7bbb      	ldrb	r3, [r7, #14]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	4608      	mov	r0, r1
 8007660:	4611      	mov	r1, r2
 8007662:	461a      	mov	r2, r3
 8007664:	4603      	mov	r3, r0
 8007666:	70fb      	strb	r3, [r7, #3]
 8007668:	460b      	mov	r3, r1
 800766a:	70bb      	strb	r3, [r7, #2]
 800766c:	4613      	mov	r3, r2
 800766e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800767e:	78bb      	ldrb	r3, [r7, #2]
 8007680:	883a      	ldrh	r2, [r7, #0]
 8007682:	78f9      	ldrb	r1, [r7, #3]
 8007684:	f7fb f8cc 	bl	8002820 <HAL_PCD_EP_Open>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f90a 	bl	80078a8 <USBD_Get_USB_Status>
 8007694:	4603      	mov	r3, r0
 8007696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007698:	7bbb      	ldrb	r3, [r7, #14]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fb f917 	bl	80028f4 <HAL_PCD_EP_Close>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f8eb 	bl	80078a8 <USBD_Get_USB_Status>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fb f9b7 	bl	8002a72 <HAL_PCD_EP_SetStall>
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f8cc 	bl	80078a8 <USBD_Get_USB_Status>
 8007710:	4603      	mov	r3, r0
 8007712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007714:	7bbb      	ldrb	r3, [r7, #14]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f7fb f9fb 	bl	8002b38 <HAL_PCD_EP_ClrStall>
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 f8ad 	bl	80078a8 <USBD_Get_USB_Status>
 800774e:	4603      	mov	r3, r0
 8007750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007752:	7bbb      	ldrb	r3, [r7, #14]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800776e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007774:	2b00      	cmp	r3, #0
 8007776:	da0b      	bge.n	8007790 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007778:	78fb      	ldrb	r3, [r7, #3]
 800777a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	4613      	mov	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	3316      	adds	r3, #22
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	e00b      	b.n	80077a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007796:	68f9      	ldr	r1, [r7, #12]
 8007798:	4613      	mov	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4413      	add	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80077a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077ce:	78fa      	ldrb	r2, [r7, #3]
 80077d0:	4611      	mov	r1, r2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fb f800 	bl	80027d8 <HAL_PCD_SetAddress>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f862 	bl	80078a8 <USBD_Get_USB_Status>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	460b      	mov	r3, r1
 8007800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007810:	7af9      	ldrb	r1, [r7, #11]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	f7fb f8f2 	bl	80029fe <HAL_PCD_EP_Transmit>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 f841 	bl	80078a8 <USBD_Get_USB_Status>
 8007826:	4603      	mov	r3, r0
 8007828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800782a:	7dbb      	ldrb	r3, [r7, #22]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	460b      	mov	r3, r1
 8007842:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007852:	7af9      	ldrb	r1, [r7, #11]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	f7fb f896 	bl	8002988 <HAL_PCD_EP_Receive>
 800785c:	4603      	mov	r3, r0
 800785e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	4618      	mov	r0, r3
 8007864:	f000 f820 	bl	80078a8 <USBD_Get_USB_Status>
 8007868:	4603      	mov	r3, r0
 800786a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800786c:	7dbb      	ldrb	r3, [r7, #22]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007880:	4b03      	ldr	r3, [pc, #12]	@ (8007890 <USBD_static_malloc+0x18>)
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20000b48 	.word	0x20000b48

08007894 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d817      	bhi.n	80078ec <USBD_Get_USB_Status+0x44>
 80078bc:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <USBD_Get_USB_Status+0x1c>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078d5 	.word	0x080078d5
 80078c8:	080078db 	.word	0x080078db
 80078cc:	080078e1 	.word	0x080078e1
 80078d0:	080078e7 	.word	0x080078e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
    break;
 80078d8:	e00b      	b.n	80078f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078da:	2303      	movs	r3, #3
 80078dc:	73fb      	strb	r3, [r7, #15]
    break;
 80078de:	e008      	b.n	80078f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078e0:	2301      	movs	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
    break;
 80078e4:	e005      	b.n	80078f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	73fb      	strb	r3, [r7, #15]
    break;
 80078ea:	e002      	b.n	80078f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078ec:	2303      	movs	r3, #3
 80078ee:	73fb      	strb	r3, [r7, #15]
    break;
 80078f0:	bf00      	nop
  }
  return usb_status;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <memset>:
 8007900:	4402      	add	r2, r0
 8007902:	4603      	mov	r3, r0
 8007904:	4293      	cmp	r3, r2
 8007906:	d100      	bne.n	800790a <memset+0xa>
 8007908:	4770      	bx	lr
 800790a:	f803 1b01 	strb.w	r1, [r3], #1
 800790e:	e7f9      	b.n	8007904 <memset+0x4>

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4d0d      	ldr	r5, [pc, #52]	@ (8007948 <__libc_init_array+0x38>)
 8007914:	4c0d      	ldr	r4, [pc, #52]	@ (800794c <__libc_init_array+0x3c>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	2600      	movs	r6, #0
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	4d0b      	ldr	r5, [pc, #44]	@ (8007950 <__libc_init_array+0x40>)
 8007922:	4c0c      	ldr	r4, [pc, #48]	@ (8007954 <__libc_init_array+0x44>)
 8007924:	f001 f8e4 	bl	8008af0 <_init>
 8007928:	1b64      	subs	r4, r4, r5
 800792a:	10a4      	asrs	r4, r4, #2
 800792c:	2600      	movs	r6, #0
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	08008d48 	.word	0x08008d48
 800794c:	08008d48 	.word	0x08008d48
 8007950:	08008d48 	.word	0x08008d48
 8007954:	08008d4c 	.word	0x08008d4c

08007958 <cos>:
 8007958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800795a:	ec53 2b10 	vmov	r2, r3, d0
 800795e:	4826      	ldr	r0, [pc, #152]	@ (80079f8 <cos+0xa0>)
 8007960:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007964:	4281      	cmp	r1, r0
 8007966:	d806      	bhi.n	8007976 <cos+0x1e>
 8007968:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80079f0 <cos+0x98>
 800796c:	b005      	add	sp, #20
 800796e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007972:	f000 b8e1 	b.w	8007b38 <__kernel_cos>
 8007976:	4821      	ldr	r0, [pc, #132]	@ (80079fc <cos+0xa4>)
 8007978:	4281      	cmp	r1, r0
 800797a:	d908      	bls.n	800798e <cos+0x36>
 800797c:	4610      	mov	r0, r2
 800797e:	4619      	mov	r1, r3
 8007980:	f7f8 fd64 	bl	800044c <__aeabi_dsub>
 8007984:	ec41 0b10 	vmov	d0, r0, r1
 8007988:	b005      	add	sp, #20
 800798a:	f85d fb04 	ldr.w	pc, [sp], #4
 800798e:	4668      	mov	r0, sp
 8007990:	f000 fa56 	bl	8007e40 <__ieee754_rem_pio2>
 8007994:	f000 0003 	and.w	r0, r0, #3
 8007998:	2801      	cmp	r0, #1
 800799a:	d00b      	beq.n	80079b4 <cos+0x5c>
 800799c:	2802      	cmp	r0, #2
 800799e:	d015      	beq.n	80079cc <cos+0x74>
 80079a0:	b9d8      	cbnz	r0, 80079da <cos+0x82>
 80079a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079a6:	ed9d 0b00 	vldr	d0, [sp]
 80079aa:	f000 f8c5 	bl	8007b38 <__kernel_cos>
 80079ae:	ec51 0b10 	vmov	r0, r1, d0
 80079b2:	e7e7      	b.n	8007984 <cos+0x2c>
 80079b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079b8:	ed9d 0b00 	vldr	d0, [sp]
 80079bc:	f000 f984 	bl	8007cc8 <__kernel_sin>
 80079c0:	ec53 2b10 	vmov	r2, r3, d0
 80079c4:	4610      	mov	r0, r2
 80079c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80079ca:	e7db      	b.n	8007984 <cos+0x2c>
 80079cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079d0:	ed9d 0b00 	vldr	d0, [sp]
 80079d4:	f000 f8b0 	bl	8007b38 <__kernel_cos>
 80079d8:	e7f2      	b.n	80079c0 <cos+0x68>
 80079da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079de:	ed9d 0b00 	vldr	d0, [sp]
 80079e2:	2001      	movs	r0, #1
 80079e4:	f000 f970 	bl	8007cc8 <__kernel_sin>
 80079e8:	e7e1      	b.n	80079ae <cos+0x56>
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w
	...
 80079f8:	3fe921fb 	.word	0x3fe921fb
 80079fc:	7fefffff 	.word	0x7fefffff

08007a00 <sin>:
 8007a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a02:	ec53 2b10 	vmov	r2, r3, d0
 8007a06:	4826      	ldr	r0, [pc, #152]	@ (8007aa0 <sin+0xa0>)
 8007a08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a0c:	4281      	cmp	r1, r0
 8007a0e:	d807      	bhi.n	8007a20 <sin+0x20>
 8007a10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007a98 <sin+0x98>
 8007a14:	2000      	movs	r0, #0
 8007a16:	b005      	add	sp, #20
 8007a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a1c:	f000 b954 	b.w	8007cc8 <__kernel_sin>
 8007a20:	4820      	ldr	r0, [pc, #128]	@ (8007aa4 <sin+0xa4>)
 8007a22:	4281      	cmp	r1, r0
 8007a24:	d908      	bls.n	8007a38 <sin+0x38>
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7f8 fd0f 	bl	800044c <__aeabi_dsub>
 8007a2e:	ec41 0b10 	vmov	d0, r0, r1
 8007a32:	b005      	add	sp, #20
 8007a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a38:	4668      	mov	r0, sp
 8007a3a:	f000 fa01 	bl	8007e40 <__ieee754_rem_pio2>
 8007a3e:	f000 0003 	and.w	r0, r0, #3
 8007a42:	2801      	cmp	r0, #1
 8007a44:	d00c      	beq.n	8007a60 <sin+0x60>
 8007a46:	2802      	cmp	r0, #2
 8007a48:	d011      	beq.n	8007a6e <sin+0x6e>
 8007a4a:	b9e8      	cbnz	r0, 8007a88 <sin+0x88>
 8007a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a50:	ed9d 0b00 	vldr	d0, [sp]
 8007a54:	2001      	movs	r0, #1
 8007a56:	f000 f937 	bl	8007cc8 <__kernel_sin>
 8007a5a:	ec51 0b10 	vmov	r0, r1, d0
 8007a5e:	e7e6      	b.n	8007a2e <sin+0x2e>
 8007a60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a64:	ed9d 0b00 	vldr	d0, [sp]
 8007a68:	f000 f866 	bl	8007b38 <__kernel_cos>
 8007a6c:	e7f5      	b.n	8007a5a <sin+0x5a>
 8007a6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a72:	ed9d 0b00 	vldr	d0, [sp]
 8007a76:	2001      	movs	r0, #1
 8007a78:	f000 f926 	bl	8007cc8 <__kernel_sin>
 8007a7c:	ec53 2b10 	vmov	r2, r3, d0
 8007a80:	4610      	mov	r0, r2
 8007a82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007a86:	e7d2      	b.n	8007a2e <sin+0x2e>
 8007a88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a8c:	ed9d 0b00 	vldr	d0, [sp]
 8007a90:	f000 f852 	bl	8007b38 <__kernel_cos>
 8007a94:	e7f2      	b.n	8007a7c <sin+0x7c>
 8007a96:	bf00      	nop
	...
 8007aa0:	3fe921fb 	.word	0x3fe921fb
 8007aa4:	7fefffff 	.word	0x7fefffff

08007aa8 <round>:
 8007aa8:	ec51 0b10 	vmov	r0, r1, d0
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007ab2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8007ab6:	2a13      	cmp	r2, #19
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4605      	mov	r5, r0
 8007abc:	dc1b      	bgt.n	8007af6 <round+0x4e>
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	da0b      	bge.n	8007ada <round+0x32>
 8007ac2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	bf04      	itt	eq
 8007aca:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ace:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	e015      	b.n	8007b06 <round+0x5e>
 8007ada:	4c15      	ldr	r4, [pc, #84]	@ (8007b30 <round+0x88>)
 8007adc:	4114      	asrs	r4, r2
 8007ade:	ea04 0601 	and.w	r6, r4, r1
 8007ae2:	4306      	orrs	r6, r0
 8007ae4:	d00f      	beq.n	8007b06 <round+0x5e>
 8007ae6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007aea:	fa41 f202 	asr.w	r2, r1, r2
 8007aee:	4413      	add	r3, r2
 8007af0:	ea23 0304 	bic.w	r3, r3, r4
 8007af4:	e7ed      	b.n	8007ad2 <round+0x2a>
 8007af6:	2a33      	cmp	r2, #51	@ 0x33
 8007af8:	dd08      	ble.n	8007b0c <round+0x64>
 8007afa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007afe:	d102      	bne.n	8007b06 <round+0x5e>
 8007b00:	4602      	mov	r2, r0
 8007b02:	f7f8 fca5 	bl	8000450 <__adddf3>
 8007b06:	ec41 0b10 	vmov	d0, r0, r1
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8007b10:	f04f 34ff 	mov.w	r4, #4294967295
 8007b14:	40f4      	lsrs	r4, r6
 8007b16:	4204      	tst	r4, r0
 8007b18:	d0f5      	beq.n	8007b06 <round+0x5e>
 8007b1a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8007b1e:	2201      	movs	r2, #1
 8007b20:	408a      	lsls	r2, r1
 8007b22:	1952      	adds	r2, r2, r5
 8007b24:	bf28      	it	cs
 8007b26:	3301      	addcs	r3, #1
 8007b28:	ea22 0204 	bic.w	r2, r2, r4
 8007b2c:	e7d2      	b.n	8007ad4 <round+0x2c>
 8007b2e:	bf00      	nop
 8007b30:	000fffff 	.word	0x000fffff
 8007b34:	00000000 	.word	0x00000000

08007b38 <__kernel_cos>:
 8007b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ec57 6b10 	vmov	r6, r7, d0
 8007b40:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007b44:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007b48:	ed8d 1b00 	vstr	d1, [sp]
 8007b4c:	d206      	bcs.n	8007b5c <__kernel_cos+0x24>
 8007b4e:	4630      	mov	r0, r6
 8007b50:	4639      	mov	r1, r7
 8007b52:	f7f8 febb 	bl	80008cc <__aeabi_d2iz>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f000 8088 	beq.w	8007c6c <__kernel_cos+0x134>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	463b      	mov	r3, r7
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 fb44 	bl	80001f0 <__aeabi_dmul>
 8007b68:	4b51      	ldr	r3, [pc, #324]	@ (8007cb0 <__kernel_cos+0x178>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	f7f8 fb3e 	bl	80001f0 <__aeabi_dmul>
 8007b74:	a340      	add	r3, pc, #256	@ (adr r3, 8007c78 <__kernel_cos+0x140>)
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 fb35 	bl	80001f0 <__aeabi_dmul>
 8007b86:	a33e      	add	r3, pc, #248	@ (adr r3, 8007c80 <__kernel_cos+0x148>)
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f7f8 fc60 	bl	8000450 <__adddf3>
 8007b90:	4622      	mov	r2, r4
 8007b92:	462b      	mov	r3, r5
 8007b94:	f7f8 fb2c 	bl	80001f0 <__aeabi_dmul>
 8007b98:	a33b      	add	r3, pc, #236	@ (adr r3, 8007c88 <__kernel_cos+0x150>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fc55 	bl	800044c <__aeabi_dsub>
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	462b      	mov	r3, r5
 8007ba6:	f7f8 fb23 	bl	80001f0 <__aeabi_dmul>
 8007baa:	a339      	add	r3, pc, #228	@ (adr r3, 8007c90 <__kernel_cos+0x158>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fc4e 	bl	8000450 <__adddf3>
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	f7f8 fb1a 	bl	80001f0 <__aeabi_dmul>
 8007bbc:	a336      	add	r3, pc, #216	@ (adr r3, 8007c98 <__kernel_cos+0x160>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	f7f8 fc43 	bl	800044c <__aeabi_dsub>
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	462b      	mov	r3, r5
 8007bca:	f7f8 fb11 	bl	80001f0 <__aeabi_dmul>
 8007bce:	a334      	add	r3, pc, #208	@ (adr r3, 8007ca0 <__kernel_cos+0x168>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fc3c 	bl	8000450 <__adddf3>
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	f7f8 fb08 	bl	80001f0 <__aeabi_dmul>
 8007be0:	4622      	mov	r2, r4
 8007be2:	462b      	mov	r3, r5
 8007be4:	f7f8 fb04 	bl	80001f0 <__aeabi_dmul>
 8007be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bec:	4604      	mov	r4, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 fafc 	bl	80001f0 <__aeabi_dmul>
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7f8 fc24 	bl	800044c <__aeabi_dsub>
 8007c04:	4b2b      	ldr	r3, [pc, #172]	@ (8007cb4 <__kernel_cos+0x17c>)
 8007c06:	4598      	cmp	r8, r3
 8007c08:	4606      	mov	r6, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	d810      	bhi.n	8007c30 <__kernel_cos+0xf8>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4650      	mov	r0, sl
 8007c14:	4659      	mov	r1, fp
 8007c16:	f7f8 fc19 	bl	800044c <__aeabi_dsub>
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4926      	ldr	r1, [pc, #152]	@ (8007cb8 <__kernel_cos+0x180>)
 8007c1e:	4602      	mov	r2, r0
 8007c20:	2000      	movs	r0, #0
 8007c22:	f7f8 fc13 	bl	800044c <__aeabi_dsub>
 8007c26:	ec41 0b10 	vmov	d0, r0, r1
 8007c2a:	b003      	add	sp, #12
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	4b22      	ldr	r3, [pc, #136]	@ (8007cbc <__kernel_cos+0x184>)
 8007c32:	4921      	ldr	r1, [pc, #132]	@ (8007cb8 <__kernel_cos+0x180>)
 8007c34:	4598      	cmp	r8, r3
 8007c36:	bf8c      	ite	hi
 8007c38:	4d21      	ldrhi	r5, [pc, #132]	@ (8007cc0 <__kernel_cos+0x188>)
 8007c3a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007c3e:	2400      	movs	r4, #0
 8007c40:	4622      	mov	r2, r4
 8007c42:	462b      	mov	r3, r5
 8007c44:	2000      	movs	r0, #0
 8007c46:	f7f8 fc01 	bl	800044c <__aeabi_dsub>
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4680      	mov	r8, r0
 8007c4e:	4689      	mov	r9, r1
 8007c50:	462b      	mov	r3, r5
 8007c52:	4650      	mov	r0, sl
 8007c54:	4659      	mov	r1, fp
 8007c56:	f7f8 fbf9 	bl	800044c <__aeabi_dsub>
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	463b      	mov	r3, r7
 8007c5e:	f7f8 fbf5 	bl	800044c <__aeabi_dsub>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	e7da      	b.n	8007c22 <__kernel_cos+0xea>
 8007c6c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007ca8 <__kernel_cos+0x170>
 8007c70:	e7db      	b.n	8007c2a <__kernel_cos+0xf2>
 8007c72:	bf00      	nop
 8007c74:	f3af 8000 	nop.w
 8007c78:	be8838d4 	.word	0xbe8838d4
 8007c7c:	bda8fae9 	.word	0xbda8fae9
 8007c80:	bdb4b1c4 	.word	0xbdb4b1c4
 8007c84:	3e21ee9e 	.word	0x3e21ee9e
 8007c88:	809c52ad 	.word	0x809c52ad
 8007c8c:	3e927e4f 	.word	0x3e927e4f
 8007c90:	19cb1590 	.word	0x19cb1590
 8007c94:	3efa01a0 	.word	0x3efa01a0
 8007c98:	16c15177 	.word	0x16c15177
 8007c9c:	3f56c16c 	.word	0x3f56c16c
 8007ca0:	5555554c 	.word	0x5555554c
 8007ca4:	3fa55555 	.word	0x3fa55555
 8007ca8:	00000000 	.word	0x00000000
 8007cac:	3ff00000 	.word	0x3ff00000
 8007cb0:	3fe00000 	.word	0x3fe00000
 8007cb4:	3fd33332 	.word	0x3fd33332
 8007cb8:	3ff00000 	.word	0x3ff00000
 8007cbc:	3fe90000 	.word	0x3fe90000
 8007cc0:	3fd20000 	.word	0x3fd20000
 8007cc4:	00000000 	.word	0x00000000

08007cc8 <__kernel_sin>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	ec55 4b10 	vmov	r4, r5, d0
 8007cd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007cda:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007cde:	4680      	mov	r8, r0
 8007ce0:	d205      	bcs.n	8007cee <__kernel_sin+0x26>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 fdf1 	bl	80008cc <__aeabi_d2iz>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d052      	beq.n	8007d94 <__kernel_sin+0xcc>
 8007cee:	4622      	mov	r2, r4
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 fa7b 	bl	80001f0 <__aeabi_dmul>
 8007cfa:	4682      	mov	sl, r0
 8007cfc:	468b      	mov	fp, r1
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fa73 	bl	80001f0 <__aeabi_dmul>
 8007d0a:	a342      	add	r3, pc, #264	@ (adr r3, 8007e14 <__kernel_sin+0x14c>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	e9cd 0100 	strd	r0, r1, [sp]
 8007d14:	4650      	mov	r0, sl
 8007d16:	4659      	mov	r1, fp
 8007d18:	f7f8 fa6a 	bl	80001f0 <__aeabi_dmul>
 8007d1c:	a33f      	add	r3, pc, #252	@ (adr r3, 8007e1c <__kernel_sin+0x154>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f8 fb93 	bl	800044c <__aeabi_dsub>
 8007d26:	4652      	mov	r2, sl
 8007d28:	465b      	mov	r3, fp
 8007d2a:	f7f8 fa61 	bl	80001f0 <__aeabi_dmul>
 8007d2e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007e24 <__kernel_sin+0x15c>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f7f8 fb8c 	bl	8000450 <__adddf3>
 8007d38:	4652      	mov	r2, sl
 8007d3a:	465b      	mov	r3, fp
 8007d3c:	f7f8 fa58 	bl	80001f0 <__aeabi_dmul>
 8007d40:	a33a      	add	r3, pc, #232	@ (adr r3, 8007e2c <__kernel_sin+0x164>)
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f7f8 fb81 	bl	800044c <__aeabi_dsub>
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	465b      	mov	r3, fp
 8007d4e:	f7f8 fa4f 	bl	80001f0 <__aeabi_dmul>
 8007d52:	a338      	add	r3, pc, #224	@ (adr r3, 8007e34 <__kernel_sin+0x16c>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fb7a 	bl	8000450 <__adddf3>
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	d11b      	bne.n	8007d9e <__kernel_sin+0xd6>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	f7f8 fa3f 	bl	80001f0 <__aeabi_dmul>
 8007d72:	a325      	add	r3, pc, #148	@ (adr r3, 8007e08 <__kernel_sin+0x140>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	f7f8 fb68 	bl	800044c <__aeabi_dsub>
 8007d7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d80:	f7f8 fa36 	bl	80001f0 <__aeabi_dmul>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fb60 	bl	8000450 <__adddf3>
 8007d90:	4604      	mov	r4, r0
 8007d92:	460d      	mov	r5, r1
 8007d94:	ec45 4b10 	vmov	d0, r4, r5
 8007d98:	b005      	add	sp, #20
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da2:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <__kernel_sin+0x148>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	f7f8 fa23 	bl	80001f0 <__aeabi_dmul>
 8007daa:	4632      	mov	r2, r6
 8007dac:	4680      	mov	r8, r0
 8007dae:	4689      	mov	r9, r1
 8007db0:	463b      	mov	r3, r7
 8007db2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db6:	f7f8 fa1b 	bl	80001f0 <__aeabi_dmul>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fb43 	bl	800044c <__aeabi_dsub>
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	465b      	mov	r3, fp
 8007dca:	f7f8 fa11 	bl	80001f0 <__aeabi_dmul>
 8007dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd2:	f7f8 fb3b 	bl	800044c <__aeabi_dsub>
 8007dd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007e08 <__kernel_sin+0x140>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007de4:	f7f8 fa04 	bl	80001f0 <__aeabi_dmul>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fb2e 	bl	8000450 <__adddf3>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4620      	mov	r0, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	f7f8 fb26 	bl	800044c <__aeabi_dsub>
 8007e00:	e7c6      	b.n	8007d90 <__kernel_sin+0xc8>
 8007e02:	bf00      	nop
 8007e04:	f3af 8000 	nop.w
 8007e08:	55555549 	.word	0x55555549
 8007e0c:	3fc55555 	.word	0x3fc55555
 8007e10:	3fe00000 	.word	0x3fe00000
 8007e14:	5acfd57c 	.word	0x5acfd57c
 8007e18:	3de5d93a 	.word	0x3de5d93a
 8007e1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007e20:	3e5ae5e6 	.word	0x3e5ae5e6
 8007e24:	57b1fe7d 	.word	0x57b1fe7d
 8007e28:	3ec71de3 	.word	0x3ec71de3
 8007e2c:	19c161d5 	.word	0x19c161d5
 8007e30:	3f2a01a0 	.word	0x3f2a01a0
 8007e34:	1110f8a6 	.word	0x1110f8a6
 8007e38:	3f811111 	.word	0x3f811111
 8007e3c:	00000000 	.word	0x00000000

08007e40 <__ieee754_rem_pio2>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	ec57 6b10 	vmov	r6, r7, d0
 8007e48:	4bc5      	ldr	r3, [pc, #788]	@ (8008160 <__ieee754_rem_pio2+0x320>)
 8007e4a:	b08d      	sub	sp, #52	@ 0x34
 8007e4c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007e50:	4598      	cmp	r8, r3
 8007e52:	4604      	mov	r4, r0
 8007e54:	9704      	str	r7, [sp, #16]
 8007e56:	d807      	bhi.n	8007e68 <__ieee754_rem_pio2+0x28>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	ed80 0b00 	vstr	d0, [r0]
 8007e60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007e64:	2500      	movs	r5, #0
 8007e66:	e028      	b.n	8007eba <__ieee754_rem_pio2+0x7a>
 8007e68:	4bbe      	ldr	r3, [pc, #760]	@ (8008164 <__ieee754_rem_pio2+0x324>)
 8007e6a:	4598      	cmp	r8, r3
 8007e6c:	d878      	bhi.n	8007f60 <__ieee754_rem_pio2+0x120>
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	4dbd      	ldr	r5, [pc, #756]	@ (8008168 <__ieee754_rem_pio2+0x328>)
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	4630      	mov	r0, r6
 8007e76:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	dd38      	ble.n	8007ef2 <__ieee754_rem_pio2+0xb2>
 8007e80:	f7f8 fae4 	bl	800044c <__aeabi_dsub>
 8007e84:	45a8      	cmp	r8, r5
 8007e86:	4606      	mov	r6, r0
 8007e88:	460f      	mov	r7, r1
 8007e8a:	d01a      	beq.n	8007ec2 <__ieee754_rem_pio2+0x82>
 8007e8c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 fadb 	bl	800044c <__aeabi_dsub>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	f7f8 fad3 	bl	800044c <__aeabi_dsub>
 8007ea6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 face 	bl	800044c <__aeabi_dsub>
 8007eb0:	e9c4 8900 	strd	r8, r9, [r4]
 8007eb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007eb8:	2501      	movs	r5, #1
 8007eba:	4628      	mov	r0, r5
 8007ebc:	b00d      	add	sp, #52	@ 0x34
 8007ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec2:	a39d      	add	r3, pc, #628	@ (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 fac0 	bl	800044c <__aeabi_dsub>
 8007ecc:	a39c      	add	r3, pc, #624	@ (adr r3, 8008140 <__ieee754_rem_pio2+0x300>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	f7f8 fab9 	bl	800044c <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4680      	mov	r8, r0
 8007ee0:	4689      	mov	r9, r1
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	f7f8 fab1 	bl	800044c <__aeabi_dsub>
 8007eea:	a395      	add	r3, pc, #596	@ (adr r3, 8008140 <__ieee754_rem_pio2+0x300>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	e7dc      	b.n	8007eac <__ieee754_rem_pio2+0x6c>
 8007ef2:	f7f8 faad 	bl	8000450 <__adddf3>
 8007ef6:	45a8      	cmp	r8, r5
 8007ef8:	4606      	mov	r6, r0
 8007efa:	460f      	mov	r7, r1
 8007efc:	d018      	beq.n	8007f30 <__ieee754_rem_pio2+0xf0>
 8007efe:	a38c      	add	r3, pc, #560	@ (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f7f8 faa4 	bl	8000450 <__adddf3>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4689      	mov	r9, r1
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 fa9a 	bl	800044c <__aeabi_dsub>
 8007f18:	a385      	add	r3, pc, #532	@ (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 fa97 	bl	8000450 <__adddf3>
 8007f22:	f04f 35ff 	mov.w	r5, #4294967295
 8007f26:	e9c4 8900 	strd	r8, r9, [r4]
 8007f2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f2e:	e7c4      	b.n	8007eba <__ieee754_rem_pio2+0x7a>
 8007f30:	a381      	add	r3, pc, #516	@ (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	f7f8 fa8b 	bl	8000450 <__adddf3>
 8007f3a:	a381      	add	r3, pc, #516	@ (adr r3, 8008140 <__ieee754_rem_pio2+0x300>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	4606      	mov	r6, r0
 8007f42:	460f      	mov	r7, r1
 8007f44:	f7f8 fa84 	bl	8000450 <__adddf3>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	4689      	mov	r9, r1
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fa7a 	bl	800044c <__aeabi_dsub>
 8007f58:	a379      	add	r3, pc, #484	@ (adr r3, 8008140 <__ieee754_rem_pio2+0x300>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	e7de      	b.n	8007f1e <__ieee754_rem_pio2+0xde>
 8007f60:	4b82      	ldr	r3, [pc, #520]	@ (800816c <__ieee754_rem_pio2+0x32c>)
 8007f62:	4598      	cmp	r8, r3
 8007f64:	f200 80d1 	bhi.w	800810a <__ieee754_rem_pio2+0x2ca>
 8007f68:	f000 f966 	bl	8008238 <fabs>
 8007f6c:	ec57 6b10 	vmov	r6, r7, d0
 8007f70:	a375      	add	r3, pc, #468	@ (adr r3, 8008148 <__ieee754_rem_pio2+0x308>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	4630      	mov	r0, r6
 8007f78:	4639      	mov	r1, r7
 8007f7a:	f7f8 f939 	bl	80001f0 <__aeabi_dmul>
 8007f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8008170 <__ieee754_rem_pio2+0x330>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 fa65 	bl	8000450 <__adddf3>
 8007f86:	f7f8 fca1 	bl	80008cc <__aeabi_d2iz>
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	f7f8 fbac 	bl	80006e8 <__aeabi_i2d>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f98:	a363      	add	r3, pc, #396	@ (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f927 	bl	80001f0 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 fa4f 	bl	800044c <__aeabi_dsub>
 8007fae:	a360      	add	r3, pc, #384	@ (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	468b      	mov	fp, r1
 8007fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fbc:	f7f8 f918 	bl	80001f0 <__aeabi_dmul>
 8007fc0:	2d1f      	cmp	r5, #31
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	dc0c      	bgt.n	8007fe2 <__ieee754_rem_pio2+0x1a2>
 8007fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8008174 <__ieee754_rem_pio2+0x334>)
 8007fca:	1e6a      	subs	r2, r5, #1
 8007fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd0:	4543      	cmp	r3, r8
 8007fd2:	d006      	beq.n	8007fe2 <__ieee754_rem_pio2+0x1a2>
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	4650      	mov	r0, sl
 8007fda:	4659      	mov	r1, fp
 8007fdc:	f7f8 fa36 	bl	800044c <__aeabi_dsub>
 8007fe0:	e00e      	b.n	8008000 <__ieee754_rem_pio2+0x1c0>
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4659      	mov	r1, fp
 8007fea:	f7f8 fa2f 	bl	800044c <__aeabi_dsub>
 8007fee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ff8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	dc02      	bgt.n	8008006 <__ieee754_rem_pio2+0x1c6>
 8008000:	e9c4 0100 	strd	r0, r1, [r4]
 8008004:	e039      	b.n	800807a <__ieee754_rem_pio2+0x23a>
 8008006:	a34c      	add	r3, pc, #304	@ (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8008008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008010:	f7f8 f8ee 	bl	80001f0 <__aeabi_dmul>
 8008014:	4606      	mov	r6, r0
 8008016:	460f      	mov	r7, r1
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4650      	mov	r0, sl
 800801e:	4659      	mov	r1, fp
 8008020:	f7f8 fa14 	bl	800044c <__aeabi_dsub>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4680      	mov	r8, r0
 800802a:	4689      	mov	r9, r1
 800802c:	4650      	mov	r0, sl
 800802e:	4659      	mov	r1, fp
 8008030:	f7f8 fa0c 	bl	800044c <__aeabi_dsub>
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	f7f8 fa08 	bl	800044c <__aeabi_dsub>
 800803c:	a340      	add	r3, pc, #256	@ (adr r3, 8008140 <__ieee754_rem_pio2+0x300>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804a:	f7f8 f8d1 	bl	80001f0 <__aeabi_dmul>
 800804e:	4632      	mov	r2, r6
 8008050:	463b      	mov	r3, r7
 8008052:	f7f8 f9fb 	bl	800044c <__aeabi_dsub>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4606      	mov	r6, r0
 800805c:	460f      	mov	r7, r1
 800805e:	4640      	mov	r0, r8
 8008060:	4649      	mov	r1, r9
 8008062:	f7f8 f9f3 	bl	800044c <__aeabi_dsub>
 8008066:	9a05      	ldr	r2, [sp, #20]
 8008068:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b31      	cmp	r3, #49	@ 0x31
 8008070:	dc20      	bgt.n	80080b4 <__ieee754_rem_pio2+0x274>
 8008072:	e9c4 0100 	strd	r0, r1, [r4]
 8008076:	46c2      	mov	sl, r8
 8008078:	46cb      	mov	fp, r9
 800807a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800807e:	4650      	mov	r0, sl
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 f9e1 	bl	800044c <__aeabi_dsub>
 800808a:	463b      	mov	r3, r7
 800808c:	4632      	mov	r2, r6
 800808e:	f7f8 f9dd 	bl	800044c <__aeabi_dsub>
 8008092:	9b04      	ldr	r3, [sp, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800809a:	f6bf af0e 	bge.w	8007eba <__ieee754_rem_pio2+0x7a>
 800809e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80080a2:	6063      	str	r3, [r4, #4]
 80080a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080a8:	f8c4 8000 	str.w	r8, [r4]
 80080ac:	60a0      	str	r0, [r4, #8]
 80080ae:	60e3      	str	r3, [r4, #12]
 80080b0:	426d      	negs	r5, r5
 80080b2:	e702      	b.n	8007eba <__ieee754_rem_pio2+0x7a>
 80080b4:	a326      	add	r3, pc, #152	@ (adr r3, 8008150 <__ieee754_rem_pio2+0x310>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080be:	f7f8 f897 	bl	80001f0 <__aeabi_dmul>
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 f9bd 	bl	800044c <__aeabi_dsub>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4682      	mov	sl, r0
 80080d8:	468b      	mov	fp, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f9b5 	bl	800044c <__aeabi_dsub>
 80080e2:	4632      	mov	r2, r6
 80080e4:	463b      	mov	r3, r7
 80080e6:	f7f8 f9b1 	bl	800044c <__aeabi_dsub>
 80080ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8008158 <__ieee754_rem_pio2+0x318>)
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f8:	f7f8 f87a 	bl	80001f0 <__aeabi_dmul>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	f7f8 f9a4 	bl	800044c <__aeabi_dsub>
 8008104:	4606      	mov	r6, r0
 8008106:	460f      	mov	r7, r1
 8008108:	e764      	b.n	8007fd4 <__ieee754_rem_pio2+0x194>
 800810a:	4b1b      	ldr	r3, [pc, #108]	@ (8008178 <__ieee754_rem_pio2+0x338>)
 800810c:	4598      	cmp	r8, r3
 800810e:	d935      	bls.n	800817c <__ieee754_rem_pio2+0x33c>
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 f998 	bl	800044c <__aeabi_dsub>
 800811c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008120:	e9c4 0100 	strd	r0, r1, [r4]
 8008124:	e69e      	b.n	8007e64 <__ieee754_rem_pio2+0x24>
 8008126:	bf00      	nop
 8008128:	54400000 	.word	0x54400000
 800812c:	3ff921fb 	.word	0x3ff921fb
 8008130:	1a626331 	.word	0x1a626331
 8008134:	3dd0b461 	.word	0x3dd0b461
 8008138:	1a600000 	.word	0x1a600000
 800813c:	3dd0b461 	.word	0x3dd0b461
 8008140:	2e037073 	.word	0x2e037073
 8008144:	3ba3198a 	.word	0x3ba3198a
 8008148:	6dc9c883 	.word	0x6dc9c883
 800814c:	3fe45f30 	.word	0x3fe45f30
 8008150:	2e000000 	.word	0x2e000000
 8008154:	3ba3198a 	.word	0x3ba3198a
 8008158:	252049c1 	.word	0x252049c1
 800815c:	397b839a 	.word	0x397b839a
 8008160:	3fe921fb 	.word	0x3fe921fb
 8008164:	4002d97b 	.word	0x4002d97b
 8008168:	3ff921fb 	.word	0x3ff921fb
 800816c:	413921fb 	.word	0x413921fb
 8008170:	3fe00000 	.word	0x3fe00000
 8008174:	08008b68 	.word	0x08008b68
 8008178:	7fefffff 	.word	0x7fefffff
 800817c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008180:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008184:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008188:	4630      	mov	r0, r6
 800818a:	460f      	mov	r7, r1
 800818c:	f7f8 fb9e 	bl	80008cc <__aeabi_d2iz>
 8008190:	f7f8 faaa 	bl	80006e8 <__aeabi_i2d>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4630      	mov	r0, r6
 800819a:	4639      	mov	r1, r7
 800819c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081a0:	f7f8 f954 	bl	800044c <__aeabi_dsub>
 80081a4:	4b22      	ldr	r3, [pc, #136]	@ (8008230 <__ieee754_rem_pio2+0x3f0>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	f7f8 f822 	bl	80001f0 <__aeabi_dmul>
 80081ac:	460f      	mov	r7, r1
 80081ae:	4606      	mov	r6, r0
 80081b0:	f7f8 fb8c 	bl	80008cc <__aeabi_d2iz>
 80081b4:	f7f8 fa98 	bl	80006e8 <__aeabi_i2d>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081c4:	f7f8 f942 	bl	800044c <__aeabi_dsub>
 80081c8:	4b19      	ldr	r3, [pc, #100]	@ (8008230 <__ieee754_rem_pio2+0x3f0>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	f7f8 f810 	bl	80001f0 <__aeabi_dmul>
 80081d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80081d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80081d8:	f04f 0803 	mov.w	r8, #3
 80081dc:	2600      	movs	r6, #0
 80081de:	2700      	movs	r7, #0
 80081e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80081e4:	4632      	mov	r2, r6
 80081e6:	463b      	mov	r3, r7
 80081e8:	46c2      	mov	sl, r8
 80081ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80081ee:	f7f8 fb3b 	bl	8000868 <__aeabi_dcmpeq>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d1f4      	bne.n	80081e0 <__ieee754_rem_pio2+0x3a0>
 80081f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008234 <__ieee754_rem_pio2+0x3f4>)
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	2302      	movs	r3, #2
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	462a      	mov	r2, r5
 8008200:	4653      	mov	r3, sl
 8008202:	4621      	mov	r1, r4
 8008204:	a806      	add	r0, sp, #24
 8008206:	f000 f81f 	bl	8008248 <__kernel_rem_pio2>
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	4605      	mov	r5, r0
 8008210:	f6bf ae53 	bge.w	8007eba <__ieee754_rem_pio2+0x7a>
 8008214:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008218:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800821c:	e9c4 2300 	strd	r2, r3, [r4]
 8008220:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008228:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800822c:	e740      	b.n	80080b0 <__ieee754_rem_pio2+0x270>
 800822e:	bf00      	nop
 8008230:	41700000 	.word	0x41700000
 8008234:	08008be8 	.word	0x08008be8

08008238 <fabs>:
 8008238:	ec51 0b10 	vmov	r0, r1, d0
 800823c:	4602      	mov	r2, r0
 800823e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008242:	ec43 2b10 	vmov	d0, r2, r3
 8008246:	4770      	bx	lr

08008248 <__kernel_rem_pio2>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	ed2d 8b02 	vpush	{d8}
 8008250:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008254:	f112 0f14 	cmn.w	r2, #20
 8008258:	9306      	str	r3, [sp, #24]
 800825a:	9104      	str	r1, [sp, #16]
 800825c:	4bbe      	ldr	r3, [pc, #760]	@ (8008558 <__kernel_rem_pio2+0x310>)
 800825e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008260:	9008      	str	r0, [sp, #32]
 8008262:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	9b06      	ldr	r3, [sp, #24]
 800826a:	f103 33ff 	add.w	r3, r3, #4294967295
 800826e:	bfa8      	it	ge
 8008270:	1ed4      	subge	r4, r2, #3
 8008272:	9305      	str	r3, [sp, #20]
 8008274:	bfb2      	itee	lt
 8008276:	2400      	movlt	r4, #0
 8008278:	2318      	movge	r3, #24
 800827a:	fb94 f4f3 	sdivge	r4, r4, r3
 800827e:	f06f 0317 	mvn.w	r3, #23
 8008282:	fb04 3303 	mla	r3, r4, r3, r3
 8008286:	eb03 0b02 	add.w	fp, r3, r2
 800828a:	9b00      	ldr	r3, [sp, #0]
 800828c:	9a05      	ldr	r2, [sp, #20]
 800828e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008548 <__kernel_rem_pio2+0x300>
 8008292:	eb03 0802 	add.w	r8, r3, r2
 8008296:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008298:	1aa7      	subs	r7, r4, r2
 800829a:	ae20      	add	r6, sp, #128	@ 0x80
 800829c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80082a0:	2500      	movs	r5, #0
 80082a2:	4545      	cmp	r5, r8
 80082a4:	dd13      	ble.n	80082ce <__kernel_rem_pio2+0x86>
 80082a6:	9b06      	ldr	r3, [sp, #24]
 80082a8:	aa20      	add	r2, sp, #128	@ 0x80
 80082aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80082ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80082b2:	f04f 0800 	mov.w	r8, #0
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	4598      	cmp	r8, r3
 80082ba:	dc31      	bgt.n	8008320 <__kernel_rem_pio2+0xd8>
 80082bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008548 <__kernel_rem_pio2+0x300>
 80082c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082c8:	462f      	mov	r7, r5
 80082ca:	2600      	movs	r6, #0
 80082cc:	e01b      	b.n	8008306 <__kernel_rem_pio2+0xbe>
 80082ce:	42ef      	cmn	r7, r5
 80082d0:	d407      	bmi.n	80082e2 <__kernel_rem_pio2+0x9a>
 80082d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80082d6:	f7f8 fa07 	bl	80006e8 <__aeabi_i2d>
 80082da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082de:	3501      	adds	r5, #1
 80082e0:	e7df      	b.n	80082a2 <__kernel_rem_pio2+0x5a>
 80082e2:	ec51 0b18 	vmov	r0, r1, d8
 80082e6:	e7f8      	b.n	80082da <__kernel_rem_pio2+0x92>
 80082e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80082f0:	f7f7 ff7e 	bl	80001f0 <__aeabi_dmul>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fc:	f7f8 f8a8 	bl	8000450 <__adddf3>
 8008300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008304:	3601      	adds	r6, #1
 8008306:	9b05      	ldr	r3, [sp, #20]
 8008308:	429e      	cmp	r6, r3
 800830a:	f1a7 0708 	sub.w	r7, r7, #8
 800830e:	ddeb      	ble.n	80082e8 <__kernel_rem_pio2+0xa0>
 8008310:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008314:	f108 0801 	add.w	r8, r8, #1
 8008318:	ecaa 7b02 	vstmia	sl!, {d7}
 800831c:	3508      	adds	r5, #8
 800831e:	e7ca      	b.n	80082b6 <__kernel_rem_pio2+0x6e>
 8008320:	9b00      	ldr	r3, [sp, #0]
 8008322:	f8dd 8000 	ldr.w	r8, [sp]
 8008326:	aa0c      	add	r2, sp, #48	@ 0x30
 8008328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800832c:	930a      	str	r3, [sp, #40]	@ 0x28
 800832e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008330:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008334:	9309      	str	r3, [sp, #36]	@ 0x24
 8008336:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800833a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800833c:	ab98      	add	r3, sp, #608	@ 0x260
 800833e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008342:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008346:	ed8d 7b02 	vstr	d7, [sp, #8]
 800834a:	ac0c      	add	r4, sp, #48	@ 0x30
 800834c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800834e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008352:	46a1      	mov	r9, r4
 8008354:	46c2      	mov	sl, r8
 8008356:	f1ba 0f00 	cmp.w	sl, #0
 800835a:	f1a5 0508 	sub.w	r5, r5, #8
 800835e:	dc77      	bgt.n	8008450 <__kernel_rem_pio2+0x208>
 8008360:	4658      	mov	r0, fp
 8008362:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008366:	f000 fac7 	bl	80088f8 <scalbn>
 800836a:	ec57 6b10 	vmov	r6, r7, d0
 800836e:	2200      	movs	r2, #0
 8008370:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f7 ff3a 	bl	80001f0 <__aeabi_dmul>
 800837c:	ec41 0b10 	vmov	d0, r0, r1
 8008380:	f000 fb3a 	bl	80089f8 <floor>
 8008384:	4b75      	ldr	r3, [pc, #468]	@ (800855c <__kernel_rem_pio2+0x314>)
 8008386:	ec51 0b10 	vmov	r0, r1, d0
 800838a:	2200      	movs	r2, #0
 800838c:	f7f7 ff30 	bl	80001f0 <__aeabi_dmul>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4630      	mov	r0, r6
 8008396:	4639      	mov	r1, r7
 8008398:	f7f8 f858 	bl	800044c <__aeabi_dsub>
 800839c:	460f      	mov	r7, r1
 800839e:	4606      	mov	r6, r0
 80083a0:	f7f8 fa94 	bl	80008cc <__aeabi_d2iz>
 80083a4:	9002      	str	r0, [sp, #8]
 80083a6:	f7f8 f99f 	bl	80006e8 <__aeabi_i2d>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f8 f84b 	bl	800044c <__aeabi_dsub>
 80083b6:	f1bb 0f00 	cmp.w	fp, #0
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	dd6c      	ble.n	800849a <__kernel_rem_pio2+0x252>
 80083c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80083c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80083c6:	9d02      	ldr	r5, [sp, #8]
 80083c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083cc:	f1cb 0018 	rsb	r0, fp, #24
 80083d0:	fa43 f200 	asr.w	r2, r3, r0
 80083d4:	4415      	add	r5, r2
 80083d6:	4082      	lsls	r2, r0
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	aa0c      	add	r2, sp, #48	@ 0x30
 80083dc:	9502      	str	r5, [sp, #8]
 80083de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80083e2:	f1cb 0217 	rsb	r2, fp, #23
 80083e6:	fa43 f902 	asr.w	r9, r3, r2
 80083ea:	f1b9 0f00 	cmp.w	r9, #0
 80083ee:	dd64      	ble.n	80084ba <__kernel_rem_pio2+0x272>
 80083f0:	9b02      	ldr	r3, [sp, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	3301      	adds	r3, #1
 80083f6:	9302      	str	r3, [sp, #8]
 80083f8:	4615      	mov	r5, r2
 80083fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80083fe:	4590      	cmp	r8, r2
 8008400:	f300 80b8 	bgt.w	8008574 <__kernel_rem_pio2+0x32c>
 8008404:	f1bb 0f00 	cmp.w	fp, #0
 8008408:	dd07      	ble.n	800841a <__kernel_rem_pio2+0x1d2>
 800840a:	f1bb 0f01 	cmp.w	fp, #1
 800840e:	f000 80bf 	beq.w	8008590 <__kernel_rem_pio2+0x348>
 8008412:	f1bb 0f02 	cmp.w	fp, #2
 8008416:	f000 80c6 	beq.w	80085a6 <__kernel_rem_pio2+0x35e>
 800841a:	f1b9 0f02 	cmp.w	r9, #2
 800841e:	d14c      	bne.n	80084ba <__kernel_rem_pio2+0x272>
 8008420:	4632      	mov	r2, r6
 8008422:	463b      	mov	r3, r7
 8008424:	494e      	ldr	r1, [pc, #312]	@ (8008560 <__kernel_rem_pio2+0x318>)
 8008426:	2000      	movs	r0, #0
 8008428:	f7f8 f810 	bl	800044c <__aeabi_dsub>
 800842c:	4606      	mov	r6, r0
 800842e:	460f      	mov	r7, r1
 8008430:	2d00      	cmp	r5, #0
 8008432:	d042      	beq.n	80084ba <__kernel_rem_pio2+0x272>
 8008434:	4658      	mov	r0, fp
 8008436:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008550 <__kernel_rem_pio2+0x308>
 800843a:	f000 fa5d 	bl	80088f8 <scalbn>
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	ec53 2b10 	vmov	r2, r3, d0
 8008446:	f7f8 f801 	bl	800044c <__aeabi_dsub>
 800844a:	4606      	mov	r6, r0
 800844c:	460f      	mov	r7, r1
 800844e:	e034      	b.n	80084ba <__kernel_rem_pio2+0x272>
 8008450:	4b44      	ldr	r3, [pc, #272]	@ (8008564 <__kernel_rem_pio2+0x31c>)
 8008452:	2200      	movs	r2, #0
 8008454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008458:	f7f7 feca 	bl	80001f0 <__aeabi_dmul>
 800845c:	f7f8 fa36 	bl	80008cc <__aeabi_d2iz>
 8008460:	f7f8 f942 	bl	80006e8 <__aeabi_i2d>
 8008464:	4b40      	ldr	r3, [pc, #256]	@ (8008568 <__kernel_rem_pio2+0x320>)
 8008466:	2200      	movs	r2, #0
 8008468:	4606      	mov	r6, r0
 800846a:	460f      	mov	r7, r1
 800846c:	f7f7 fec0 	bl	80001f0 <__aeabi_dmul>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008478:	f7f7 ffe8 	bl	800044c <__aeabi_dsub>
 800847c:	f7f8 fa26 	bl	80008cc <__aeabi_d2iz>
 8008480:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008484:	f849 0b04 	str.w	r0, [r9], #4
 8008488:	4639      	mov	r1, r7
 800848a:	4630      	mov	r0, r6
 800848c:	f7f7 ffe0 	bl	8000450 <__adddf3>
 8008490:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008498:	e75d      	b.n	8008356 <__kernel_rem_pio2+0x10e>
 800849a:	d107      	bne.n	80084ac <__kernel_rem_pio2+0x264>
 800849c:	f108 33ff 	add.w	r3, r8, #4294967295
 80084a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80084a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80084aa:	e79e      	b.n	80083ea <__kernel_rem_pio2+0x1a2>
 80084ac:	4b2f      	ldr	r3, [pc, #188]	@ (800856c <__kernel_rem_pio2+0x324>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	f7f8 f9f8 	bl	80008a4 <__aeabi_dcmpge>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d143      	bne.n	8008540 <__kernel_rem_pio2+0x2f8>
 80084b8:	4681      	mov	r9, r0
 80084ba:	2200      	movs	r2, #0
 80084bc:	2300      	movs	r3, #0
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f8 f9d1 	bl	8000868 <__aeabi_dcmpeq>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f000 80bf 	beq.w	800864a <__kernel_rem_pio2+0x402>
 80084cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80084d0:	2200      	movs	r2, #0
 80084d2:	9900      	ldr	r1, [sp, #0]
 80084d4:	428b      	cmp	r3, r1
 80084d6:	da6e      	bge.n	80085b6 <__kernel_rem_pio2+0x36e>
 80084d8:	2a00      	cmp	r2, #0
 80084da:	f000 8089 	beq.w	80085f0 <__kernel_rem_pio2+0x3a8>
 80084de:	f108 38ff 	add.w	r8, r8, #4294967295
 80084e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80084e4:	f1ab 0b18 	sub.w	fp, fp, #24
 80084e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0f6      	beq.n	80084de <__kernel_rem_pio2+0x296>
 80084f0:	4658      	mov	r0, fp
 80084f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008550 <__kernel_rem_pio2+0x308>
 80084f6:	f000 f9ff 	bl	80088f8 <scalbn>
 80084fa:	f108 0301 	add.w	r3, r8, #1
 80084fe:	00da      	lsls	r2, r3, #3
 8008500:	9205      	str	r2, [sp, #20]
 8008502:	ec55 4b10 	vmov	r4, r5, d0
 8008506:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008508:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008564 <__kernel_rem_pio2+0x31c>
 800850c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008510:	4646      	mov	r6, r8
 8008512:	f04f 0a00 	mov.w	sl, #0
 8008516:	2e00      	cmp	r6, #0
 8008518:	f280 80cf 	bge.w	80086ba <__kernel_rem_pio2+0x472>
 800851c:	4644      	mov	r4, r8
 800851e:	2c00      	cmp	r4, #0
 8008520:	f2c0 80fd 	blt.w	800871e <__kernel_rem_pio2+0x4d6>
 8008524:	4b12      	ldr	r3, [pc, #72]	@ (8008570 <__kernel_rem_pio2+0x328>)
 8008526:	461f      	mov	r7, r3
 8008528:	ab70      	add	r3, sp, #448	@ 0x1c0
 800852a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800852e:	9306      	str	r3, [sp, #24]
 8008530:	f04f 0a00 	mov.w	sl, #0
 8008534:	f04f 0b00 	mov.w	fp, #0
 8008538:	2600      	movs	r6, #0
 800853a:	eba8 0504 	sub.w	r5, r8, r4
 800853e:	e0e2      	b.n	8008706 <__kernel_rem_pio2+0x4be>
 8008540:	f04f 0902 	mov.w	r9, #2
 8008544:	e754      	b.n	80083f0 <__kernel_rem_pio2+0x1a8>
 8008546:	bf00      	nop
	...
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	08008d30 	.word	0x08008d30
 800855c:	40200000 	.word	0x40200000
 8008560:	3ff00000 	.word	0x3ff00000
 8008564:	3e700000 	.word	0x3e700000
 8008568:	41700000 	.word	0x41700000
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	08008cf0 	.word	0x08008cf0
 8008574:	f854 3b04 	ldr.w	r3, [r4], #4
 8008578:	b945      	cbnz	r5, 800858c <__kernel_rem_pio2+0x344>
 800857a:	b123      	cbz	r3, 8008586 <__kernel_rem_pio2+0x33e>
 800857c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8008580:	f844 3c04 	str.w	r3, [r4, #-4]
 8008584:	2301      	movs	r3, #1
 8008586:	3201      	adds	r2, #1
 8008588:	461d      	mov	r5, r3
 800858a:	e738      	b.n	80083fe <__kernel_rem_pio2+0x1b6>
 800858c:	1acb      	subs	r3, r1, r3
 800858e:	e7f7      	b.n	8008580 <__kernel_rem_pio2+0x338>
 8008590:	f108 32ff 	add.w	r2, r8, #4294967295
 8008594:	ab0c      	add	r3, sp, #48	@ 0x30
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800859e:	a90c      	add	r1, sp, #48	@ 0x30
 80085a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80085a4:	e739      	b.n	800841a <__kernel_rem_pio2+0x1d2>
 80085a6:	f108 32ff 	add.w	r2, r8, #4294967295
 80085aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80085b4:	e7f3      	b.n	800859e <__kernel_rem_pio2+0x356>
 80085b6:	a90c      	add	r1, sp, #48	@ 0x30
 80085b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80085bc:	3b01      	subs	r3, #1
 80085be:	430a      	orrs	r2, r1
 80085c0:	e787      	b.n	80084d2 <__kernel_rem_pio2+0x28a>
 80085c2:	3401      	adds	r4, #1
 80085c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085c8:	2a00      	cmp	r2, #0
 80085ca:	d0fa      	beq.n	80085c2 <__kernel_rem_pio2+0x37a>
 80085cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80085d2:	eb0d 0503 	add.w	r5, sp, r3
 80085d6:	9b06      	ldr	r3, [sp, #24]
 80085d8:	aa20      	add	r2, sp, #128	@ 0x80
 80085da:	4443      	add	r3, r8
 80085dc:	f108 0701 	add.w	r7, r8, #1
 80085e0:	3d98      	subs	r5, #152	@ 0x98
 80085e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80085e6:	4444      	add	r4, r8
 80085e8:	42bc      	cmp	r4, r7
 80085ea:	da04      	bge.n	80085f6 <__kernel_rem_pio2+0x3ae>
 80085ec:	46a0      	mov	r8, r4
 80085ee:	e6a2      	b.n	8008336 <__kernel_rem_pio2+0xee>
 80085f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085f2:	2401      	movs	r4, #1
 80085f4:	e7e6      	b.n	80085c4 <__kernel_rem_pio2+0x37c>
 80085f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80085fc:	f7f8 f874 	bl	80006e8 <__aeabi_i2d>
 8008600:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80088c8 <__kernel_rem_pio2+0x680>
 8008604:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008608:	ed8d 7b02 	vstr	d7, [sp, #8]
 800860c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008610:	46b2      	mov	sl, r6
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	9b05      	ldr	r3, [sp, #20]
 8008618:	4598      	cmp	r8, r3
 800861a:	dd05      	ble.n	8008628 <__kernel_rem_pio2+0x3e0>
 800861c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008620:	3701      	adds	r7, #1
 8008622:	eca5 7b02 	vstmia	r5!, {d7}
 8008626:	e7df      	b.n	80085e8 <__kernel_rem_pio2+0x3a0>
 8008628:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800862c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008630:	f7f7 fdde 	bl	80001f0 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863c:	f7f7 ff08 	bl	8000450 <__adddf3>
 8008640:	f108 0801 	add.w	r8, r8, #1
 8008644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008648:	e7e5      	b.n	8008616 <__kernel_rem_pio2+0x3ce>
 800864a:	f1cb 0000 	rsb	r0, fp, #0
 800864e:	ec47 6b10 	vmov	d0, r6, r7
 8008652:	f000 f951 	bl	80088f8 <scalbn>
 8008656:	ec55 4b10 	vmov	r4, r5, d0
 800865a:	4b9d      	ldr	r3, [pc, #628]	@ (80088d0 <__kernel_rem_pio2+0x688>)
 800865c:	2200      	movs	r2, #0
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f8 f91f 	bl	80008a4 <__aeabi_dcmpge>
 8008666:	b300      	cbz	r0, 80086aa <__kernel_rem_pio2+0x462>
 8008668:	4b9a      	ldr	r3, [pc, #616]	@ (80088d4 <__kernel_rem_pio2+0x68c>)
 800866a:	2200      	movs	r2, #0
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 fdbe 	bl	80001f0 <__aeabi_dmul>
 8008674:	f7f8 f92a 	bl	80008cc <__aeabi_d2iz>
 8008678:	4606      	mov	r6, r0
 800867a:	f7f8 f835 	bl	80006e8 <__aeabi_i2d>
 800867e:	4b94      	ldr	r3, [pc, #592]	@ (80088d0 <__kernel_rem_pio2+0x688>)
 8008680:	2200      	movs	r2, #0
 8008682:	f7f7 fdb5 	bl	80001f0 <__aeabi_dmul>
 8008686:	460b      	mov	r3, r1
 8008688:	4602      	mov	r2, r0
 800868a:	4629      	mov	r1, r5
 800868c:	4620      	mov	r0, r4
 800868e:	f7f7 fedd 	bl	800044c <__aeabi_dsub>
 8008692:	f7f8 f91b 	bl	80008cc <__aeabi_d2iz>
 8008696:	ab0c      	add	r3, sp, #48	@ 0x30
 8008698:	f10b 0b18 	add.w	fp, fp, #24
 800869c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80086a0:	f108 0801 	add.w	r8, r8, #1
 80086a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80086a8:	e722      	b.n	80084f0 <__kernel_rem_pio2+0x2a8>
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f8 f90d 	bl	80008cc <__aeabi_d2iz>
 80086b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80086b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80086b8:	e71a      	b.n	80084f0 <__kernel_rem_pio2+0x2a8>
 80086ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80086bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086c0:	f7f8 f812 	bl	80006e8 <__aeabi_i2d>
 80086c4:	4622      	mov	r2, r4
 80086c6:	462b      	mov	r3, r5
 80086c8:	f7f7 fd92 	bl	80001f0 <__aeabi_dmul>
 80086cc:	4652      	mov	r2, sl
 80086ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80086d2:	465b      	mov	r3, fp
 80086d4:	4620      	mov	r0, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	f7f7 fd8a 	bl	80001f0 <__aeabi_dmul>
 80086dc:	3e01      	subs	r6, #1
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	e718      	b.n	8008516 <__kernel_rem_pio2+0x2ce>
 80086e4:	9906      	ldr	r1, [sp, #24]
 80086e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80086ea:	9106      	str	r1, [sp, #24]
 80086ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80086f0:	f7f7 fd7e 	bl	80001f0 <__aeabi_dmul>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4650      	mov	r0, sl
 80086fa:	4659      	mov	r1, fp
 80086fc:	f7f7 fea8 	bl	8000450 <__adddf3>
 8008700:	3601      	adds	r6, #1
 8008702:	4682      	mov	sl, r0
 8008704:	468b      	mov	fp, r1
 8008706:	9b00      	ldr	r3, [sp, #0]
 8008708:	429e      	cmp	r6, r3
 800870a:	dc01      	bgt.n	8008710 <__kernel_rem_pio2+0x4c8>
 800870c:	42b5      	cmp	r5, r6
 800870e:	dae9      	bge.n	80086e4 <__kernel_rem_pio2+0x49c>
 8008710:	ab48      	add	r3, sp, #288	@ 0x120
 8008712:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008716:	e9c5 ab00 	strd	sl, fp, [r5]
 800871a:	3c01      	subs	r4, #1
 800871c:	e6ff      	b.n	800851e <__kernel_rem_pio2+0x2d6>
 800871e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008720:	2b02      	cmp	r3, #2
 8008722:	dc0b      	bgt.n	800873c <__kernel_rem_pio2+0x4f4>
 8008724:	2b00      	cmp	r3, #0
 8008726:	dc39      	bgt.n	800879c <__kernel_rem_pio2+0x554>
 8008728:	d05d      	beq.n	80087e6 <__kernel_rem_pio2+0x59e>
 800872a:	9b02      	ldr	r3, [sp, #8]
 800872c:	f003 0007 	and.w	r0, r3, #7
 8008730:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008734:	ecbd 8b02 	vpop	{d8}
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800873e:	2b03      	cmp	r3, #3
 8008740:	d1f3      	bne.n	800872a <__kernel_rem_pio2+0x4e2>
 8008742:	9b05      	ldr	r3, [sp, #20]
 8008744:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008748:	eb0d 0403 	add.w	r4, sp, r3
 800874c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008750:	4625      	mov	r5, r4
 8008752:	46c2      	mov	sl, r8
 8008754:	f1ba 0f00 	cmp.w	sl, #0
 8008758:	f1a5 0508 	sub.w	r5, r5, #8
 800875c:	dc6b      	bgt.n	8008836 <__kernel_rem_pio2+0x5ee>
 800875e:	4645      	mov	r5, r8
 8008760:	2d01      	cmp	r5, #1
 8008762:	f1a4 0408 	sub.w	r4, r4, #8
 8008766:	f300 8087 	bgt.w	8008878 <__kernel_rem_pio2+0x630>
 800876a:	9c05      	ldr	r4, [sp, #20]
 800876c:	ab48      	add	r3, sp, #288	@ 0x120
 800876e:	441c      	add	r4, r3
 8008770:	2000      	movs	r0, #0
 8008772:	2100      	movs	r1, #0
 8008774:	f1b8 0f01 	cmp.w	r8, #1
 8008778:	f300 809c 	bgt.w	80088b4 <__kernel_rem_pio2+0x66c>
 800877c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8008780:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8008784:	f1b9 0f00 	cmp.w	r9, #0
 8008788:	f040 80a6 	bne.w	80088d8 <__kernel_rem_pio2+0x690>
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	e9c3 7800 	strd	r7, r8, [r3]
 8008792:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008796:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800879a:	e7c6      	b.n	800872a <__kernel_rem_pio2+0x4e2>
 800879c:	9d05      	ldr	r5, [sp, #20]
 800879e:	ab48      	add	r3, sp, #288	@ 0x120
 80087a0:	441d      	add	r5, r3
 80087a2:	4644      	mov	r4, r8
 80087a4:	2000      	movs	r0, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	2c00      	cmp	r4, #0
 80087aa:	da35      	bge.n	8008818 <__kernel_rem_pio2+0x5d0>
 80087ac:	f1b9 0f00 	cmp.w	r9, #0
 80087b0:	d038      	beq.n	8008824 <__kernel_rem_pio2+0x5dc>
 80087b2:	4602      	mov	r2, r0
 80087b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087b8:	9c04      	ldr	r4, [sp, #16]
 80087ba:	e9c4 2300 	strd	r2, r3, [r4]
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80087c6:	f7f7 fe41 	bl	800044c <__aeabi_dsub>
 80087ca:	ad4a      	add	r5, sp, #296	@ 0x128
 80087cc:	2401      	movs	r4, #1
 80087ce:	45a0      	cmp	r8, r4
 80087d0:	da2b      	bge.n	800882a <__kernel_rem_pio2+0x5e2>
 80087d2:	f1b9 0f00 	cmp.w	r9, #0
 80087d6:	d002      	beq.n	80087de <__kernel_rem_pio2+0x596>
 80087d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087dc:	4619      	mov	r1, r3
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80087e4:	e7a1      	b.n	800872a <__kernel_rem_pio2+0x4e2>
 80087e6:	9c05      	ldr	r4, [sp, #20]
 80087e8:	ab48      	add	r3, sp, #288	@ 0x120
 80087ea:	441c      	add	r4, r3
 80087ec:	2000      	movs	r0, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	f1b8 0f00 	cmp.w	r8, #0
 80087f4:	da09      	bge.n	800880a <__kernel_rem_pio2+0x5c2>
 80087f6:	f1b9 0f00 	cmp.w	r9, #0
 80087fa:	d002      	beq.n	8008802 <__kernel_rem_pio2+0x5ba>
 80087fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008800:	4619      	mov	r1, r3
 8008802:	9b04      	ldr	r3, [sp, #16]
 8008804:	e9c3 0100 	strd	r0, r1, [r3]
 8008808:	e78f      	b.n	800872a <__kernel_rem_pio2+0x4e2>
 800880a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800880e:	f7f7 fe1f 	bl	8000450 <__adddf3>
 8008812:	f108 38ff 	add.w	r8, r8, #4294967295
 8008816:	e7eb      	b.n	80087f0 <__kernel_rem_pio2+0x5a8>
 8008818:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800881c:	f7f7 fe18 	bl	8000450 <__adddf3>
 8008820:	3c01      	subs	r4, #1
 8008822:	e7c1      	b.n	80087a8 <__kernel_rem_pio2+0x560>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	e7c6      	b.n	80087b8 <__kernel_rem_pio2+0x570>
 800882a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800882e:	f7f7 fe0f 	bl	8000450 <__adddf3>
 8008832:	3401      	adds	r4, #1
 8008834:	e7cb      	b.n	80087ce <__kernel_rem_pio2+0x586>
 8008836:	ed95 7b00 	vldr	d7, [r5]
 800883a:	ed8d 7b00 	vstr	d7, [sp]
 800883e:	ed95 7b02 	vldr	d7, [r5, #8]
 8008842:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008846:	ec53 2b17 	vmov	r2, r3, d7
 800884a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800884e:	f7f7 fdff 	bl	8000450 <__adddf3>
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800885e:	f7f7 fdf5 	bl	800044c <__aeabi_dsub>
 8008862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008866:	f7f7 fdf3 	bl	8000450 <__adddf3>
 800886a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800886e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8008872:	e9c5 6700 	strd	r6, r7, [r5]
 8008876:	e76d      	b.n	8008754 <__kernel_rem_pio2+0x50c>
 8008878:	ed94 7b00 	vldr	d7, [r4]
 800887c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008880:	ec51 0b17 	vmov	r0, r1, d7
 8008884:	4652      	mov	r2, sl
 8008886:	465b      	mov	r3, fp
 8008888:	ed8d 7b00 	vstr	d7, [sp]
 800888c:	f7f7 fde0 	bl	8000450 <__adddf3>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4606      	mov	r6, r0
 8008896:	460f      	mov	r7, r1
 8008898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800889c:	f7f7 fdd6 	bl	800044c <__aeabi_dsub>
 80088a0:	4652      	mov	r2, sl
 80088a2:	465b      	mov	r3, fp
 80088a4:	f7f7 fdd4 	bl	8000450 <__adddf3>
 80088a8:	3d01      	subs	r5, #1
 80088aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088ae:	e9c4 6700 	strd	r6, r7, [r4]
 80088b2:	e755      	b.n	8008760 <__kernel_rem_pio2+0x518>
 80088b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088b8:	f7f7 fdca 	bl	8000450 <__adddf3>
 80088bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80088c0:	e758      	b.n	8008774 <__kernel_rem_pio2+0x52c>
 80088c2:	bf00      	nop
 80088c4:	f3af 8000 	nop.w
	...
 80088d0:	41700000 	.word	0x41700000
 80088d4:	3e700000 	.word	0x3e700000
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	9a04      	ldr	r2, [sp, #16]
 80088dc:	601f      	str	r7, [r3, #0]
 80088de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80088e2:	605c      	str	r4, [r3, #4]
 80088e4:	609d      	str	r5, [r3, #8]
 80088e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088ea:	60d3      	str	r3, [r2, #12]
 80088ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088f0:	6110      	str	r0, [r2, #16]
 80088f2:	6153      	str	r3, [r2, #20]
 80088f4:	e719      	b.n	800872a <__kernel_rem_pio2+0x4e2>
 80088f6:	bf00      	nop

080088f8 <scalbn>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	ec55 4b10 	vmov	r4, r5, d0
 80088fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008902:	4606      	mov	r6, r0
 8008904:	462b      	mov	r3, r5
 8008906:	b991      	cbnz	r1, 800892e <scalbn+0x36>
 8008908:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800890c:	4323      	orrs	r3, r4
 800890e:	d03d      	beq.n	800898c <scalbn+0x94>
 8008910:	4b35      	ldr	r3, [pc, #212]	@ (80089e8 <scalbn+0xf0>)
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	2200      	movs	r2, #0
 8008918:	f7f7 fc6a 	bl	80001f0 <__aeabi_dmul>
 800891c:	4b33      	ldr	r3, [pc, #204]	@ (80089ec <scalbn+0xf4>)
 800891e:	429e      	cmp	r6, r3
 8008920:	4604      	mov	r4, r0
 8008922:	460d      	mov	r5, r1
 8008924:	da0f      	bge.n	8008946 <scalbn+0x4e>
 8008926:	a328      	add	r3, pc, #160	@ (adr r3, 80089c8 <scalbn+0xd0>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	e01e      	b.n	800896c <scalbn+0x74>
 800892e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008932:	4291      	cmp	r1, r2
 8008934:	d10b      	bne.n	800894e <scalbn+0x56>
 8008936:	4622      	mov	r2, r4
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fd88 	bl	8000450 <__adddf3>
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	e022      	b.n	800898c <scalbn+0x94>
 8008946:	460b      	mov	r3, r1
 8008948:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800894c:	3936      	subs	r1, #54	@ 0x36
 800894e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008952:	4296      	cmp	r6, r2
 8008954:	dd0d      	ble.n	8008972 <scalbn+0x7a>
 8008956:	2d00      	cmp	r5, #0
 8008958:	a11d      	add	r1, pc, #116	@ (adr r1, 80089d0 <scalbn+0xd8>)
 800895a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895e:	da02      	bge.n	8008966 <scalbn+0x6e>
 8008960:	a11d      	add	r1, pc, #116	@ (adr r1, 80089d8 <scalbn+0xe0>)
 8008962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008966:	a31a      	add	r3, pc, #104	@ (adr r3, 80089d0 <scalbn+0xd8>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fc40 	bl	80001f0 <__aeabi_dmul>
 8008970:	e7e6      	b.n	8008940 <scalbn+0x48>
 8008972:	1872      	adds	r2, r6, r1
 8008974:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008978:	428a      	cmp	r2, r1
 800897a:	dcec      	bgt.n	8008956 <scalbn+0x5e>
 800897c:	2a00      	cmp	r2, #0
 800897e:	dd08      	ble.n	8008992 <scalbn+0x9a>
 8008980:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008984:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008988:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800898c:	ec45 4b10 	vmov	d0, r4, r5
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008996:	da08      	bge.n	80089aa <scalbn+0xb2>
 8008998:	2d00      	cmp	r5, #0
 800899a:	a10b      	add	r1, pc, #44	@ (adr r1, 80089c8 <scalbn+0xd0>)
 800899c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a0:	dac1      	bge.n	8008926 <scalbn+0x2e>
 80089a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80089e0 <scalbn+0xe8>)
 80089a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a8:	e7bd      	b.n	8008926 <scalbn+0x2e>
 80089aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80089ae:	3236      	adds	r2, #54	@ 0x36
 80089b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80089b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089b8:	4620      	mov	r0, r4
 80089ba:	4b0d      	ldr	r3, [pc, #52]	@ (80089f0 <scalbn+0xf8>)
 80089bc:	4629      	mov	r1, r5
 80089be:	2200      	movs	r2, #0
 80089c0:	e7d4      	b.n	800896c <scalbn+0x74>
 80089c2:	bf00      	nop
 80089c4:	f3af 8000 	nop.w
 80089c8:	c2f8f359 	.word	0xc2f8f359
 80089cc:	01a56e1f 	.word	0x01a56e1f
 80089d0:	8800759c 	.word	0x8800759c
 80089d4:	7e37e43c 	.word	0x7e37e43c
 80089d8:	8800759c 	.word	0x8800759c
 80089dc:	fe37e43c 	.word	0xfe37e43c
 80089e0:	c2f8f359 	.word	0xc2f8f359
 80089e4:	81a56e1f 	.word	0x81a56e1f
 80089e8:	43500000 	.word	0x43500000
 80089ec:	ffff3cb0 	.word	0xffff3cb0
 80089f0:	3c900000 	.word	0x3c900000
 80089f4:	00000000 	.word	0x00000000

080089f8 <floor>:
 80089f8:	ec51 0b10 	vmov	r0, r1, d0
 80089fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008a08:	2e13      	cmp	r6, #19
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	4680      	mov	r8, r0
 8008a10:	dc34      	bgt.n	8008a7c <floor+0x84>
 8008a12:	2e00      	cmp	r6, #0
 8008a14:	da17      	bge.n	8008a46 <floor+0x4e>
 8008a16:	a332      	add	r3, pc, #200	@ (adr r3, 8008ae0 <floor+0xe8>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f7f7 fd18 	bl	8000450 <__adddf3>
 8008a20:	2200      	movs	r2, #0
 8008a22:	2300      	movs	r3, #0
 8008a24:	f7f7 ff48 	bl	80008b8 <__aeabi_dcmpgt>
 8008a28:	b150      	cbz	r0, 8008a40 <floor+0x48>
 8008a2a:	2c00      	cmp	r4, #0
 8008a2c:	da55      	bge.n	8008ada <floor+0xe2>
 8008a2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008a32:	432c      	orrs	r4, r5
 8008a34:	2500      	movs	r5, #0
 8008a36:	42ac      	cmp	r4, r5
 8008a38:	4c2b      	ldr	r4, [pc, #172]	@ (8008ae8 <floor+0xf0>)
 8008a3a:	bf08      	it	eq
 8008a3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	e023      	b.n	8008a8e <floor+0x96>
 8008a46:	4f29      	ldr	r7, [pc, #164]	@ (8008aec <floor+0xf4>)
 8008a48:	4137      	asrs	r7, r6
 8008a4a:	ea01 0307 	and.w	r3, r1, r7
 8008a4e:	4303      	orrs	r3, r0
 8008a50:	d01d      	beq.n	8008a8e <floor+0x96>
 8008a52:	a323      	add	r3, pc, #140	@ (adr r3, 8008ae0 <floor+0xe8>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f7f7 fcfa 	bl	8000450 <__adddf3>
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f7f7 ff2a 	bl	80008b8 <__aeabi_dcmpgt>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d0eb      	beq.n	8008a40 <floor+0x48>
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	bfbe      	ittt	lt
 8008a6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008a70:	4133      	asrlt	r3, r6
 8008a72:	18e4      	addlt	r4, r4, r3
 8008a74:	ea24 0407 	bic.w	r4, r4, r7
 8008a78:	2500      	movs	r5, #0
 8008a7a:	e7e1      	b.n	8008a40 <floor+0x48>
 8008a7c:	2e33      	cmp	r6, #51	@ 0x33
 8008a7e:	dd0a      	ble.n	8008a96 <floor+0x9e>
 8008a80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008a84:	d103      	bne.n	8008a8e <floor+0x96>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	f7f7 fce1 	bl	8000450 <__adddf3>
 8008a8e:	ec41 0b10 	vmov	d0, r0, r1
 8008a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8008a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a9e:	40df      	lsrs	r7, r3
 8008aa0:	4207      	tst	r7, r0
 8008aa2:	d0f4      	beq.n	8008a8e <floor+0x96>
 8008aa4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ae0 <floor+0xe8>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f7f7 fcd1 	bl	8000450 <__adddf3>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f7f7 ff01 	bl	80008b8 <__aeabi_dcmpgt>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d0c2      	beq.n	8008a40 <floor+0x48>
 8008aba:	2c00      	cmp	r4, #0
 8008abc:	da0a      	bge.n	8008ad4 <floor+0xdc>
 8008abe:	2e14      	cmp	r6, #20
 8008ac0:	d101      	bne.n	8008ac6 <floor+0xce>
 8008ac2:	3401      	adds	r4, #1
 8008ac4:	e006      	b.n	8008ad4 <floor+0xdc>
 8008ac6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008aca:	2301      	movs	r3, #1
 8008acc:	40b3      	lsls	r3, r6
 8008ace:	441d      	add	r5, r3
 8008ad0:	4545      	cmp	r5, r8
 8008ad2:	d3f6      	bcc.n	8008ac2 <floor+0xca>
 8008ad4:	ea25 0507 	bic.w	r5, r5, r7
 8008ad8:	e7b2      	b.n	8008a40 <floor+0x48>
 8008ada:	2500      	movs	r5, #0
 8008adc:	462c      	mov	r4, r5
 8008ade:	e7af      	b.n	8008a40 <floor+0x48>
 8008ae0:	8800759c 	.word	0x8800759c
 8008ae4:	7e37e43c 	.word	0x7e37e43c
 8008ae8:	bff00000 	.word	0xbff00000
 8008aec:	000fffff 	.word	0x000fffff

08008af0 <_init>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	bf00      	nop
 8008af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af6:	bc08      	pop	{r3}
 8008af8:	469e      	mov	lr, r3
 8008afa:	4770      	bx	lr

08008afc <_fini>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	bf00      	nop
 8008b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b02:	bc08      	pop	{r3}
 8008b04:	469e      	mov	lr, r3
 8008b06:	4770      	bx	lr
